{
  "swagger" : "2.0",
  "info" : {
    "description" : "Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.",
    "version" : "2.0-draftAv",
    "title" : "Webshop Service API",
    "license" : {
      "name" : "SAG Services License",
      "url" : "http://business.sag.services/TO-BE-DEFINED"
    }
  },
  "host" : "business.sag.services",
  "basePath" : "/apps/prod-webshop-service-app/webshop-service",
  "tags" : [ {
    "name" : "customer",
    "description" : "The customer related service endpoints."
  }, {
    "name" : "article",
    "description" : "The article related service endpoints."
  }, {
    "name" : "order",
    "description" : "The order related service endpoints."
  }, {
    "name" : "util",
    "description" : "The service endpoints of technical support."
  }, {
    "name" : "employee",
    "description" : "The employee related service endpoints."
  }, {
    "name" : "branches",
    "description" : "The warehouse related service endpoints."
  }, {
    "name" : "electronic delivery notes",
    "description" : "The electonic delivery notes related service endpoints."
  }, {
    "name" : "invoices",
    "description" : "The invoice related service endpoints."
  }, {
    "name" : "offer",
    "description" : "The offer related service endpoints."
  }, {
    "name" : "return",
    "description" : "Service endpoints related to return entities"
  } ],
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths": {
    "/customers/{company}/{customerNr}": {
      "get": {
        "tags": [ "customer" ],
        "description": "Retrieves customer representation by customer number.",
        "operationId": "getCustomerByNr",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium", "Cross-Company-Austria", "Cross-Company-Switzerland" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response if customer with the given number could be retreived in the context of the company.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status."
          },
          "404": {
            "description": "If customer with given number does not exist, the service responds with a 404 (NotFound) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/customers/{company}/{customerNr}/creditlimit": {
      "get": {
        "tags": [ "customer" ],
        "description": "Retrieves creditlimit of given customer.",
        "operationId": "getCreditLimit",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response if credit limit of customer with the given number could be retreived in the context of the company.",
            "schema": {
              "$ref": "#/definitions/CreditLimit"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status."
          },
          "404": {
            "description": "If customer with given number does not exist, the service responds with a 404 (NotFound) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/customers/{company}/{customerNr}/addresses": {
      "get": {
        "tags": [ "customer" ],
        "description": "Retrieves invoice and delivery addresses of the customer.",
        "operationId": "getAddressesOfCustomer",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Number of the customer resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "street",
            "in": "query",
            "description": "Address street",
            "required": false,
            "type": "string"
          },
          {
            "name": "postCode",
            "in": "query",
            "description": "Address post code",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Address city",
            "required": false,
            "type": "string"
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Address country code",
            "required": false,
            "type": "string"
          },
          {
            "name": "buildingCompliment",
            "in": "query",
            "description": "Address building compliment",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Address description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the list of addresses of the customer",
            "schema": {
              "$ref": "#/definitions/Addresses"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the customer has no addresses or customer does not exist, endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/customers/{company}/{customerNr}/addresses/{addressId}": {
      "get": {
        "tags": [ "customer" ],
        "description": "Retrieves particular address by its id.",
        "operationId": "getAddressById",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Number of the customer resource.",
            "required": true,
            "type": "string"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The id of the address resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested addresses.",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status."
          },
          "404": {
            "description": "If customer or address does not exist for given company, the request responds a 404 (NotFound) status. ",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/customers/{company}/{customerNr}/courierServices/{addressId}": {
      "get": {
        "tags": [ "customer" ],
        "description": "Retrieves courier services",
        "operationId": "getCourierServices",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Number of the customer resource.",
            "required": false,
            "type": "string"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The id of the address resource.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested courier services.",
            "schema": {
              "$ref": "#/definitions/CourierServices"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status."
          },
          "404": {
            "description": "If customer or address does not exist for given company, the request responds a 404 (NotFound) status. ",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/articles/{company}": {
      "get": {
        "tags": [ "article" ],
        "description": "Retrieves representation of a list of articles, which are given by their ids.",
        "operationId": "getArticles",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleIds",
            "in": "query",
            "description": "Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides a list of article representations.",
            "schema": {
              "$ref": "#/definitions/ArticleInfoResponse"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the list of article identifier is empty, or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status."
          }
        }
      }
    },
    "/articles/{company}/{articleId}": {
      "get": {
        "tags": [ "article" ],
        "description": "Retrieves representation of an article which is given by its id.",
        "operationId": "getArticleById",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "Path parameter of id of requested article.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested article information.",
            "schema": {
              "$ref": "#/definitions/Article"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the article with given id does not exist, the service responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/articles/{company}/stocks": {
      "get": {
        "tags": [ "article" ],
        "description": "Retrieves representation of a list of article stocks, which are given by their ids.",
        "operationId": "getArticleStocks",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleIds",
            "in": "query",
            "description": "Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.",
            "required": true,
            "type": "string"
          },
          {
            "name": "branchId",
            "in": "query",
            "description": "Query parameter containing identifier of a branch.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides a list of article stocks representations.",
            "schema": {
              "$ref": "#/definitions/ArticleStockResponse"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the list of article identifier is empty, or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status."
          }
        }
      }
    },
    "/articles/{company}/stocks/articleIds": {
      "get": {
        "tags": [ "article" ],
        "description": "Retrieves representation of a list of article stocks, which are given by their ids.",
        "operationId": "getArticlesStocks",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleIds",
            "in": "query",
            "description": "Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.",
            "required": true,
            "type": "string"
          },
          {
            "name": "branchId",
            "in": "query",
            "description": "Query parameter containing identifier of a branch.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides a list of article stocks representations.",
            "schema": {
              "$ref": "#/definitions/ArticleStockResponse"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the list of article identifier is empty, or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status.            "
          }
        }
      }
    },
    "/articles/{company}/stocks/sum": {
      "get": {
        "tags": [ "article" ],
        "description": "Retrieves representation of a list of articles sum of stocks for the requested country, which are given by their ids.",
        "operationId": "getArticleStocksSum",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleIds",
            "in": "query",
            "description": "Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides a list of article stocks sum representations.",
            "schema": {
              "$ref": "#/definitions/ArticleStockSumResponse"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the list of article identifier is empty, or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status.            "
          }
        }
      }
    },
    "/articles/{company}/{articleId}/stock": {
      "get": {
        "tags": [ "article" ],
        "description": "Retrieves the quantity on stock of a certain article which is given by its id.",
        "operationId": "getArticleStockById",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleId",
            "in": "path",
            "description": "Path parameter of id of requested article.",
            "required": true,
            "type": "string"
          },
          {
            "name": "branchId",
            "in": "query",
            "description": "Query parameter containing identifier of a branch.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the quantity on stock.",
            "schema": {
              "type": "number",
              "format": "double",
              "description": "The currently available quantity of requested article."
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the article with given id does not exist, the service responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/articles/{company}/prices": {
      "post": {
        "tags": [ "article" ],
        "description": "Requests prices of a list of articles from ERP system.",
        "operationId": "getArticlePrices",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "priceRequest",
            "description": "The request contains a list of items, which contain articles with quantities.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PriceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Prices"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object."
          }
        }
      }
    },
    "/articles/{company}/availabilities": {
      "post": {
        "tags": [ "article" ],
        "description": "Requests availabilities of a list of articles from ERP system.",
        "operationId": "getAvailabilities",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "availabilityRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AvailabilityRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Availabilities"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object."
          }
        }
      }
    },
    "/articles/{company}/{vendorId}/stocks": {
      "post": {
        "tags": [ "article" ],
        "description": "Requests stock information for a list of articles from SAG vendors",
        "operationId": "getVendorStocks",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "vendorId",
            "in": "path",
            "description": "The vendorID to which the request will be sent",
            "required": true,
            "type": "string",
            "enum": [ "63393", "1457617", "58484", "63103", "858888", "859067" ]
          },
          {
            "in": "body",
            "name": "vendorStockRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorStockRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VendorStocks"
            }
          },
          "400": {
            "description": "If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds  with a detailled description of violated rules instead of an ErrorInfo object."
          }
        }
      }
    },
    "/articles/{company}/vendors": {
      "get": {
        "tags": [ "article" ],
        "description": "Requests vendor information for a list of articles",
        "operationId": "getArticleVendors",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "articleIds",
            "in": "query",
            "description": "Query parameter containing a list of identifiers of comma-seperated articles ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ArticleVendors"
            }
          },
          "400": {
            "description": "If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds  with a detailled description of violated rules instead of an ErrorInfo object."
          }
        }
      }
    },
    "/baskets/{company}": {
      "post": {
        "tags": [ "order" ],
        "description": "Requests forwarding of (new) order to ERP system, so that it can be manually post-processed by ERP users.",
        "operationId": "createShoppingBasket",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "orderRequest",
            "description": "The request containing the shopping basket for which an order is expected to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If provided shopping basket passes business validation rules and ERP ensures fulfillment the order based on basket, the response will be 200 (OK).",
            "schema": {
              "$ref": "#/definitions/OrderConfirmation"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/baskets/{company}/history": {
      "get": {
        "tags": [ "order" ],
        "description": "Retrieves basket history information",
        "operationId": "getBasketHistory",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerRefText",
            "in": "query",
            "description": "Reference text for the header of the order which will be used in all documents e.g. invoice.",
            "required": false,
            "type": "string",
            "maxLength": 60
          },
          {
            "name": "orderNr",
            "in": "query",
            "description": "The number of the requested order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the history of the basket results in an HTTP status of 200 (OK). ",
            "schema": {
              "$ref": "#/definitions/BasketHistory"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}": {
      "post": {
        "tags": [ "order" ],
        "description": "Requests transfer of new shopping basket to the ERP system. The ERP system asynchronously creates orders based on the shopping basket, but service call immediately returns when shopping basket could be transfered.        ",
        "operationId": "createOrder",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "orderRequest",
            "description": "The request containing the order to be forwarded.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful transfer of order results in Accepted status code.",
            "schema": {
              "$ref": "#/definitions/OrderConfirmation"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/process-status": {
      "post": {
        "tags": [ "order" ],
        "description": "Requests change of the sales order process status.      ",
        "operationId": "changeOrderProcessStatus",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "orderProcessStatus",
            "description": "The request containing the order to to have its status changed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderProcessStatus"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful transfer of order results in Accepted status code.",
            "schema": {
              "$ref": "#/definitions/OrderProcessStatusConfirmation"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/update-order": {
      "post": {
        "tags": [ "order" ],
        "description": "Requests transfer of new shopping basket to the ERP system. The ERP system asynchronously creates orders based on the shopping basket, but service call immediately returns when shopping basket could be transfered.        ",
        "operationId": "updateOrder",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "updateOrderRequest",
            "description": "The request containing the order to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful update of order results in false error code",
            "schema": {
              "$ref": "#/definitions/UpdateOrderConfirmation"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/{customerNr}": {
      "get": {
        "tags": [ "order" ],
        "description": "Retrieves representation of a list of orders for a customer.",
        "operationId": "getOrdersOfCustomer",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNr",
            "in": "query",
            "description": "The number of the requested order.",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The start date of range for order selection in ISO 8601 format.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The end date of range for order selection in ISO 8601 format.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The number of the page to be retrieved, defaults to the first page. The page parameter should not be provided explicitly, but the usage of `next` and `prev` links of the response is recommended.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the orders of the customer results in an HTTP status of 200 (OK). ",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the customer has no orders or customer does not exist, endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/{customerNr}/{orderNr}/positions": {
      "get": {
        "tags": [ "order" ],
        "description": "Retrieves the representation of a list of positions for an order given by its number.",
        "operationId": "getOrderPositions",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNr",
            "in": "path",
            "description": "The number of the order.",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The number of the page to be retrieved, defaults to the first page. The page parameter should not be provided explicitly, but the usage of `next` and `prev` links of the response is recommended.           ",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the entire list of positions of given order.",
            "schema": {
              "$ref": "#/definitions/OrderPositions"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the order given by its number does not exist, the service endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/{customerNr}/{orderNr}/positions/{sequence}": {
      "get": {
        "tags": [ "order" ],
        "description": "Retrieves the representation of a particular order position, which is given by the number of the order and the sequence number of the position.",
        "operationId": "getOrderPosition",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNr",
            "in": "path",
            "description": "The number of the order.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sequence",
            "in": "path",
            "description": "the id of the position",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response returns the representation of the position specified by the parameters.",
            "schema": {
              "$ref": "#/definitions/OrderPosition"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the order position referenced by number of order and sequence number does not exist, the service endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/{customerNr}/{deliveryNoteNr}/pdf": {
      "get": {
        "tags": [ "order" ],
        "description": "Retrieves url that points to the pdf of the given deliveryNote nr.",
        "operationId": "getDeliveryNotePdf",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Path parameter of the number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deliveryNoteNr",
            "in": "path",
            "description": "Path parameter of nr of requested deliveryNote.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested url.",
            "schema": {
              "$ref": "#/definitions/UrlEntry"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the deliveryNote with given nr does not exist, the service responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/orders/{company}/create-return-order": {
      "post": {
        "tags": [ "return" ],
        "description": "Provides functionality to create a return order and post it.",
        "operationId": "createReturnOrder",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "returnOrderRequest",
            "description": "The request containing the return order to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReturnOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful transfer of return order results",
            "schema": {
              "$ref": "#/definitions/ReturnOrder"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/transactions/{company}": {
      "get": {
        "tags": [ "return" ],
        "description": "Retrieves the representation of a list of transaction references for a given parameter",
        "operationId": "getTransactionReferences",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "reference",
            "in": "query",
            "description": "The value of this parameter can refer to orderNr or deliveryNoteNr or invoiceNr or transaction Id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the entire list of transaction references for given search criteria",
            "schema": {
              "$ref": "#/definitions/TransactionReferences"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the transaction references given by the search criteria do not exist, the service endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/employees/{company}": {
      "get": {
        "tags": [ "employee" ],
        "description": "Retrieves employee representation.",
        "operationId": "getEmployees",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "searchName",
            "in": "query",
            "description": "The search name of the employee.",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the employee.",
            "required": false,
            "type": "string"
          },
          {
            "name": "telephoneNr",
            "in": "query",
            "description": "The telephone number of the employee.",
            "required": false,
            "type": "string"
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "The email address number of the employee.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response if employee could be retreived in the context of the company.",
            "schema": {
              "$ref": "#/definitions/Employees"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status."
          },
          "404": {
            "description": "If the queried employee does not exist, the service responds with a 404 (NotFound) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/employees/{company}/{personalNr}": {
      "get": {
        "tags": [ "employee" ],
        "description": "Retrieves employee representation by employee personal number.",
        "operationId": "getEmployeeByNr",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "personalNr",
            "in": "path",
            "description": "The personal number of the employee.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response if employee with the given number could be retreived in the context of the company.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status."
          },
          "404": {
            "description": "If employee with given number does not exist, the service responds with a 404 (NotFound) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/branches/{company}": {
      "get": {
        "tags": [ "branches" ],
        "description": "Retrieves warehouses information",
        "operationId": "getBranches",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response if branches could be retreived in the context of the company.",
            "schema": {
              "$ref": "#/definitions/Branches"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    //"/branches/{company}/next-working-date" : {
    //  "post" : {
    //    "tags" : [ "branches" ],
    //    "description" : "Retrieves next working day of a specific warehouse",
    //    "operationId" : "getNextWorkingDate",
    //    "produces" : [ "application/json" ],
    //    "parameters" : [ {
    //      "name" : "company",
    //      "in" : "path",
    //      "description" : "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'",
    //      "required" : true,
    //      "type" : "string",
    //      "enum" : [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
    //    }, {
    //      "in" : "body",
    //      "name" : "nextWorkingDateRequest",
    //      "required" : true,
    //      "schema" : {
    //        "$ref" : "#/definitions/NextWorkingDateRequest"
    //      }
    //    } ],
    //    "responses" : {
    //      "200" : {
    //        "description" : "Successful response if next working date could be retreived in the context of the company.",
    //        "schema" : {
    //          "$ref" : "#/definitions/NextWorkingDate"
    //        }
    //      },
    //      "400" : {
    //        "description" : "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
    //        "schema" : {
    //          "$ref" : "#/definitions/ErrorInfo"
    //        }
    //      }
    //    }
    //  }
    //},
    "/branches/{company}/{branchId}": {
      "get": {
        "tags": [ "branches" ],
        "description": "Retrieves representation of a warehouse which is given by its id.",
        "operationId": "getBranchById",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "branchId",
            "in": "path",
            "description": "Path parameter of id of requested warehouse.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested warehouse information.",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the branch with given id does not exist, the service responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/electronic-delivery-notes/{company}/{customerNr}": {
      "get": {
        "tags": [ "electronic delivery notes" ],
        "description": "Retrieves representation of a list of electronic delivery notes for a customer.  At least one query must be used, the `dateFrom`. If query parameter `dateTo` is missing then today's date is implied.",
        "operationId": "getElectronicDeliveryNotes",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Path parameter of the number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The start date of range for electronic delivery notes selection in ISO 8601 format.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The end date of range for electronic delivery notes selection in ISO 8601 format.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the electronic delivery notes of the customer results in an HTTP status of 200 (OK)",
            "schema": {
              "$ref": "#/definitions/ElectronicDeliveryNotes"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the customer has no electronic delivery notes or customer does not exist, endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/invoices/{company}/{customerNr}/{invoiceId}": {
      "get": {
        "tags": [ "invoices" ],
        "description": "Retrieves representation of an invoice which is given by its id.",
        "operationId": "getInvoiceById",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Path parameter of the number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Path parameter of id of requested invoice.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested invoice information.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the invoice with given id does not exist, the service responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/invoices/{company}/{customerNr}": {
      "get": {
        "tags": [ "invoices" ],
        "description": "Retrieves representation of a list of invoices for a customer.  At least one query must be used, and the dateFrom/dateTo parameters, should be used as a pair, with a date span of 31 days.",
        "operationId": "getInvoices",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Path parameter of the number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The start date of range for invoice selection in ISO 8601 format.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The end date of range for invoice selection in ISO 8601 format.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "orderNr",
            "in": "query",
            "description": "An order number of the invoice.",
            "required": false,
            "type": "string"
          },
          {
            "name": "packingSlipNr",
            "in": "query",
            "description": "A packing slip number of the invoice.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the invoices of the customer results in an HTTP status of 200 (OK)",
            "schema": {
              "$ref": "#/definitions/Invoices"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the customer has no invoices or customer does not exist, endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/invoices/{company}/{customerNr}/{invoiceNr}/pdf": {
      "get": {
        "tags": [ "invoices" ],
        "description": "Retrieves url that points to the pdf of the given invoice nr.",
        "operationId": "getInvoicePdf",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "Path parameter of the number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNr",
            "in": "path",
            "description": "Path parameter of nr of requested invoice.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response provides the requested url.",
            "schema": {
              "$ref": "#/definitions/UrlEntry"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the invoice with given nr does not exist, the service responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/invoices/{company}/{customerNr}/{invoiceNr}/positions": {
      "get": {
        "tags": [ "invoices" ],
        "description": "Retrieves the representation of a list of positions for an invoice given by its number.",
        "operationId": "getInvoicePositions",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNr",
            "in": "path",
            "description": "The number of the invoice.",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderNr",
            "in": "query",
            "description": "An order number of the invoice.",
            "required": false,
            "type": "string"
          },
          {
            "name": "packingSlipNr",
            "in": "query",
            "description": "A packing slip number of the invoice.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The number of the page to be retrieved, defaults to the first page. The page parameter should not be provided explicitly, but the usage of `next` and `prev` links of the response is recommended.           ",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the entire list of positions of given invoice.",
            "schema": {
              "$ref": "#/definitions/InvoicePositions"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the invoice given by its number does not exist, the service endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/invoices/{company}/{customerNr}/{invoiceNr}/positions/{sequence}": {
      "get": {
        "tags": [ "invoices" ],
        "description": "Retrieves the representation of a list of positions for an invoice given by its number.",
        "operationId": "getInvoicePosition",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNr",
            "in": "path",
            "description": "The number of the invoice.",
            "required": true,
            "type": "string"
          },
          {
            "name": "sequence",
            "in": "path",
            "description": "The sequence number of the position in the invoice.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "orderNr",
            "in": "query",
            "description": "An order number of the invoice.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the entire list of positions of given invoice.",
            "schema": {
              "$ref": "#/definitions/InvoicePositions"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the invoice given by its number does not exist, the service endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/invoices/{company}/{customerNr}/positions": {
      "get": {
        "tags": [ "invoices" ],
        "description": "Retrieves the representation of a list of positions for a list of invoices given by their number.",
        "operationId": "getInvoiceListPositions",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g. 'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNrs",
            "in": "query",
            "description": "A list of invoice numbers seperated by comma",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The number of the page to be retrieved, defaults to the first page. The page parameter should not be provided explicitly, but the usage of `next` and `prev` links of the response is recommended.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the entire list of positions of given invoice.",
            "schema": {
              "$ref": "#/definitions/InvoicePositions"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the invoices given by their number donot exist, the service endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/offers/{company}": {
      "post": {
        "tags": [ "offer" ],
        "description": "Creates an offer in the Ax ERP.",
        "operationId": "createOffer",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "in": "body",
            "name": "orderRequest",
            "description": "The request containing the shopping basket for which an offer is expected to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If provided shopping basket passes business validation rules and ERP ensures fulfillment the order based on basket, the response will be 200 (OK).",
            "schema": {
              "$ref": "#/definitions/OfferConfirmation"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/operatingunits/{company}/{operatingUnitNr}": {
      "get": {
        "tags": [ "operatingunit" ],
        "description": "Retrieves representation of a warehouse which is given by its id",
        "operationId": "getOperatingUnit",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "operatingUnitNr",
            "in": "path",
            "description": "Operating unit number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returns the operation unit entity ",
            "schema": {
              "$ref": "#/definitions/OperatingUnit"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    },
    "/release": {
      "get": {
        "tags": [ "util" ],
        "description": "Public endpoint returns release, build and version information of running service. This public endpoint is the only one, that is not protected any security measurement, and can therefore used as health-check by any monitoring application.",
        "operationId": "getReleaseInfo",
        "produces": [ "application/json" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response provides release information.",
            "schema": {
              "$ref": "#/definitions/ReleaseInfo"
            }
          }
        }
      }
    },
    "/usedcreditlimit/{company}/{customerNr}": {
      "get": {
        "tags": [ "AnalyticalCard" ],
        "description": "Retrieves representation of a used credit card for a customer.",
        "operationId": "GetUsedCreditLimitOfCustomer",
        "produces": [ "application/json" ],
        "parameters": [
          {
            "name": "company",
            "in": "path",
            "description": "The company to which the webshop belongs, e.g.'Derendinger-Switzerland'.",
            "required": true,
            "type": "string",
            "enum": [ "Derendinger-Switzerland", "Technomag-Switzerland", "Klaus-Switzerland", "Matik-Switzerland", "Walchli-Bollier-Bulach", "Matik-Austria", "Derendinger-Austria", "Remco-Belgium" ]
          },
          {
            "name": "customerNr",
            "in": "path",
            "description": "The number of the customer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "UsedCreditLimitPaymentMethod",
            "in": "query",
            "description": "The payment method, enum.",
            "required": true,
            "type": "string",
            "enum": [ "NONE", "Wholesale", "Cash Payment" ]
          }       
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the used credit limit of the customer results in an HTTP status of 200 (OK). ",
            "schema": {
              "$ref": "#/definitions/UsedCreditLimit"
            }
          },
          "400": {
            "description": "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          },
          "404": {
            "description": "If the customer has no used credit limit or customer does not exist, endpoint responds with a 404 (Not Found) status.",
            "schema": {
              "$ref": "#/definitions/ErrorInfo"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "LinkEntry": {
      "type": "object",
      "required": [ "href" ],
      "properties": {
        "href": {
          "type": "string",
          "description": "URL of link."
        }
      },
      "example": {
        "href": "href"
      }
    },
    "ReleaseInfo": {
      "type": "object",
      "required": [ "releaseBuild", "releaseDate", "releaseVersion" ],
      "properties": {
        "releaseBuild": {
          "type": "string",
          "description": "The build number of released service application."
        },
        "releaseVersion": {
          "type": "string",
          "description": "The version of released service application according to version control system."
        },
        "releaseDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the service application has been built and released."
        }
      },
      "example": {
        "releaseBuild": "releaseBuild",
        "releaseDate": "2000-01-23T04:56:07.000+00:00",
        "releaseVersion": "releaseVersion"
      }
    },
    "ErrorInfo": {
      "type": "object",
      "required": [ "errorMessage", "errorOrigin" ],
      "properties": {
        "errorOrigin": {
          "type": "string",
          "description": "The origin of the error.",
          "enum": [ "WEBSHOP_SERVICE", "ODATA_SERVICE", "CUSTOM_SERVICE", "AZURE_CLOUD", "OTHER" ]
        },
        "errorMessage": {
          "type": "string",
          "description": "Description of the error that occured."
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [ "_links", "nr" ],
      "properties": {
        "nr": {
          "type": "string",
          "description": "The number of the customer."
        },
        "name": {
          "type": "string",
          "description": "The name of the customer."
        },
        "vatNr": {
          "type": "string",
          "description": "Customer's value-added-tax number."
        },
        "defaultBranchId": {
          "type": "string",
          "description": "The default branch of the customer."
        },
        "comments": {
          "type": "string",
          "description": "Comments of customer."
        },
        "language": {
          "type": "string",
          "description": "ISO code of language, which is preferred by the customer. This language should be provided in subsequent request for this customer. The language is then expected to be provided in `Accept-Language` HTTP header."
        },
        "addressSalutation": {
          "type": "string",
          "description": "The personal title of a customer."
        },
        "blockedStatus": {
          "type": "string",
          "description": "Enumeration value of the blocking status of customer.",
          "enum": [ "NONE", "NEVER", "ALL", "PAYMENT", "PROCUREMENT", "INVOICE", "DELIVERY", "INVOICE_AND_DELIVERY" ]
        },
        "blockedReason": {
          "type": "string",
          "description": "Description of reason for blocked customer."
        },
        "currency": {
          "type": "string",
          "description": "ISO code of currency for invoicing the customer."
        },
        "sendMethod": {
          "type": "string",
          "description": "The `sendMethod` describes, how goods are usually delivered to the customer."
        },
        "paymentType": {
          "type": "string",
          "description": "The payment type of customer."
        },
        "invoiceType": {
          "type": "string",
          "description": "Short description of how the customer gets invoiced."
        },
        "invoiceTypeDesc": {
          "type": "string",
          "description": "Description of how the customer gets invoiced."
        },
        "alreadyUsedCredit": {
          "type": "number",
          "format": "double"
        },
        "availableCredit": {
          "type": "number",
          "format": "double"
        },
        "letterCode": {
          "type": "string",
          "description": "The letter code of the customer",
          "enum": [ "None", "CollectionLetter1", "CollectionLetter2", "CollectionLetter3", "CollectionLetter4" ]
        },
        "salesOrderPool": {
          "type": "string",
          "description": "SAG company field."
        },
        "salesGroup": {
          "type": "string",
          "description": "The Sales Group of the customer."
        },
        "costCenter": {
          "type": "string",
          "description": "The cost center which the customer belongs to."
        },
        "kuKa": {
          "type": "string",
          "description": "The category of the customer (under PKZ_BAUM hierarchy - KuKas_DD/ KuKas_MA)"
        },
        "salesRepPersonalNumber": {
          "type": "string",
          "description": "The Sales Rep’s Personal Number of the customer’s Sales Group."
        },
        "termOfPayment": {
          "type": "string",
          "description": "The payment terms for the customer."
        },
        "cashDiscount": {
          "type": "string",
          "description": "The cash discount for the customer."
        },
        "disposalNumber": {
          "type": "string",
          "description": "The customer with this disposer number doesn't pay for recycling fees for the recyclable articles."
        },
        "collaborationEDI": {
          "type": "boolean",
          "description": "Indicates the participation of the customer in the EDI."
        },
        "invoiceAccount": {
          "type": "string",
          "description": "The invoice account of the customer."
        },
        "gwsDupCustCompleteInvoicing": {
          "type": "boolean",
          "description": "Indicates whether the customer has complete invoicing"
        },
        "gwsInvoiceSumBy": {
          "type": "string",
          "description": "Indicates how the invoice is sum"
        },
        "sagGwsLimitedTimeDlvTermExpiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "The limited time delivery term expiry date"
        },
        "sagGwsPriceDiscDetailsForNetPricingPackingSlip": {
          "type": "boolean",
          "description": "Indicates if there are price discount details for net on pricing packing slip"
        },
        "sagGwsPrintPricesOnSalesPackingSlip": {
          "type": "boolean",
          "description": "Indicates whether the prices on sales are printed on packing slip"
        },
        "sagGwsExcludeFromShipmentConsolidation": {
          "type": "boolean",
          "description": "Indicates whether customer is excluded from shipment consolidation"
        },
        "sagGwsSuppressPrintOfRecommendedPrice": {
          "type": "boolean",
          "description": "Indicates whether there is suppress print of recommended price"
        },
        "sagPriceTypeSelectionEnabled": {
          "type": "string",
          "description": "Indicates whether price type selection is enabled"
        },
        "sagGwsPriceDiscDetailsForNetPricingCalcPricePresentation": {
          "type": "string",
          "description": "The price discount details for net pricing calculated in price presentaion"
        },
        "gwsInvoiceSortCode": {
          "type": "string",
          "description": "The invoice sort code"
        },
        "gwsDayPeriod": {
          "type": "string",
          "description": "The day period"
        },
        "custCollectionLetterCode": {
          "type": "string",
          "description": "The customer collection letter code"
        },
        "gwsInvoiceAdvancedSummarySetup": {
          "type": "string",
          "description": "The invoice advanced summary setup"
        },
        "contacts": {
          "type": "array",
          "description": "Contacts of customer.",
          "items": {
            "$ref": "#/definitions/ContactInfo"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +\n +\n **self (GET)**: The link to article representation itself. Following this link returns representation of very same article resource. +\n +\n **collection/addresses (GET)**: Following this link with a GET request, results in a list of all addresses of the customer. +\n +\n **collection/orders (GET, POST)**: Following this link with a GET request, results in a list of all orders of the customer. In order to create a new order, a POST request must be sent to this URI. +\n +\n **collection/prices (POST)**: Article prices for customer can be retrieved by submitting a POST request to this URI. The request message contains the list of articles, for which prices are required. +\n +\n **collection/availabilities (POST)**: Availability of articles for requesting customer can be retrieved by submitting a POST request to this URI. The request message contains the list of articles, for which article availabilities are required. +\n +\n **collection/invoices (GET)**: Following this link with a GET request, results in a list of the invoices of the customer. +   \n +\n **collection/creditlimit (GET)**: Following this link with a GET request, results in the credit limit info of the customer. +           ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "sagGwsPriceDiscDetailsForNetPricingCalcPricePresentation": "sagGwsPriceDiscDetailsForNetPricingCalcPricePresentation",
        "blockedStatus": "NONE",
        "nr": "nr",
        "sagGwsLimitedTimeDlvTermExpiryDate": "2000-01-23T04:56:07.000+00:00",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "salesGroup": "salesGroup",
        "invoiceAccount": "invoiceAccount",
        "language": "language",
        "custCollectionLetterCode": "custCollectionLetterCode",
        "gwsInvoiceSumBy": "gwsInvoiceSumBy",
        "paymentType": "paymentType",
        "sendMethod": "sendMethod",
        "kuKa": "kuKa",
        "salesOrderPool": "salesOrderPool",
        "sagGwsPriceDiscDetailsForNetPricingPackingSlip": true,
        "invoiceTypeDesc": "invoiceTypeDesc",
        "collaborationEDI": true,
        "sagGwsSuppressPrintOfRecommendedPrice": true,
        "disposalNumber": "disposalNumber",
        "invoiceType": "invoiceType",
        "currency": "currency",
        "gwsDayPeriod": "gwsDayPeriod",
        "sagGwsExcludeFromShipmentConsolidation": true,
        "cashDiscount": "cashDiscount",
        "termOfPayment": "termOfPayment",
        "vatNr": "vatNr",
        "alreadyUsedCredit": 0.8008281904610115,
        "comments": "comments",
        "availableCredit": 6.027456183070403,
        "blockedReason": "blockedReason",
        "letterCode": "None",
        "costCenter": "costCenter",
        "defaultBranchId": "defaultBranchId",
        "addressSalutation": "addressSalutation",
        "gwsInvoiceAdvancedSummarySetup": "gwsInvoiceAdvancedSummarySetup",
        "sagGwsPrintPricesOnSalesPackingSlip": true,
        "salesRepPersonalNumber": "salesRepPersonalNumber",
        "gwsDupCustCompleteInvoicing": true,
        "name": "name",
        "gwsInvoiceSortCode": "gwsInvoiceSortCode",
        "sagPriceTypeSelectionEnabled": "sagPriceTypeSelectionEnabled",
        "contacts": [
          {
            "contactDescription": "contactDescription",
            "contactValue": "contactValue",
            "isPrimary": true,
            "contactType": "Phone"
          },
          {
            "contactDescription": "contactDescription",
            "contactValue": "contactValue",
            "isPrimary": true,
            "contactType": "Phone"
          }
        ]
      }
    },
    "ContactInfo": {
      "type": "object",
      "properties": {
        "contactValue": {
          "type": "string",
          "description": "Customer's contact info value"
        },
        "contactDescription": {
          "type": "string",
          "description": "Description of the customer's contact"
        },
        "contactType": {
          "type": "string",
          "description": "The type of the contact of the customer",
          "enum": [ "Phone", "Email", "URL", "Telex", "Fax" ]
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Indicator whether the contact is the primary one of the customer"
        }
      },
      "example": {
        "contactDescription": "contactDescription",
        "contactValue": "contactValue",
        "isPrimary": true,
        "contactType": "Phone"
      }
    },
    "Address": {
      "type": "object",
      "required": [ "_links", "id" ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the address. Although, identifiers usually not returned \"as is\" to calling Webshop application, this exceptional case is justified, because the\n 'address id' must be passed back with availability request."
        },
        "street": {
          "type": "string",
          "description": "Street of customer's address."
        },
        "streetNumber": {
          "type": "string",
          "description": "Street number of customer's address."
        },
        "postOfficeBox": {
          "type": "string"
        },
        "postCode": {
          "type": "string",
          "description": "Post code of address, AKA zip code."
        },
        "city": {
          "type": "string",
          "description": "City of address."
        },
        "countryCode": {
          "type": "string",
          "description": "ISO code of the country of the address."
        },
        "country": {
          "type": "string",
          "description": "Multi-language name of the country. Is this required???? Do webshop applications rather use countryCode and their own translations????"
        },
        "state": {
          "type": "string",
          "description": "???."
        },
        "active": {
          "type": "boolean",
          "description": "Boolean indicator for address being active.",
          "default": true
        },
        "primary": {
          "type": "boolean",
          "description": "Boolean indicator for primary address.",
          "default": false
        },
        "addressType": {
          "type": "string",
          "description": "Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.",
          "enum": [ "DELIVERY", "INVOICE", "DEFAULT" ]
        },
        "buildingCompliment": {
          "type": "string",
          "description": "Additional address related information on the address's building."
        },
        "description": {
          "type": "string",
          "description": "A dercription of the purpoce of the returned address.           "
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to address representation itself. Following this link returns representation of very same address resource. +\n +\n **next-tour (GET)**: Following this link, the next planned delivery tour to this address will be returned. Start date/time can be provided as query parameter, so that only tours departing from warehouse/distribution center after or equal that given start date/time will be considered. Current date/time will be used when query parameter is missing.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "buildingCompliment": "buildingCompliment",
        "country": "country",
        "streetNumber": "streetNumber",
        "city": "city",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "addressType": "DELIVERY",
        "active": true,
        "description": "description",
        "postOfficeBox": "postOfficeBox",
        "street": "street",
        "countryCode": "countryCode",
        "postCode": "postCode",
        "id": "id",
        "state": "state",
        "primary": false
      }
    },
    "Addresses": {
      "type": "object",
      "required": [ "_links", "addresses" ],
      "properties": {
        "addresses": {
          "type": "array",
          "description": "The list of addresses is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to representation of list of addresses itself. Following this link returns representation of very same list of addresses.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "addresses": [
          {
            "buildingCompliment": "buildingCompliment",
            "country": "country",
            "streetNumber": "streetNumber",
            "city": "city",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "addressType": "DELIVERY",
            "active": true,
            "description": "description",
            "postOfficeBox": "postOfficeBox",
            "street": "street",
            "countryCode": "countryCode",
            "postCode": "postCode",
            "id": "id",
            "state": "state",
            "primary": false
          },
          {
            "buildingCompliment": "buildingCompliment",
            "country": "country",
            "streetNumber": "streetNumber",
            "city": "city",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "addressType": "DELIVERY",
            "active": true,
            "description": "description",
            "postOfficeBox": "postOfficeBox",
            "street": "street",
            "countryCode": "countryCode",
            "postCode": "postCode",
            "id": "id",
            "state": "state",
            "primary": false
          }
        ],
        "_links": {
          "key": {
            "href": "href"
          }
        }
      }
    },
    "Tour": {
      "type": "object",
      "required": [ "startTime", "tourName" ],
      "properties": {
        "tourName": {
          "type": "string",
          "description": "A string of format X_Y_Z where X is the starting point of the tour, Y is the Description (tour number), Z is the time(HH:mm)."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Point in time when tour starts at distribution center. +\n +\n **Note 1**: This isn't the point in time when customer's delivery address is reached, because that time is actually not predictable."
        }
      },
      "example": {
        "startTime": "2000-01-23T04:56:07.000+00:00",
        "tourName": "tourName"
      }
    },
    "UsedCreditLimit": {
      "type": "object",
      "required": [ "postedBalance", "inProcessAmount" ],
      "properties": {
        "postedBalance": {
          "type": "double",
          "description": "PostedBalance"
        },
        "inProcessAmount": {
          "type": "double",
          "description": "InProcessAmount"
        }
      },
      "example": {
        "postedBalance": "1.99",
        "inProcessAmount": "1.99"
      }
    },
    "Article": {
      "type": "object",
      "required": [ "_links", "id" ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the article."
        },
        "description": {
          "type": "string",
          "description": "Description of article."
        },
        "number": {
          "type": "string",
          "description": "Number of article."
        },
        "keyword": {
          "type": "string",
          "description": "Search term of article in SAG-sys."
        },
        "salesQuantity": {
          "type": "number",
          "format": "double",
          "description": "Unit of consumption, i.e. number of units to be sold (SAG speech for 'Verbrauchseinheit')."
        },
        "depotArticleId": {
          "type": "string",
          "description": "Leading article id of related depot article, if there is any; null otherwise."
        },
        "recycleArticleId": {
          "type": "string",
          "description": "Leading article id of related recycle article,if there is any;null otherwise"
        },
        "vocArticleId": {
          "type": "string",
          "description": "Leading article id of related voc article, if there is any; null otherwise."
        },
        "vrgArticleId": {
          "type": "string",
          "description": "Leading article id of related vrg article, if there is any; null otherwise."
        },
        "articleLock": {
          "type": "boolean",
          "description": "Indicator for article being locked at an Umsart level or with Absolute ArtikelSperre"
        },
        "fitmentLock": {
          "type": "boolean",
          "description": "Indicator for article being locked for front-end applications"
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to article representation itself. Following this link returns representation of very same article resource.\n +\n **collection/stock (GET)**: Following this link with a GET request, results in a list of the article stock per branch. +           ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "articleLock": true,
        "number": "number",
        "recycleArticleId": 1465812981,
        "depotArticleId": 6027456182,
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "salesQuantity": 0.8008281904610115,
        "vrgArticleId": 5637376656,
        "fitmentLock": true,
        "description": "description",
        "vocArticleId": 5962133916,
        "id": "id",
        "keyword": "keyword"
      }
    },
    "ArticleInfoResponse": {
      "type": "object",
      "required": [ "_links" ],
      "properties": {
        "articles": {
          "type": "array",
          "description": "List of results of articles.",
          "items": {
            "$ref": "#/definitions/ArticleInfo"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +\n +\n **self (GET)**: The link to the article response representation itself. Following this link returns the very same response representation.\n +\n **collection/stocks (GET)**: Following this link with a GET request, results in a list of articles stocks per branch. +\n +\n **collection/stocks/sum (GET)**: Following this link with a GET request, results in a list of articles sum of stocks for the requested country. +            ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "articles": [
          {
            "articleId": 2302135887,
            "article": {
              "articleLock": true,
              "number": "number",
              "recycleArticleId": 1465812981,
              "depotArticleId": 6027456182,
              "_links": {
                "key": {
                  "href": "href"
                }
              },
              "salesQuantity": 0.8008281904610115,
              "vrgArticleId": 5637376656,
              "fitmentLock": true,
              "description": "description",
              "vocArticleId": 5962133916,
              "id": "id",
              "keyword": "keyword"
            }
          },
          {
            "articleId": 2302135887,
            "article": {
              "articleLock": true,
              "number": "number",
              "recycleArticleId": 1465812981,
              "depotArticleId": 6027456182,
              "_links": {
                "key": {
                  "href": "href"
                }
              },
              "salesQuantity": 0.8008281904610115,
              "vrgArticleId": 5637376656,
              "fitmentLock": true,
              "description": "description",
              "vocArticleId": 5962133916,
              "id": "id",
              "keyword": "keyword"
            }
          }
        ]
      }
    },
    "ArticleInfo": {
      "type": "object",
      "required": [ "articleId" ],
      "properties": {
        "article": {
          "$ref": "#/definitions/Article"
        },
        "articleId": {
          "type": "string",
          "description": "The id of requested article."
        }
      },
      "example": {
        "articleId": 2302135887,
        "article": {
          "articleLock": true,
          "number": "number",
          "recycleArticleId": 1465812981,
          "depotArticleId": 6027456182,
          "_links": {
            "key": {
              "href": "href"
            }
          },
          "salesQuantity": 0.8008281904610115,
          "vrgArticleId": 5637376656,
          "fitmentLock": true,
          "description": "description",
          "vocArticleId": 5962133916,
          "id": "id",
          "keyword": "keyword"
        }
      }
    },
    "ArticleStockResponse": {
      "type": "object",
      "required": [ "_links" ],
      "properties": {
        "articleStock": {
          "type": "array",
          "description": "List of results of article stocks.",
          "items": {
            "$ref": "#/definitions/ArticleStockInfo"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +\n +\n **self (GET)**: The link to the article stock response representation itself. Following this link returns the very same response representation.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "articleStock": [
          {
            "articleId": 6027456182,
            "stock": {
              "branchId": "branchId",
              "_links": {
                "key": {
                  "href": "href"
                }
              },
              "stock": 0.8008281904610115
            }
          },
          {
            "articleId": 6027456182,
            "stock": {
              "branchId": "branchId",
              "_links": {
                "key": {
                  "href": "href"
                }
              },
              "stock": 0.8008281904610115
            }
          }
        ]
      }
    },
    "ArticleStockSumResponse": {
      "type": "object",
      "required": [ "_links" ],
      "properties": {
        "articleStockSum": {
          "type": "array",
          "description": "List of results of article total stocks.",
          "items": {
            "$ref": "#/definitions/ArticleStockSumInfo"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +\n +\n **self (GET)**: The link to the article stock sum response representation itself. Following this link returns the very same response representation.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "articleStockSum": [
          {
            "articleId": 6027456182,
            "stockSum": {
              "_links": {
                "key": {
                  "href": "href"
                }
              },
              "stockSum": 0.8008281904610115
            }
          },
          {
            "articleId": 6027456182,
            "stockSum": {
              "_links": {
                "key": {
                  "href": "href"
                }
              },
              "stockSum": 0.8008281904610115
            }
          }
        ]
      }
    },
    "ArticleStock": {
      "type": "object",
      "required": [ "_links" ],
      "properties": {
        "stock": {
          "type": "number",
          "format": "double",
          "description": "The quantity of the article which is currently on stock.",
          "default": 0.0
        },
        "branchId": {
          "type": "string",
          "description": "The id of the branch of the article for which stock is requested."
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to article representation itself. Following this link returns representation of very same article resource.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "branchId": "branchId",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "stock": 0.8008281904610115
      }
    },
    "ArticleStockInfo": {
      "type": "object",
      "required": [ "articleId" ],
      "properties": {
        "stock": {
          "$ref": "#/definitions/ArticleStock"
        },
        "articleId": {
          "type": "string",
          "description": "The id of requested article stock."
        }
      },
      "example": {
        "articleId": 6027456182,
        "stock": {
          "branchId": "branchId",
          "_links": {
            "key": {
              "href": "href"
            }
          },
          "stock": 0.8008281904610115
        }
      }
    },
    "ArticleStockSum": {
      "type": "object",
      "required": [ "_links" ],
      "properties": {
        "stockSum": {
          "type": "number",
          "format": "double",
          "description": "The total quantity of the article, in the requested country, which is currently on stock.",
          "default": 0.0
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to article representation itself. Following this link returns representation of very same article resource.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "stockSum": 0.8008281904610115
      }
    },
    "ArticleStockSumInfo": {
      "type": "object",
      "required": [ "articleId" ],
      "properties": {
        "stockSum": {
          "$ref": "#/definitions/ArticleStockSum"
        },
        "articleId": {
          "type": "string",
          "description": "The id of requested article stock."
        }
      },
      "example": {
        "articleId": 6027456182,
        "stockSum": {
          "_links": {
            "key": {
              "href": "href"
            }
          },
          "stockSum": 0.8008281904610115
        }
      }
    },
    "PriceRequest": {
      "type": "object",
      "required": [ "customerNr", "items" ],
      "properties": {
        "customerNr": {
          "type": "string",
          "description": "The number of the customer the price are request for."
        },
        "calculateAssortedQtyDisc": {
          "type": "boolean",
          "description": "Indicates whether the assorted quantity discounts shall be recalculated or not."
        },
        "items": {
          "type": "array",
          "description": "List of article positions for which prices are requested.",
          "items": {
            "$ref": "#/definitions/PriceRequestItem"
          },
          "minItems": 1
        }
      },
      "example": {
        "customerNr": "customerNr",
        "calculateAssortedQtyDisc": true,
        "items": [
          {
            "quantity": 0.6027456183070403,
            "brandId": 1,
            "articleId": 800828191
          },
          {
            "quantity": 0.6027456183070403,
            "brandId": 1,
            "articleId": 800828191
          }
        ]
      }
    },
    "PriceRequestItem": {
      "type": "object",
      "required": [ "articleId", "quantity" ],
      "properties": {
        "articleId": {
          "type": "string",
          "description": "The id of the article to get a price for."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Requested quantity of article, which need to be greater than zero.",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "brandId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "example": {
        "quantity": 0.6027456183070403,
        "brandId": 1,
        "articleId": 800828191
      }
    },
    "Prices": {
      "type": "object",
      "properties": {
        "prices": {
          "type": "array",
          "description": "The list of prices.",
          "items": {
            "$ref": "#/definitions/Price"
          }
        }
      },
      "example": {
        "prices": [
          {
            "unitOfMeasurement": "unitOfMeasurement",
            "additionalPrices": [
              {
                "priceType": "priceType",
                "priceValue": 3.616076749251911
              },
              {
                "priceType": "priceType",
                "priceValue": 3.616076749251911
              }
            ],
            "articleId": 800828191,
            "discountPrice": 5.962133916683182,
            "totalGrossPrice": 5.637376656633329,
            "errorMessage": "errorMessage",
            "hasAssortedQtyDisc": true,
            "netPrice": 1.4658129805029452,
            "totalNetPrice": 2.3021358869347655,
            "discountInPercent": 9.301444243932576,
            "grossPrice": 6.027456183070403,
            "totalDiscountPrice": 7.061401241503109,
            "currency": "currency",
            "priceFound": true
          },
          {
            "unitOfMeasurement": "unitOfMeasurement",
            "additionalPrices": [
              {
                "priceType": "priceType",
                "priceValue": 3.616076749251911
              },
              {
                "priceType": "priceType",
                "priceValue": 3.616076749251911
              }
            ],
            "articleId": 800828191,
            "discountPrice": 5.962133916683182,
            "totalGrossPrice": 5.637376656633329,
            "errorMessage": "errorMessage",
            "hasAssortedQtyDisc": true,
            "netPrice": 1.4658129805029452,
            "totalNetPrice": 2.3021358869347655,
            "discountInPercent": 9.301444243932576,
            "grossPrice": 6.027456183070403,
            "totalDiscountPrice": 7.061401241503109,
            "currency": "currency",
            "priceFound": true
          }
        ]
      }
    },
    "Price": {
      "type": "object",
      "properties": {
        "articleId": {
          "type": "string",
          "description": "The id of the article."
        },
        "currency": {
          "type": "string",
          "description": "The currency of all resulting prices."
        },
        "grossPrice": {
          "type": "number",
          "format": "double",
          "description": "The gross price of a single unit of the article before applying any discount."
        },
        "netPrice": {
          "type": "number",
          "format": "double",
          "description": "The net price of a single unit of the article before applying any discount."
        },
        "discountPrice": {
          "type": "number",
          "format": "double",
          "description": "The discount for a single unit of the article."
        },
        "totalGrossPrice": {
          "type": "number",
          "format": "double",
          "description": "The total gross price for the total number of unit of the requested article before applying any discount."
        },
        "totalNetPrice": {
          "type": "number",
          "format": "double",
          "description": "The total net price for the total number of unit of the requested article before applying any discount."
        },
        "totalDiscountPrice": {
          "type": "number",
          "format": "double",
          "description": "The total discount amount for requested articles."
        },
        "discountInPercent": {
          "type": "number",
          "format": "double",
          "description": "The discount percentage for requested articles."
        },
        "errorMessage": {
          "type": "string",
          "description": "Message in case we have error response from ERP."
        },
        "priceFound": {
          "type": "boolean",
          "description": "Indicates if a price has been found at the ERP."
        },
        "hasAssortedQtyDisc": {
          "type": "boolean",
          "description": "Indicates whether an assorted quantity discount exists for the current item or not."
        },
        "unitOfMeasurement": {
          "type": "string",
          "description": "The id of the unit for the specified quantity."
        },
        "additionalPrices": {
          "type": "array",
          "description": "The list of additional prices.",
          "items": {
            "$ref": "#/definitions/AdditionalPrices"
          }
        }
      },
      "example": {
        "unitOfMeasurement": "unitOfMeasurement",
        "additionalPrices": [
          {
            "priceType": "priceType",
            "priceValue": 3.616076749251911
          },
          {
            "priceType": "priceType",
            "priceValue": 3.616076749251911
          }
        ],
        "articleId": 800828191,
        "discountPrice": 5.962133916683182,
        "totalGrossPrice": 5.637376656633329,
        "errorMessage": "errorMessage",
        "hasAssortedQtyDisc": true,
        "netPrice": 1.4658129805029452,
        "totalNetPrice": 2.3021358869347655,
        "discountInPercent": 9.301444243932576,
        "grossPrice": 6.027456183070403,
        "totalDiscountPrice": 7.061401241503109,
        "currency": "currency",
        "priceFound": true
      }
    },
    "AdditionalPrices": {
      "type": "object",
      "properties": {
        "priceType": {
          "type": "string",
          "description": "The type of a price."
        },
        "priceValue": {
          "type": "number",
          "format": "double",
          "description": "The additional price of a single unit of the article before applying any discount."
        }
      },
      "description": "The list of additional prices.",
      "example": {
        "priceType": "priceType",
        "priceValue": 3.616076749251911
      }
    },
    "AvailabilityRequest": {
      "type": "object",
      "required": [ "customerNr", "items" ],
      "properties": {
        "customerNr": {
          "type": "string",
          "description": "The number of the customer the article availabilities are request for."
        },
        "sendMethod": {
          "type": "string",
          "description": "The method of delivering the goods"
        },
        "partialDelivery": {
          "type": "boolean",
          "description": "Flag indicating the desire of `availabilityRequestItem`s being delivered separately, in case they have different `arrivalTime`."
        },
        "deliveryAddressId": {
          "type": "string",
          "description": "The id of the address where the listed goods should be delivered."
        },
        "pickupBranchId": {
          "type": "string",
          "description": "Id of the warehouse where the customer will pick up the articles from, in case `sendMethod` is PICKUP. For PICKUP with no branchId, the default of customer will be used."
        },
        "pickingWarehouse": {
          "type": "string",
          "description": "Id of the warehouse where the articles will be picked for the Tour. Thus, the `sendMethod` is obvious that it should be TOUR. If the field is omitted  service behaves as usual."
        },
        "isTourTimetable": {
          "type": "boolean",
          "description": "Flag indicating if there will be a calculation for the creation of Tour timetable. Default value is false"
        },
        "items": {
          "type": "array",
          "description": "List of article positions for which availabilities are requested.",
          "items": {
            "$ref": "#/definitions/AvailabilityRequestItem"
          },
          "minItems": 1
        }
      },
      "example": {
        "deliveryAddressId": "deliveryAddressId",
        "isTourTimetable": true,
        "sendMethod": "sendMethod",
        "customerNr": "customerNr",
        "pickingWarehouse": "pickingWarehouse",
        "partialDelivery": true,
        "items": [
          {
            "quantity": 0.6027456183070403,
            "articleId": 800828191
          },
          {
            "quantity": 0.6027456183070403,
            "articleId": 800828191
          }
        ],
        "pickupBranchId": "pickupBranchId"
      }
    },
    "AvailabilityRequestItem": {
      "type": "object",
      "required": [ "articleId", "quantity" ],
      "properties": {
        "articleId": {
          "type": "string",
          "description": "The id of the article to be checked for availability."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Requested quantity of article, which need to be greater than zero.",
          "minimum": 0,
          "exclusiveMinimum": true
        }
      },
      "example": {
        "quantity": 0.6027456183070403,
        "articleId": 800828191
      }
    },
    "Availabilities": {
      "type": "object",
      "properties": {
        "availabilities": {
          "type": "array",
          "description": "List of availabilities.",
          "items": {
            "$ref": "#/definitions/Availability"
          }
        }
      },
      "example": {
        "availabilities": [
          {
            "quantity": 6.027456183070403,
            "assignmentPriority": 1,
            "stockWarehouse": "stockWarehouse",
            "articleId": 800828191,
            "errorMessage": "errorMessage",
            "tourName": "tourName",
            "cutOffTime": "2000-01-23T04:56:07.000+00:00",
            "sendMethod": "sendMethod",
            "tourTimeTable": [
              {
                "startTime": "2000-01-23T04:56:07.000+00:00",
                "tourName": "tourName"
              },
              {
                "startTime": "2000-01-23T04:56:07.000+00:00",
                "tourName": "tourName"
              }
            ],
            "backOrder": true,
            "deliveryWarehouse": "deliveryWarehouse",
            "deliveryTime": "2000-01-23T04:56:07.000+00:00",
            "immediateDelivery": true
          },
          {
            "quantity": 6.027456183070403,
            "assignmentPriority": 1,
            "stockWarehouse": "stockWarehouse",
            "articleId": 800828191,
            "errorMessage": "errorMessage",
            "tourName": "tourName",
            "cutOffTime": "2000-01-23T04:56:07.000+00:00",
            "sendMethod": "sendMethod",
            "tourTimeTable": [
              {
                "startTime": "2000-01-23T04:56:07.000+00:00",
                "tourName": "tourName"
              },
              {
                "startTime": "2000-01-23T04:56:07.000+00:00",
                "tourName": "tourName"
              }
            ],
            "backOrder": true,
            "deliveryWarehouse": "deliveryWarehouse",
            "deliveryTime": "2000-01-23T04:56:07.000+00:00",
            "immediateDelivery": true
          }
        ]
      }
    },
    "Availability": {
      "type": "object",
      "properties": {
        "articleId": {
          "type": "string",
          "description": "The id of the article."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Requested quantity of the article."
        },
        "backOrder": {
          "type": "boolean",
          "description": "Attribute indicating whether the requested quantity is not available and SAG needs to place a back order in order to fulfill."
        },
        "cutOffTime": {
          "type": "string",
          "format": "date-time",
          "description": "CutOff Time"
        },
        "deliveryTime": {
          "type": "string",
          "format": "date-time",
          "description": "Arrival Date"
        },
        "immediateDelivery": {
          "type": "boolean",
          "description": "Available now!"
        },
        "stockWarehouse": {
          "type": "string"
        },
        "deliveryWarehouse": {
          "type": "string"
        },
        "sendMethod": {
          "type": "string",
          "description": "Send method denotes how goods are usually delivered to the customer."
        },
        "assignmentPriority": {
          "type": "integer",
          "format": "int64",
          "description": "Assignment priority of split line -- filled only in split lines"
        },
        "errorMessage": {
          "type": "string",
          "description": "Message in case we have error response from ERP."
        },
        "tourName": {
          "type": "string",
          "description": "A string of format X_Y_Z where X is the starting point of the tour, Y is the Description (tour number), Z is the time(HH:mm) "
        },
        "tourTimeTable": {
          "type": "array",
          "description": "A list of Tours from the current querying date and time until the current querying time of the next working day",
          "items": {
            "$ref": "#/definitions/Tour"
          }
        }
      },
      "example": {
        "quantity": 6.027456183070403,
        "assignmentPriority": 1,
        "stockWarehouse": "stockWarehouse",
        "articleId": 800828191,
        "errorMessage": "errorMessage",
        "tourName": "tourName",
        "cutOffTime": "2000-01-23T04:56:07.000+00:00",
        "sendMethod": "sendMethod",
        "tourTimeTable": [
          {
            "startTime": "2000-01-23T04:56:07.000+00:00",
            "tourName": "tourName"
          },
          {
            "startTime": "2000-01-23T04:56:07.000+00:00",
            "tourName": "tourName"
          }
        ],
        "backOrder": true,
        "deliveryWarehouse": "deliveryWarehouse",
        "arrivalTime": "2000-01-23T04:56:07.000+00:00",
        "immediateDelivery": true
      }
    },
    "NextWorkingDate": {
      "type": "object",
      "properties": {
        "nextWorkingDate": {
          "type": "string",
          "format": "date-time",
          "description": "Next working date of the given branch"
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **branch (GET)**: Following this link results the branch for which the next working \n date was calculated",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "nextWorkingDate": "2000-01-23T04:56:07.000+00:00",
        "_links": {
          "key": {
            "href": "href"
          }
        }
      }
    },
    "NextWorkingDateRequest": {
      "type": "object",
      "required": [ "branchId", "date" ],
      "properties": {
        "branchId": {
          "type": "string",
          "description": "Id of the warehouse for which the next working date will be calculated"
        },
        "date": {
          "type": "string",
          "description": "The date from which the calculation for the next working date begins. Format should be ISO8601"
        }
      },
      "example": {
        "date": "date",
        "branchId": "branchId"
      }
    },
    "CreditLimit": {
      "type": "object",
      "properties": {
        "alreadyUsedCredit": {
          "type": "number",
          "format": "double",
          "description": "Credit that is already used by customer"
        },
        "availableCredit": {
          "type": "number",
          "format": "double",
          "description": "Available credit of customer"
        }
      },
      "example": {
        "alreadyUsedCredit": 0.8008281904610115,
        "availableCredit": 6.027456183070403
      }
    },
    "Order": {
      "type": "object",
      "required": [ "_links", "date", "nr", "sendMethod", "status", "type" ],
      "properties": {
        "nr": {
          "type": "string",
          "description": "Number of the order."
        },
        "type": {
          "type": "string",
          "description": "The id of the sales order category."
        },
        "typeDesc": {
          "type": "string",
          "description": "The description of the sales order category."
        },
        "sendMethod": {
          "type": "string",
          "description": "The mode of the delivery of the ordered goods."
        },
        "status": {
          "type": "string",
          "description": "The status of the sales order.",
          "enum": [ "NONE", "BACKORDER", "DELIVERED", "INVOICED", "CANCELLED", "PENDING" ]
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of order."
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **collection/positions (GET)**: Following this link results in a list of all positions of this order.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "date": "2000-01-23T04:56:07.000+00:00",
        "sendMethod": "sendMethod",
        "typeDesc": "typeDesc",
        "nr": "nr",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "type": "type",
        "status": "NONE"
      }
    },
    "Orders": {
      "type": "object",
      "required": [ "_links", "orders" ],
      "properties": {
        "orders": {
          "type": "array",
          "description": "The list of orders.",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +\n +\n **self (GET)**: The link to list of orders representation itself. Following this link returns the very same order list representation. +\n +\n **next (GET)**: The `next` link is present, if older orders than returned ones exist. This link repeats query parameters, which are provided in original request. That way, clients do not need to construct URIs themselves to get the batch of next orders. +\n +\n **prev (GET)**: The `prev` link is present, if more recent orders than returned ones exit. This link repeats query parameters, which are provided in original request. That way, clients don't need to construct URIs themselves to get the batch of previous orders.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "orders": [
          {
            "date": "2000-01-23T04:56:07.000+00:00",
            "sendMethod": "sendMethod",
            "typeDesc": "typeDesc",
            "nr": "nr",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "type": "type",
            "status": "NONE"
          },
          {
            "date": "2000-01-23T04:56:07.000+00:00",
            "sendMethod": "sendMethod",
            "typeDesc": "typeDesc",
            "nr": "nr",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "type": "type",
            "status": "NONE"
          }
        ]
      }
    },
    "OrderPosition": {
      "type": "object",
      "required": [ "_links", "articleId", "quantity", "sequence", "status" ],
      "properties": {
        "sequence": {
          "type": "integer",
          "format": "int64",
          "description": "Sequence number of position in order.",
          "minimum": 1,
          "maximum": 9999999999
        },
        "articleId": {
          "type": "string",
          "description": "Id of article. Basic article information can also retrieved by following the articles link. +\n +\n Note: Usually, returning identifiers from services is avoided, but the id of an article should through the catalog data have a meaning for a webshop application."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Quantity of order position."
        },
        "status": {
          "type": "string",
          "description": "Status of this order position.",
          "enum": [ "NONE", "BACKORDER", "DELIVERED", "INVOICED", "CANCELLED", "PENDING" ]
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to this order position representation itself. Following this link returns representation of very same order position resource. +\n +\n **article (GET)**: Following this link leads to the article resource, this order position belongs to.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "sequence": 800828191,
        "quantity": 6.027456183070403,
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "articleId": "articleId",
        "status": "NONE"
      }
    },
    "OrderPositions": {
      "type": "object",
      "required": [ "_links", "orderPositions" ],
      "properties": {
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to order positions representation itself. Following this link returns representation of very same list of order positions.\n +\n **next (GET)**: The `next` link is present, if older order positions than returned ones exist. This link repeats query parameters, which are provided in original request. That way, clients do not need to construct URIs themselves to get the batch of next order positions. +\n +\n **prev (GET)**: The `prev` link is present, if more recent order postitions than returned ones exit. This link repeats query parameters, which are provided in original request. That way, clients don't need to construct URIs themselves to get the batch of previous order positions.           ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        },
        "orderPositions": {
          "type": "array",
          "description": "The list of order positions is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/OrderPosition"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "orderPositions": [
          {
            "sequence": 800828191,
            "quantity": 6.027456183070403,
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "articleId": "articleId",
            "status": "NONE"
          },
          {
            "sequence": 800828191,
            "quantity": 6.027456183070403,
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "articleId": "articleId",
            "status": "NONE"
          }
        ]
      }
    },
    "OrderRequest": {
      "type": "object",
      "required": [ "customerNr", "items", "paymentMethod", "sendMethod" ],
      "properties": {
        "customerNr": {
          "type": "string",
          "description": "The number of the ordering customer",
          "minLength": 1
        },
        "sendMethod": {
          "type": "string",
          "description": "Method of delivering ordered goods"
        },
        "partialDelivery": {
          "type": "boolean",
          "description": "Flag indicating the desire of `orderItem`s being delivered separately, in case they have different`arrivalTime`."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Code for paying ordered goods",
          "enum": [ "CASH", "CARD", "DIRECTINVOICE", "RECHNUNG" ]
        },
        "deliveryAddressId": {
          "type": "string",
          "description": "The id of the address where the `orderItems` will be delivered to.",
          "pattern": "[0-9]{1,19}"
        },
        "pickupBranchId": {
          "type": "string",
          "description": "The id of the store where the customer will pick up the articles from, in case `sendMethod` is PICKUP. For PICKUP with no branchId, the default of customer will be used."
        },
        "customerRefText": {
          "type": "string",
          "description": "Reference text for the header of the order which will be used in all documents e.g. invoice.",
          "maxLength": 60
        },
        "message": {
          "type": "string",
          "description": "Message to a real-person processor of the order. If a message is placed, the order cannot be created until a seller handles it manually."
        },
        "singleInvoice": {
          "type": "boolean"
        },
        "completeInvoice": {
          "type": "boolean"
        },
        "personalNumber": {
          "type": "string",
          "description": "Employee personal number"
        },
        "salesOrigin": {
          "type": "string",
          "description": "The sales origin"
        },
        "orderType": {
          "type": "string",
          "description": "The id of the sales order category"
        },
        "items": {
          "type": "array",
          "description": "List of items that are requested to be ordered.",
          "items": {
            "$ref": "#/definitions/OrderRequestItem"
          },
          "minItems": 1
        }
      },
      "example": {
        "orderType": "orderType",
        "customerNr": "customerNr",
        "customerRefText": "customerRefText",
        "salesOrigin": "salesOrigin",
        "singleInvoice": true,
        "personalNumber": "personalNumber",
        "message": "message",
        "deliveryAddressId": "deliveryAddressId",
        "sendMethod": "sendMethod",
        "completeInvoice": true,
        "paymentMethod": "CASH",
        "partialDelivery": true,
        "items": [
          {
            "quantity": 0.08008281904610115,
            "articleId": "articleId",
            "vendorId": "vendorId",
            "additionalTextDocPrinters": "additionalTextDocPrinters",
            "type": "type",
            "registrationDocNr": "registrationDocNr",
            "externalLineNumber": "externalLineNumber",
            "arrivalTime": "2000-01-23T04:56:07.000+00:00",
            "priceDiscTypeId": "priceDiscTypeId",
            "brandId": 6027456182,
            "model": "model",
            "brand": "brand",
            "sourcingType": "sourcingType",
            "additionalTextDoc": "additionalTextDoc"
          },
          {
            "quantity": 0.08008281904610115,
            "articleId": "articleId",
            "vendorId": "vendorId",
            "additionalTextDocPrinters": "additionalTextDocPrinters",
            "type": "type",
            "registrationDocNr": "registrationDocNr",
            "externalLineNumber": "externalLineNumber",
            "arrivalTime": "2000-01-23T04:56:07.000+00:00",
            "priceDiscTypeId": "priceDiscTypeId",
            "brandId": 6027456182,
            "model": "model",
            "brand": "brand",
            "sourcingType": "sourcingType",
            "additionalTextDoc": "additionalTextDoc"
          }
        ],
        "pickupBranchId": "pickupBranchId"
      }
    },
    "OrderRequestItem": {
      "type": "object",
      "required": [ "articleId", "quantity" ],
      "properties": {
        "articleId": {
          "type": "string",
          "description": "The id of the article to be ordered."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Requested quantity of article, which need to be greater than zero.",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "brandId": {
          "type": "integer",
          "format": "int64",
          "description": "Vehicle brand id",
          "minimum": 1,
          "maximum": 9999999999
        },
        "model": {
          "type": "string",
          "description": "Vehicle model",
          "maxLength": 50
        },
        "brand": {
          "type": "string",
          "description": "Vehicle brand",
          "maxLength": 30
        },
        "type": {
          "type": "string",
          "description": "Vehicle type",
          "maxLength": 80
        },
        "sourcingType": {
          "type": "string",
          "description": "Source type",
          "maxLength": 30
        },
        "vendorId": {
          "type": "string",
          "description": "Vendor Id",
          "maxLength": 30
        },
        "arrivalTime": {
          "type": "string",
          "format": "date-time",
          "description": "The arrival time in ISO 8601 format"
        },
        "externalLineNumber": {
          "type": "string",
          "description": "External line number for identifying each position",
          "maxLength": 50
        },
        "additionalTextDoc": {
          "type": "string",
          "description": "Additional text which will be included in the position and will be printed in documents, e.g. offer or invoice selected by `additionalTextDocPrinters`.",
          "maxLength": 30
        },
        "additionalTextDocPrinters": {
          "type": "string",
          "description": "The id of the printer which is logged in the text management",
          "maxLength": 20
        },
        "registrationDocNr": {
          "type": "string",
          "description": "The number of the official document that comes along with a (new) car from the producer containing all the relevant technical details, serial numbers etc."
        },
        "priceDiscTypeId": {
          "type": "string",
          "description": "Type of price discount"
        }
      },
      "example": {
        "quantity": 0.08008281904610115,
        "articleId": "articleId",
        "vendorId": "vendorId",
        "additionalTextDocPrinters": "additionalTextDocPrinters",
        "type": "type",
        "registrationDocNr": "registrationDocNr",
        "externalLineNumber": "externalLineNumber",
        "arrivalTime": "2000-01-23T04:56:07.000+00:00",
        "priceDiscTypeId": "priceDiscTypeId",
        "brandId": 6027456182,
        "model": "model",
        "brand": "brand",
        "sourcingType": "sourcingType",
        "additionalTextDoc": "additionalTextDoc"
      }
    },
    "OrderProcessStatus": {
      "type": "object",
      "required": [ "orderNr" ],
      "properties": {
        "orderNr": {
          "type": "string",
          "description": "The number of the order which the process status will be changed.",
          "minLength": 1
        },
        "processStatus": {
          "type": "string",
          "description": "The order process status to change to.",
          "minLength": 1
        }
      },
      "example": {
        "processStatus": "processStatus",
        "orderNr": "orderNr"
      }
    },
    "OrderConfirmation": {
      "type": "object",
      "required": [ "_links" ],
      "properties": {
        "orderNr": {
          "type": "string",
          "description": "Reserved number of the order that will be created asynchronously. The order cannot be retrieved immediately, the time to actual creation cannot be predicted. Since there is no notification mechanism, polling for the order is the only way to check for the order be actually created."
        },
        "axOrderURL": {
          "type": "string",
          "description": "A query string which can be attached to an AX URL in order to access the  created sales order in ERP.  "
        },
        "workIds": {
          "type": "array",
          "description": "A list of workIds of the work that was creates in case that the new sales order has a process status change and the “Release to Warehouse” and Wave processing was automatically done due to the process status change.",
          "items": {
            "type": "string"
          }
        },
        "allPositionsAvailable": {
          "type": "boolean",
          "description": "Indicates that all lines are directly available from any warehouse. If there are lines that are not available the resulting sales order might not be processed automatically."
        },
        "creditLimitExceeded": {
          "type": "boolean",
          "description": "Indicates if the customer’s credit limit is exceeded. The shopping cart is created nevertheless, but the resulting sales order might not be processed automatically."
        },
        "effectiveAvailabilityLines": {
          "$ref": "#/definitions/Availabilities"
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **order (GET)**: The link to the order which is waiting to be created.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "workIds": [ "workIds", "workIds" ],
        "creditLimitExceeded": true,
        "effectiveAvailabilityLines": {
          "availabilities": [
            {
              "quantity": 6.027456183070403,
              "assignmentPriority": 1,
              "stockWarehouse": "stockWarehouse",
              "articleId": 800828191,
              "errorMessage": "errorMessage",
              "tourName": "tourName",
              "cutOffTime": "2000-01-23T04:56:07.000+00:00",
              "sendMethod": "sendMethod",
              "tourTimeTable": [
                {
                  "startTime": "2000-01-23T04:56:07.000+00:00",
                  "tourName": "tourName"
                },
                {
                  "startTime": "2000-01-23T04:56:07.000+00:00",
                  "tourName": "tourName"
                }
              ],
              "backOrder": true,
              "deliveryWarehouse": "deliveryWarehouse",
              "deliveryTime": "2000-01-23T04:56:07.000+00:00",
              "immediateDelivery": true
            },
            {
              "quantity": 6.027456183070403,
              "assignmentPriority": 1,
              "stockWarehouse": "stockWarehouse",
              "articleId": 800828191,
              "errorMessage": "errorMessage",
              "tourName": "tourName",
              "cutOffTime": "2000-01-23T04:56:07.000+00:00",
              "sendMethod": "sendMethod",
              "tourTimeTable": [
                {
                  "startTime": "2000-01-23T04:56:07.000+00:00",
                  "tourName": "tourName"
                },
                {
                  "startTime": "2000-01-23T04:56:07.000+00:00",
                  "tourName": "tourName"
                }
              ],
              "backOrder": true,
              "deliveryWarehouse": "deliveryWarehouse",
              "deliveryTime": "2000-01-23T04:56:07.000+00:00",
              "immediateDelivery": true
            }
          ]
        },
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "allPositionsAvailable": true,
        "axOrderURL": "axOrderURL",
        "orderNr": "orderNr"
      }
    },
    "OrderProcessStatusConfirmation": {
      "type": "object",
      "properties": {
        "processStatusChanged": {
          "type": "boolean",
          "description": "Inticates a successful order process status change.     "
        }
      },
      "example": {
        "processStatusChanged": true
      }
    },
    "Employee": {
      "type": "object",
      "properties": {
        "personalNumber": {
          "type": "string",
          "description": "The personal number of the employee."
        },
        "searchName": {
          "type": "string",
          "description": "The search name of the employee."
        },
        "name": {
          "type": "string",
          "description": "The name of the employee."
        },
        "contacts": {
          "type": "array",
          "description": "Contacts of employee.",
          "items": {
            "$ref": "#/definitions/ContactInfo"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to employee representation itself. Following this link returns representation of very same employee resource. ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "searchName": "searchName",
        "name": "name",
        "personalNumber": "personalNumber",
        "contacts": [
          {
            "contactDescription": "contactDescription",
            "contactValue": "contactValue",
            "isPrimary": true,
            "contactType": "Phone"
          },
          {
            "contactDescription": "contactDescription",
            "contactValue": "contactValue",
            "isPrimary": true,
            "contactType": "Phone"
          }
        ]
      }
    },
    "Employees": {
      "type": "object",
      "required": [ "_links", "employees" ],
      "properties": {
        "employees": {
          "type": "array",
          "description": "The list of employees is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/Employee"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to employees representation itself. Following this link returns representation of very same list of employees.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "employees": [
          {
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "searchName": "searchName",
            "name": "name",
            "personalNumber": "personalNumber",
            "contacts": [
              {
                "contactDescription": "contactDescription",
                "contactValue": "contactValue",
                "isPrimary": true,
                "contactType": "Phone"
              },
              {
                "contactDescription": "contactDescription",
                "contactValue": "contactValue",
                "isPrimary": true,
                "contactType": "Phone"
              }
            ]
          },
          {
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "searchName": "searchName",
            "name": "name",
            "personalNumber": "personalNumber",
            "contacts": [
              {
                "contactDescription": "contactDescription",
                "contactValue": "contactValue",
                "isPrimary": true,
                "contactType": "Phone"
              },
              {
                "contactDescription": "contactDescription",
                "contactValue": "contactValue",
                "isPrimary": true,
                "contactType": "Phone"
              }
            ]
          }
        ]
      }
    },
    "Branch": {
      "type": "object",
      "properties": {
        "branchId": {
          "type": "string",
          "description": "The id of the branch."
        },
        "branchName": {
          "type": "string",
          "description": "The name of the branch"
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to branch representation itself. Following this link returns representation of very same branch",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "branchId": "branchId",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "branchName": "branchName"
      }
    },
    "Branches": {
      "type": "object",
      "required": [ "_links", "branches" ],
      "properties": {
        "branches": {
          "type": "array",
          "description": "The list of branches is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/Branch"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to branches representation itself. Following this link returns representation of very same list of branches.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "branches": [
          {
            "branchId": "branchId",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "branchName": "branchName"
          },
          {
            "branchId": "branchId",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "branchName": "branchName"
          }
        ]
      }
    },
    "ElectronicDeliveryNote": {
      "type": "object",
      "required": [ "articleId", "deliveryDate", "packingSlipNr" ],
      "properties": {
        "packingSlipNr": {
          "type": "string",
          "description": "The packing slip identification number."
        },
        "articleId": {
          "type": "string",
          "description": "The article identifier."
        },
        "positionId": {
          "type": "integer",
          "format": "int32",
          "description": "Position in order."
        },
        "recomSalesPrice": {
          "type": "number",
          "format": "double",
          "description": "The recomended sales price."
        },
        "realDeliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "The real delivery date time."
        },
        "articleIdentifier": {
          "type": "string",
          "description": "Article identifier."
        },
        "articleName": {
          "type": "string",
          "description": "The article description in the current language of the item id."
        },
        "branchId": {
          "type": "string",
          "description": "The warehouse identifier."
        },
        "deliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "The delivery date time."
        },
        "EAN": {
          "type": "string",
          "description": "European Article Number or EAN which is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type."
        },
        "currency": {
          "type": "string",
          "description": "ISO code of currency for invoicing the customer."
        },
        "customerArticleId": {
          "type": "string",
          "description": "The article identifier of the customer."
        },
        "manufacturerArticleId": {
          "type": "string",
          "description": "The article identifier of the manufacturer."
        },
        "netPrice": {
          "type": "number",
          "format": "double",
          "description": "The net price of a single unit of the article before applying any discount."
        },
        "lineNum": {
          "type": "integer",
          "format": "int32",
          "description": "Line number."
        },
        "orderedVariant": {
          "type": "string",
          "description": "Ordered variant."
        },
        "ordered": {
          "type": "integer",
          "format": "int32",
          "description": "Ordered."
        },
        "vendorCodeSupplied": {
          "type": "string",
          "description": "Vendor code supplied."
        },
        "positionIdSetArticle": {
          "type": "integer",
          "format": "int32",
          "description": "PositionIdSetArticle."
        },
        "freeDelivery": {
          "type": "string",
          "description": "Vendor code supplied."
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "The created date time of the electronic delivery note."
        },
        "deliveryNoteTxt": {
          "type": "string",
          "description": "Delivery note text."
        },
        "salesPrice": {
          "type": "number",
          "format": "double",
          "description": "The sales price."
        },
        "lineInvoiceAmount": {
          "type": "number",
          "format": "double",
          "description": "The amount of articles of the invoice position."
        },
        "orderAccount": {
          "type": "string",
          "description": "Order account."
        },
        "vendor": {
          "type": "string",
          "description": "The vendor."
        },
        "orderNr": {
          "type": "string",
          "description": "The number of the order."
        },
        "return": {
          "type": "boolean",
          "description": "Denotes if this packing slip is a return or a delivery."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Quantity of order position."
        },
        "vendorCodeOrdered": {
          "type": "string",
          "description": "Vendor code ordered."
        },
        "articleDescription": {
          "type": "string",
          "description": "Description of article."
        },
        "referenceFactor": {
          "type": "integer",
          "format": "int32",
          "description": "The total value of the invoice."
        },
        "KisGroup": {
          "type": "string",
          "description": "Kis group."
        }
      },
      "example": {
        "vendorCodeSupplied": "vendorCodeSupplied",
        "lineInvoiceAmount": 3.616076749251911,
        "salesPrice": 9.301444243932576,
        "freeDelivery": "freeDelivery",
        "netPrice": 5.962133916683182,
        "KisGroup": "KisGroup",
        "deliveryNoteTxt": "deliveryNoteTxt",
        "vendor": "vendor",
        "articleIdentifier": "articleIdentifier",
        "currency": "currency",
        "deliveryDate": "2000-01-23T04:56:07.000+00:00",
        "recomSalesPrice": 1.4658129805029452,
        "orderAccount": "orderAccount",
        "positionIdSetArticle": 7,
        "branchId": "branchId",
        "ordered": 2,
        "vendorCodeOrdered": "vendorCodeOrdered",
        "articleName": "articleName",
        "quantity": 2.027123023002322,
        "articleDescription": "articleDescription",
        "referenceFactor": 4,
        "articleId": 800828191,
        "customerArticleId": "customerArticleId",
        "packingSlipNr": "packingSlipNr",
        "EAN": "EAN",
        "createdDate": "2000-01-23T04:56:07.000+00:00",
        "positionId": 6,
        "lineNum": 5,
        "orderedVariant": "orderedVariant",
        "manufacturerArticleId": "manufacturerArticleId",
        "orderNr": "orderNr",
        "return": true,
        "realDeliveryDate": "2000-01-23T04:56:07.000+00:00"
      }
    },
    "ElectronicDeliveryNotes": {
      "type": "object",
      "required": [ "_links", "electronicDeliveryNotes" ],
      "properties": {
        "electronicDeliveryNotes": {
          "type": "array",
          "description": "The list of electronic delivery notes is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/ElectronicDeliveryNote"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to electronic delivery notes representation itself. Following this link returns representation of very same list of electronic delivery notes.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "electronicDeliveryNotes": [
          {
            "vendorCodeSupplied": "vendorCodeSupplied",
            "lineInvoiceAmount": 3.616076749251911,
            "salesPrice": 9.301444243932576,
            "freeDelivery": "freeDelivery",
            "netPrice": 5.962133916683182,
            "KisGroup": "KisGroup",
            "deliveryNoteTxt": "deliveryNoteTxt",
            "vendor": "vendor",
            "articleIdentifier": "articleIdentifier",
            "currency": "currency",
            "deliveryDate": "2000-01-23T04:56:07.000+00:00",
            "recomSalesPrice": 1.4658129805029452,
            "orderAccount": "orderAccount",
            "positionIdSetArticle": 7,
            "branchId": "branchId",
            "ordered": 2,
            "vendorCodeOrdered": "vendorCodeOrdered",
            "articleName": "articleName",
            "quantity": 2.027123023002322,
            "articleDescription": "articleDescription",
            "referenceFactor": 4,
            "articleId": 800828191,
            "customerArticleId": "customerArticleId",
            "packingSlipNr": "packingSlipNr",
            "EAN": "EAN",
            "createdDate": "2000-01-23T04:56:07.000+00:00",
            "positionId": 6,
            "lineNum": 5,
            "orderedVariant": "orderedVariant",
            "manufacturerArticleId": "manufacturerArticleId",
            "orderNr": "orderNr",
            "return": true,
            "realDeliveryDate": "2000-01-23T04:56:07.000+00:00"
          },
          {
            "vendorCodeSupplied": "vendorCodeSupplied",
            "lineInvoiceAmount": 3.616076749251911,
            "salesPrice": 9.301444243932576,
            "freeDelivery": "freeDelivery",
            "netPrice": 5.962133916683182,
            "KisGroup": "KisGroup",
            "deliveryNoteTxt": "deliveryNoteTxt",
            "vendor": "vendor",
            "articleIdentifier": "articleIdentifier",
            "currency": "currency",
            "deliveryDate": "2000-01-23T04:56:07.000+00:00",
            "recomSalesPrice": 1.4658129805029452,
            "orderAccount": "orderAccount",
            "positionIdSetArticle": 7,
            "branchId": "branchId",
            "ordered": 2,
            "vendorCodeOrdered": "vendorCodeOrdered",
            "articleName": "articleName",
            "quantity": 2.027123023002322,
            "articleDescription": "articleDescription",
            "referenceFactor": 4,
            "articleId": 800828191,
            "customerArticleId": "customerArticleId",
            "packingSlipNr": "packingSlipNr",
            "EAN": "EAN",
            "createdDate": "2000-01-23T04:56:07.000+00:00",
            "positionId": 6,
            "lineNum": 5,
            "orderedVariant": "orderedVariant",
            "manufacturerArticleId": "manufacturerArticleId",
            "orderNr": "orderNr",
            "return": true,
            "realDeliveryDate": "2000-01-23T04:56:07.000+00:00"
          }
        ]
      }
    },
    "Invoice": {
      "type": "object",
      "required": [ "customerNr", "invoiceDate", "invoiceNr", "paymentType", "termOfPayment" ],
      "properties": {
        "invoiceNr": {
          "type": "string",
          "description": "The invoice identification number."
        },
        "invoiceDate": {
          "type": "string",
          "format": "date-time",
          "description": "The invoice timestamp."
        },
        "name": {
          "type": "string",
          "description": "Invoice customer name."
        },
        "customerNr": {
          "type": "string",
          "description": "The corresponding customer identification number."
        },
        "zipcode": {
          "type": "string",
          "description": "Invoice customer zipcode."
        },
        "city": {
          "type": "string",
          "description": "Invoice customer city."
        },
        "country": {
          "type": "string",
          "description": "Invoice customer country."
        },
        "termOfPayment": {
          "type": "string",
          "description": "Terms of payment."
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "The total value of the invoice."
        },
        "paymentType": {
          "type": "string",
          "description": "The type of payment of the random order linked to the invoice. An invoice can have positions from more than one orders."
        },
        "_links": {
          "type": "object",
          "description": "Map of links which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to invoice representation itself. Following this link returns representation of very same invoice list representation.           ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "zipcode": "zipcode",
        "country": "country",
        "amount": 0.8008281904610115,
        "invoiceNr": "invoiceNr",
        "customerNr": "customerNr",
        "city": "city",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "name": "name",
        "invoiceDate": "2000-01-23T04:56:07.000+00:00",
        "termOfPayment": "termOfPayment",
        "paymentType": "paymentType"
      }
    },
    "Invoices": {
      "type": "object",
      "required": [ "_links", "invoices" ],
      "properties": {
        "invoices": {
          "type": "array",
          "description": "The list of invoices is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to invoices representation itself. Following this link returns representation of very same list of invoices.",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "invoices": [
          {
            "zipcode": "zipcode",
            "country": "country",
            "amount": 0.8008281904610115,
            "invoiceNr": "invoiceNr",
            "customerNr": "customerNr",
            "city": "city",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "name": "name",
            "invoiceDate": "2000-01-23T04:56:07.000+00:00",
            "termOfPayment": "termOfPayment",
            "paymentType": "paymentType"
          },
          {
            "zipcode": "zipcode",
            "country": "country",
            "amount": 0.8008281904610115,
            "invoiceNr": "invoiceNr",
            "customerNr": "customerNr",
            "city": "city",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "name": "name",
            "invoiceDate": "2000-01-23T04:56:07.000+00:00",
            "termOfPayment": "termOfPayment",
            "paymentType": "paymentType"
          }
        ],
        "_links": {
          "key": {
            "href": "href"
          }
        }
      }
    },
    "InvoicePosition": {
      "type": "object",
      "required": [ "amount", "articleId", "deliveryNoteNr", "orderNr", "quantity" ],
      "properties": {
        "articleId": {
          "type": "string",
          "description": "The article identification of the invoice position."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "The amount of articles of the invoice position."
        },
        "orderNr": {
          "type": "string",
          "description": "The corresponding order identification for the invoice position."
        },
        "invoiceNr": {
          "type": "string",
          "description": "The invoice identification of the invoice position."
        },
        "deliveryNoteNr": {
          "type": "string",
          "description": "The delivery note identification of the invoice position."
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "The value of the invoice position."
        },
        "sequence": {
          "type": "integer",
          "format": "int64",
          "description": "The sequence number of the position in the invoice.",
          "minimum": 1,
          "maximum": 9999999999
        },
        "_links": {
          "type": "object",
          "description": "Map of links which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to invoice representation itself. Following this link returns representation of the very same invoice position representation. +",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "sequence": 1465812981,
        "amount": 6.027456183070403,
        "quantity": 0.8008281904610115,
        "invoiceNr": "invoiceNr",
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "articleId": "articleId",
        "deliveryNoteNr": "deliveryNoteNr",
        "orderNr": "orderNr"
      }
    },
    "InvoicePositions": {
      "type": "object",
      "required": [ "_links", "invoicePositions" ],
      "properties": {
        "invoicePositions": {
          "type": "array",
          "description": "The list of invoice positions is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/InvoicePosition"
          }
        },
        "_links": {
          "type": "object",
          "description": "Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +\n +\n **self (GET)**: The link to invoice positions representation itself. Following this link returns representation of the very same list of invoice positions.\n +\n **next (GET)**: The `next` link is present, if older invoice positions than returned ones exist. This link repeats query parameters, which are provided in original request. That way, clients do not need to construct URIs themselves to get the batch of next invoice positions. +\n +\n **prev (GET)**: The `prev` link is present, if more recent order postitions than returned ones exit. This link repeats query parameters, which are provided in original request. That way, clients don't need to construct URIs themselves to get the batch of previous invoice positions.           ",
          "additionalProperties": {
            "$ref": "#/definitions/LinkEntry"
          }
        }
      },
      "example": {
        "_links": {
          "key": {
            "href": "href"
          }
        },
        "invoicePositions": [
          {
            "sequence": 1465812981,
            "amount": 6.027456183070403,
            "quantity": 0.8008281904610115,
            "invoiceNr": "invoiceNr",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "articleId": "articleId",
            "deliveryNoteNr": "deliveryNoteNr",
            "orderNr": "orderNr"
          },
          {
            "sequence": 1465812981,
            "amount": 6.027456183070403,
            "quantity": 0.8008281904610115,
            "invoiceNr": "invoiceNr",
            "_links": {
              "key": {
                "href": "href"
              }
            },
            "articleId": "articleId",
            "deliveryNoteNr": "deliveryNoteNr",
            "orderNr": "orderNr"
          }
        ]
      }
    },
    "UrlEntry": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The url of the pdf."
        }
      },
      "example": {
        "url": "url"
      }
    },
    "OfferConfirmation": {
      "type": "object",
      "properties": {
        "axOfferURL": {
          "type": "string",
          "description": "A query string which can be attached to an AX URL in order to access the  created sales offer in ERP."
        }
      },
      "example": {
        "axOfferURL": "axOfferURL"
      }
    },
    "OperatingUnit": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of operationg unit"
        },
        "id": {
          "type": "string",
          "description": "The electronic location Id of operationg unit"
        },
        "nr": {
          "type": "string",
          "description": "The number of operationg unit"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "contacts": {
          "type": "array",
          "description": "The list of contacts for the operating unit",
          "items": {
            "$ref": "#/definitions/ContactInfo"
          }
        }
      },
      "example": {
        "address": {
          "buildingCompliment": "buildingCompliment",
          "country": "country",
          "streetNumber": "streetNumber",
          "city": "city",
          "_links": {
            "key": {
              "href": "href"
            }
          },
          "addressType": "DELIVERY",
          "active": true,
          "description": "description",
          "postOfficeBox": "postOfficeBox",
          "street": "street",
          "countryCode": "countryCode",
          "postCode": "postCode",
          "id": "id",
          "state": "state",
          "primary": false
        },
        "nr": "nr",
        "name": "name",
        "id": "id",
        "contacts": [
          {
            "contactDescription": "contactDescription",
            "contactValue": "contactValue",
            "isPrimary": true,
            "contactType": "Phone"
          },
          {
            "contactDescription": "contactDescription",
            "contactValue": "contactValue",
            "isPrimary": true,
            "contactType": "Phone"
          }
        ]
      }
    },
    "ReturnOrderPosition": {
      "type": "object",
      "properties": {
        "orderNr": {
          "type": "string",
          "description": "Return order nr (RMA)"
        },
        "orderUrl": {
          "type": "string",
          "description": "Part of the Url to call the return order details page directly for the created return order"
        },
        "quarantineOrder": {
          "type": "boolean",
          "description": "True if the given return order is a quarantine return order"
        }
      },
      "example": {
        "orderUrl": "orderUrl",
        "quarantineOrder": true,
        "orderNr": "orderNr"
      }
    },
    "ReturnOrder": {
      "type": "object",
      "properties": {
        "returnOrderUrl": {
          "type": "string",
          "description": "Part of the Url to call the positions directly for the created return order"
        },
        "returnOrderPositionList": {
          "type": "array",
          "description": "List of return order positions",
          "items": {
            "$ref": "#/definitions/ReturnOrderPosition"
          }
        }
      },
      "example": {
        "returnOrderUrl": "returnOrderUrl",
        "returnOrderPositionList": [
          {
            "orderUrl": "orderUrl",
            "quarantineOrder": true,
            "orderNr": "orderNr"
          },
          {
            "orderUrl": "orderUrl",
            "quarantineOrder": true,
            "orderNr": "orderNr"
          }
        ]
      }
    },
    "ReturnOrderRequestPosition": {
      "type": "object",
      "required": [ "quantity", "transId" ],
      "properties": {
        "transId": {
          "type": "string",
          "description": "Lot id of the source sales order"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity to be returned"
        },
        "isQuarantine": {
          "type": "boolean",
          "description": "True, if the created return order position should be marked as quarantine"
        },
        "quarantineReason": {
          "type": "string",
          "description": "Reason why the item is marked as quarantine. Free Text. Mandatory if isQuarantine is true"
        },
        "returnReasonCodeId": {
          "type": "string",
          "description": "Optional return reason code id, if not set default from return order name will be used"
        }
      },
      "example": {
        "returnReasonCodeId": "returnReasonCodeId",
        "quantity": 0.80082819046101150206595775671303272247314453125,
        "transId": "transId",
        "isQuarantine": true,
        "quarantineReason": "quarantineReason"
      }
    },
    "ReturnOrderRequest": {
      "type": "object",
      "required": [ "returnOrderName", "returnOrderRequestPositions" ],
      "properties": {
        "branchId": {
          "type": "string",
          "description": "The id of the warehouse. If not set, the invent location from current worker will be used -- one of branchId and personalNumber must be set"
        },
        "personalNumber": {
          "type": "string",
          "description": "The Sales Rep’s Personal Number of the Customer’s Sales Group. Will be used as current worker -- one of branchId and personalNumber must be set"
        },
        "returnOrderName": {
          "type": "string",
          "description": "Defines the record for default values from return order name table."
        },
        "returnOrderDocumentConfirmationPrint": {
          "type": "boolean",
          "description": "True, if return order receive confirmation document should be printed. If not set or false no document will be printed."
        },
        "returnOrderRequestPositions": {
          "type": "array",
          "description": "List of ReturnOrderRequestPositions",
          "items": {
            "$ref": "#/definitions/ReturnOrderRequestPosition"
          }
        }
      },
      "example": {
        "branchId": "branchId",
        "returnOrderRequestPositions": [
          {
            "returnReasonCodeId": "returnReasonCodeId",
            "quantity": 0.80082819046101150206595775671303272247314453125,
            "transId": "transId",
            "isQuarantine": true,
            "quarantineReason": "quarantineReason"
          },
          {
            "returnReasonCodeId": "returnReasonCodeId",
            "quantity": 0.80082819046101150206595775671303272247314453125,
            "transId": "transId",
            "isQuarantine": true,
            "quarantineReason": "quarantineReason"
          }
        ],
        "returnOrderName": "returnOrderName",
        "personalNumber": "personalNumber",
        "returnOrderDocumentConfirmationPrint": true
      }
    },
    "TransactionReference": {
      "type": "object",
      "properties": {
        "transId": {
          "type": "string",
          "description": "The inventory transaction Id"
        },
        "articleId": {
          "type": "string",
          "description": "The Item Id of the transaction reference"
        },
        "articleName": {
          "type": "string",
          "description": "The article description in the current language of the item id"
        },
        "articleKeyword": {
          "type": "string",
          "description": "Search name of the item"
        },
        "orderNr": {
          "type": "string",
          "description": "Releated order nr found for the given search string"
        },
        "customerNr": {
          "type": "string",
          "description": "Customer account of the found position"
        },
        "customerName": {
          "type": "string",
          "description": "Name of the found customer"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "The transaction reference quantity"
        },
        "returnQty": {
          "type": "number",
          "format": "double",
          "description": "Quantity not returned yet"
        },
        "branchId": {
          "type": "string",
          "description": "Original location of point of sell"
        },
        "paymentType": {
          "type": "string",
          "description": "Used payment mode"
        },
        "termOfPayment": {
          "type": "string",
          "description": "Used payment terms"
        },
        "cashDiscount": {
          "type": "string",
          "description": "Granted cash discount"
        },
        "unitOfMeasurement": {
          "type": "string",
          "description": "Unit of the quantity sold"
        },
        "sourcingType": {
          "type": "string",
          "description": "Sourcing type when sales line has a sourcing type set"
        }
      },
      "example": {
        "unitOfMeasurement": "unitOfMeasurement",
        "branchId": "branchId",
        "articleName": "articleName",
        "customerNr": "customerNr",
        "quantity": 0.8008281904610115,
        "returnQty": 6.027456183070403,
        "transId": "transId",
        "articleId": "articleId",
        "articleKeyword": "articleKeyword",
        "customerName": "customerName",
        "paymentType": "paymentType",
        "cashDiscount": "cashDiscount",
        "orderNr": "orderNr",
        "sourcingType": "sourcingType",
        "termOfPayment": "termOfPayment"
      }
    },
    "TransactionReferences": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "description": "The list of transaction references",
          "items": {
            "$ref": "#/definitions/TransactionReference"
          }
        }
      },
      "example": {
        "transactions": [
          {
            "unitOfMeasurement": "unitOfMeasurement",
            "branchId": "branchId",
            "articleName": "articleName",
            "customerNr": "customerNr",
            "quantity": 0.8008281904610115,
            "returnQty": 6.027456183070403,
            "transId": "transId",
            "articleId": "articleId",
            "articleKeyword": "articleKeyword",
            "customerName": "customerName",
            "paymentType": "paymentType",
            "cashDiscount": "cashDiscount",
            "orderNr": "orderNr",
            "sourcingType": "sourcingType",
            "termOfPayment": "termOfPayment"
          },
          {
            "unitOfMeasurement": "unitOfMeasurement",
            "branchId": "branchId",
            "articleName": "articleName",
            "customerNr": "customerNr",
            "quantity": 0.8008281904610115,
            "returnQty": 6.027456183070403,
            "transId": "transId",
            "articleId": "articleId",
            "articleKeyword": "articleKeyword",
            "customerName": "customerName",
            "paymentType": "paymentType",
            "cashDiscount": "cashDiscount",
            "orderNr": "orderNr",
            "sourcingType": "sourcingType",
            "termOfPayment": "termOfPayment"
          }
        ]
      }
    },
    "VendorStocks": {
      "type": "object",
      "properties": {
        "stocks": {
          "type": "array",
          "description": "List of vendor article stocks",
          "items": {
            "$ref": "#/definitions/VendorStock"
          }
        },
        "deliveryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Delivery Date in ISO 8601 format"
        },
        "cutoffTime": {
          "type": "string",
          "format": "date-time",
          "description": "Cutoff Time in ISO 8601 format"
        },
        "errorMessage": {
          "type": "string",
          "description": "Error message sent by vendor"
        }
      },
      "example": {
        "cutoffTime": "2000-01-23T04:56:07.000+00:00",
        "errorMessage": "errorMessage",
        "deliveryDate": "2000-01-23T04:56:07.000+00:00",
        "stocks": [
          {
            "quantity": 0.8008281904610115,
            "vendorArticleId": "vendorArticleId"
          },
          {
            "quantity": 0.8008281904610115,
            "vendorArticleId": "vendorArticleId"
          }
        ]
      }
    },
    "VendorStock": {
      "type": "object",
      "properties": {
        "vendorArticleId": {
          "type": "string",
          "description": "The vendor id of the article"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Quantity of the article"
        }
      },
      "example": {
        "quantity": 0.8008281904610115,
        "vendorArticleId": "vendorArticleId"
      }
    },
    "ArticleVendor": {
      "type": "object",
      "properties": {
        "vendorId": {
          "type": "string",
          "description": "The vendor id"
        },
        "vendorName": {
          "type": "string",
          "description": "The vendor name"
        },
        "leadTime": {
          "type": "string",
          "description": "The vendor lead time"
        },
        "articleId": {
          "type": "string",
          "description": "The article id"
        },
        "externalArticleId": {
          "type": "string",
          "description": "The external (vendor) article id"
        }
      },
      "example": {
        "articleId": "articleId",
        "externalArticleId": "externalArticleId",
        "vendorId": "vendorId",
        "leadTime": "leadTime",
        "vendorName": "vendorName"
      }
    },
    "ArticleVendors": {
      "type": "object",
      "properties": {
        "vendors": {
          "type": "array",
          "description": "List of vendors for a given article id",
          "items": {
            "$ref": "#/definitions/ArticleVendor"
          }
        }
      },
      "example": {
        "vendors": [
          {
            "articleId": "articleId",
            "externalArticleId": "externalArticleId",
            "vendorId": "vendorId",
            "leadTime": "leadTime",
            "vendorName": "vendorName"
          },
          {
            "articleId": "articleId",
            "externalArticleId": "externalArticleId",
            "vendorId": "vendorId",
            "leadTime": "leadTime",
            "vendorName": "vendorName"
          }
        ]
      }
    },
    "VendorStockRequest": {
      "type": "object",
      "required": [ "branchId", "stocks" ],
      "properties": {
        "stocks": {
          "type": "array",
          "description": "List of VendorStockRequestItems",
          "items": {
            "$ref": "#/definitions/VendorStockRequestItem"
          }
        },
        "branchId": {
          "type": "string",
          "description": "Branch Id"
        }
      },
      "example": {
        "branchId": "branchId",
        "stocks": [
          {
            "quantity": 0.80082819046101150206595775671303272247314453125,
            "vendorArticleId": "vendorArticleId"
          },
          {
            "quantity": 0.80082819046101150206595775671303272247314453125,
            "vendorArticleId": "vendorArticleId"
          }
        ]
      }
    },
    "VendorStockRequestItem": {
      "type": "object",
      "required": [ "vendorArticleId" ],
      "properties": {
        "vendorArticleId": {
          "type": "string",
          "description": "External (vendor) article identifier"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity to be returned"
        }
      },
      "example": {
        "quantity": 0.80082819046101150206595775671303272247314453125,
        "vendorArticleId": "vendorArticleId"
      }
    },
    "UpdateOrderRequest": {
      "type": "object",
      "required": [ "orderNr" ],
      "properties": {
        "items": {
          "type": "array",
          "description": "List of UpdateOrderRequestItems",
          "items": {
            "$ref": "#/definitions/UpdateOrderRequestItem"
          }
        },
        "orderNr": {
          "type": "string",
          "description": "Sales Order number"
        }
      },
      "example": {
        "items": [
          {
            "quantity": 0.8008281904610115,
            "articleId": "articleId",
            "externalLineNumber": "externalLineNumber"
          },
          {
            "quantity": 0.8008281904610115,
            "articleId": "articleId",
            "externalLineNumber": "externalLineNumber"
          }
        ],
        "orderNr": "orderNr"
      }
    },
    "UpdateOrderRequestItem": {
      "type": "object",
      "required": [ "articleId", "quantity" ],
      "properties": {
        "articleId": {
          "type": "string",
          "description": "Article identifier"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Quantity to be updated"
        },
        "externalLineNumber": {
          "type": "string",
          "description": "External line number for identifying each position",
          "maxLength": 50
        }
      },
      "example": {
        "quantity": 0.8008281904610115,
        "articleId": "articleId",
        "externalLineNumber": "externalLineNumber"
      }
    },
    "UpdateOrderConfirmation": {
      "type": "object",
      "properties": {
        "orderUpdated": {
          "type": "boolean",
          "description": "Inticates a successful order update"
        }
      },
      "example": {
        "orderUpdated": true
      }
    },
    "BasketHistory": {
      "type": "object",
      "properties": {
        "baskets": {
          "type": "array",
          "description": "The history of basket records that correspond to the given criteria",
          "items": {
            "$ref": "#/definitions/Basket"
          }
        }
      },
      "example": {
        "baskets": [
          {
            "customerRefText": "customerRefText",
            "basketPositions": [
              {
                "quantity": 0.8008281904610115,
                "articleId": "articleId"
              },
              {
                "quantity": 0.8008281904610115,
                "articleId": "articleId"
              }
            ],
            "orderNr": "orderNr"
          },
          {
            "customerRefText": "customerRefText",
            "basketPositions": [
              {
                "quantity": 0.8008281904610115,
                "articleId": "articleId"
              },
              {
                "quantity": 0.8008281904610115,
                "articleId": "articleId"
              }
            ],
            "orderNr": "orderNr"
          }
        ]
      }
    },
    "Basket": {
      "type": "object",
      "properties": {
        "orderNr": {
          "type": "string",
          "description": "The order number"
        },
        "customerRefText": {
          "type": "string",
          "description": "Reference text for the header of the order which will be used in all documents e.g. invoice."
        },
        "basketPositions": {
          "type": "array",
          "description": "List of basket positions",
          "items": {
            "$ref": "#/definitions/BasketPosition"
          }
        }
      },
      "example": {
        "customerRefText": "customerRefText",
        "basketPositions": [
          {
            "quantity": 0.8008281904610115,
            "articleId": "articleId"
          },
          {
            "quantity": 0.8008281904610115,
            "articleId": "articleId"
          }
        ],
        "orderNr": "orderNr"
      }
    },
    "BasketPosition": {
      "type": "object",
      "properties": {
        "articleId": {
          "type": "string",
          "description": "Article identifier"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "Quantity to be updated"
        }
      },
      "example": {
        "quantity": 0.8008281904610115,
        "articleId": "articleId"
      }
    },
    "CourierServices": {
      "type": "object",
      "required": [ "courierServices" ],
      "properties": {
        "courierServices": {
          "type": "array",
          "description": "The list of courier services is embedded in this resource representation.",
          "items": {
            "$ref": "#/definitions/CourierService"
          }
        }
      },
      "example": {
        "courierServices": [
          {
            "courierServiceCode": "courierServiceCode",
            "description": "string description"

          },
          {
            "courierServiceCode": "courierServiceCode 2",
            "description": "string description 2"
          }
        ]
      }
    },
    "CourierService": {
      "type": "object",
      "required": [ "courierServiceCode", "description" ],
      "properties": {
        "courierServiceCode": {
          "type": "string",
          "description": "The courierServiceCode"
        },
        "description": {
          "type": "string",
          "description": "The description."
        }
      },
      "example": "courierServiceCode",
      "description": "description"
    }
    }
  }
}
