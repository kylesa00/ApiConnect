/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using System.Data.SqlClient;
using System.Linq;
using IO.Swagger.Helpers;
using static IO.Swagger.Models.Order;
using System.Data;
using System.ServiceModel;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.AspNetCore.Http;
using System.Threading.Tasks;
using Google.Protobuf.Collections;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OrderApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a list of orders for a customer.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">The number of the customer.</param>
        /// <param name="orderNr">The number of the requested order.</param>
        /// <param name="dateFrom">The start date of range for order selection in ISO 8601 format.</param>
        /// <param name="dateTo">The end date of range for order selection in ISO 8601 format.</param>
        /// <param name="page">The number of the page to be retrieved, defaults to the first page. The page parameter should not be provided explicitly, but the usage of &#x60;next&#x60; and &#x60;prev&#x60; links of the response is recommended.</param>
        /// <response code="200">Successful retrieval of the orders of the customer results in an HTTP status of 200 (OK). </response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the customer has no orders or customer does not exist, endpoint responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/{customerNr}")]
        [ValidateModelState]
        [SwaggerOperation("GetOrdersOfCustomer")]
        [SwaggerResponse(statusCode: 200, type: typeof(Orders), description: "Successful retrieval of the orders of the customer results in an HTTP status of 200 (OK). ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the customer has no orders or customer does not exist, endpoint responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetOrdersOfCustomer([FromRoute][Required] string company, [FromRoute][Required] string customerNr, [FromQuery] string orderNr, [FromQuery] DateTime? dateFrom, [FromQuery] DateTime? dateTo, [FromQuery] int? page)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<Order> orders = new List<Order>();            
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr),
                new SqlParameter("@orderNr", orderNr),
                new SqlParameter("@dateFrom", (object)dateFrom ?? DBNull.Value),
                new SqlParameter("@dateTo", (object)dateTo ?? DBNull.Value),
                new SqlParameter("@page", page ?? 1)
            };
            Dictionary<string, LinkEntry> links;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetOrdersOfCustomer", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>()
                            {{"collection/positions", new LinkEntry(Url.Action(nameof(GetOrderPositions), values: new { company, customerNr, orderNr = dr["nr"].ToString()})) } };
                        link = UrlTool.ParseLinks(link);

                        Order order = new Order()
                        {
                            Nr = dr["nr"].ToString(),
                            Type = dr["type"].ToString(),
                            BranchId = dr["branchId"].ToString(),
                            TypeDesc = dr["typeDesc"].ToString(),
                            SendMethod = dr["sendMethod"].ToString(),
                            Status = (StatusEnum)Convert.ToInt32(dr["status"]),
                            Date = Convert.ToDateTime(dr["date"]),
                            Links = link
                        };
                        orders.Add(order);
                        link = null;
                    }

                    links = new Dictionary<string, LinkEntry>() {
                    { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) }
                };

                    if (page != null && page != 1)
                    {
                        var queryString = QueryHelpers.ParseQuery(Request.QueryString.ToString());
                        if (queryString.ContainsKey("page"))
                        {
                            queryString.Remove("page");
                        }
                        queryString.Add("page", (page - 1).ToString());
                        links.Add("prev", new LinkEntry(Request.Path.ToString() + QueryString.Create(queryString).ToString()));
                    }
                    if (ds.Tables[1].Rows.Count > 0 && Convert.ToInt32(ds.Tables[1].Rows[0]["NextPageNumber"]) != 0)
                    {
                        var queryString = QueryHelpers.ParseQuery(Request.QueryString.ToString());
                        if (queryString.ContainsKey("page"))
                        {
                            queryString.Remove("page");
                        }
                        queryString.Add("page", ds.Tables[1].Rows[0]["NextPageNumber"].ToString());
                        links.Add("next", new LinkEntry(Request.Path.ToString() + QueryString.Create(queryString).ToString()));
                    }
                    links = UrlTool.ParseLinks(links);

                    return new ObjectResult(new Orders() { _Orders = orders, Links = links });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Customer " + customerNr + " has no orders in filter or customer does not exist"
                    }));
            }
            finally
            {
                param = null;
                orders = null;
                links = null;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves basket history information</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerRefText">Reference text for the header of the order which will be used in all documents e.g. invoice.</param>
        /// <param name="orderNr">The number of the requested order.</param>
        /// <response code="200">Successful retrieval of the history of the basket results in an HTTP status of 200 (OK). </response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/baskets/{company}/history")]
        [ValidateModelState]
        [SwaggerOperation("GetBasketHistory")]
        [SwaggerResponse(statusCode: 200, type: typeof(BasketHistory), description: "Successful retrieval of the history of the basket results in an HTTP status of 200 (OK). ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. " +
        "+ If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual async Task<IActionResult> GetBasketHistory([FromRoute][Required] string company, [FromQuery][MaxLength(60)] string customerRefText, [FromQuery] string orderNr)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<Basket> baskets = new List<Basket>();
            Basket basket = new Basket();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerRefText", (object)customerRefText ?? DBNull.Value),
                new SqlParameter("@orderNr", (object)orderNr ?? DBNull.Value)
            };

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetBasketHistory", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (string.IsNullOrEmpty(basket.OrderNr)) //for first one create basket object, for others find that basket in baskets and add new position
                        {
                            basket = new Basket()
                            {
                                OrderNr = dr["orderNr"].ToString(),
                                CustomerRefText = dr["customerRefText"].ToString(),
                                BasketPositions = new List<BasketPosition>() { new BasketPosition() { ArticleId = dr["articleId"].ToString(), Quantity = Convert.ToDouble(dr["quantity"]) } }
                            };
                            baskets.Add(basket);
                        }
                        else
                        {
                            baskets.FirstOrDefault().BasketPositions.Add(new BasketPosition() { ArticleId = dr["articleId"].ToString(), Quantity = Convert.ToDouble(dr["quantity"]) });
                        }
                    }
                    return new ObjectResult(new BasketHistory() { Baskets = baskets });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Not found"
                    }));
            }
            finally
            {
                param = null;
                basket = null;
                baskets = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the representation of a particular order position, which is given by the number of the order and the sequence number of the position.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">The number of the customer.</param>
        /// <param name="orderNr">The number of the order.</param>
        /// <param name="sequence">the id of the position</param>
        /// <response code="200">Succesful response returns the representation of the position specified by the parameters.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the order position referenced by number of order and sequence number does not exist, the service endpoint responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/{customerNr}/{orderNr}/positions/{sequence}")]
        [ValidateModelState]
        [SwaggerOperation("GetOrderPosition")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderPosition), description: "Succesful response returns the representation of the position specified by the parameters.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the order position referenced by number of order and sequence number does not exist, the service endpoint responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetOrderPosition([FromRoute][Required] string company, [FromRoute][Required] string customerNr, [FromRoute][Required] string orderNr, [FromRoute][Required] long? sequence)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr),
                new SqlParameter("@orderNr", orderNr),
                new SqlParameter("@sequence", sequence)
            };
            OrderPosition orderPosition;

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetOrderPosition", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                        { "self", new LinkEntry(Request.Path.ToString()) },
                        { "article", new LinkEntry(Url.Action(nameof(ArticleApiController.GetArticleById), "ArticleApi", values: new { company, articleId = ds.Tables[0].Rows[0]["articleId"].ToString()})) }
                     };
                    link = UrlTool.ParseLinks(link);
                    orderPosition = new OrderPosition()
                    {
                        Sequence = Convert.ToInt64(ds.Tables[0].Rows[0]["sequence"]),
                        ArticleId = ds.Tables[0].Rows[0]["articleId"].ToString(),
                        Quantity = Convert.ToDouble(ds.Tables[0].Rows[0]["quantity"]),
                        Status = (OrderPosition.StatusEnum)Convert.ToInt32(ds.Tables[0].Rows[0]["status"]),
                        Links = link
                    };
                    link = null;
                    return new ObjectResult(orderPosition);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Order Position not found in requested filter"
                    }));
            }
            finally
            {
                param = null;
                orderPosition = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the representation of a list of positions for an order given by its number.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">The number of the customer.</param>
        /// <param name="orderNr">The number of the order.</param>
        /// <param name="page">The number of the page to be retrieved, defaults to the first page. The page parameter should not be provided explicitly, but the usage of &#x60;next&#x60; and &#x60;prev&#x60; links of the response is recommended.           </param>
        /// <response code="200">Successful response returns the entire list of positions of given order.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the order given by its number does not exist, the service endpoint responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/{customerNr}/{orderNr}/positions")]
        [ValidateModelState]
        [SwaggerOperation("GetOrderPositions")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderPositions), description: "Successful response returns the entire list of positions of given order.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the order given by its number does not exist, the service endpoint responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetOrderPositions([FromRoute][Required] string company, [FromRoute][Required] string customerNr, [FromRoute][Required] string orderNr, [FromQuery] int? page)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<OrderPosition> orderPositions = new List<OrderPosition>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr),
                new SqlParameter("@orderNr", orderNr),
                new SqlParameter("@page", page ?? 1)
            };
            Dictionary<string, LinkEntry> links;

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetOrderPositions", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                            { "self", new LinkEntry(Url.Action(nameof(GetOrderPosition), values: new { company, customerNr, orderNr, sequence = Convert.ToInt64(dr["sequence"]) }))},
                            { "article", new LinkEntry(Url.Action(nameof(ArticleApiController.GetArticleById), "ArticleApi", values: new { company, articleId = dr["articleId"].ToString()})) }
                        };
                        OrderPosition orderPosition = new OrderPosition()
                        {
                            Sequence = Convert.ToInt64(dr["sequence"]),
                            ArticleId = dr["articleId"].ToString(),
                            Quantity = Convert.ToDouble(dr["quantity"]),
                            Status = (OrderPosition.StatusEnum)Convert.ToInt32(dr["status"]),
                            Links = link
                        };
                        orderPositions.Add(orderPosition);
                        link = null;
                    }

                    links = new Dictionary<string, LinkEntry>() {
                    { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) }
                };

                    if (page != null && page != 1)
                    {
                        var queryString = QueryHelpers.ParseQuery(Request.QueryString.ToString());
                        if (queryString.ContainsKey("page"))
                        {
                            queryString.Remove("page");
                        }
                        queryString.Add("page", (page - 1).ToString());
                        links.Add("prev", new LinkEntry(Request.Path.ToString() + QueryString.Create(queryString).ToString()));
                    }

                    if (ds.Tables[1].Rows.Count > 0 && Convert.ToInt32(ds.Tables[1].Rows[0]["NextPageNumber"]) != 0)
                    {
                        var queryString = QueryHelpers.ParseQuery(Request.QueryString.ToString());
                        if (queryString.ContainsKey("page"))
                        {
                            queryString.Remove("page");
                        }
                        queryString.Add("page", ds.Tables[1].Rows[0]["NextPageNumber"].ToString());
                        links.Add("next", new LinkEntry(Request.Path.ToString() + QueryString.Create(queryString).ToString()));
                    }
                    links = UrlTool.ParseLinks(links);

                    return new ObjectResult(new OrderPositions() { _OrderPositions = orderPositions, Links = links });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Order not found in requested filter"
                    }));
            }
            finally
            {
                param = null;
                orderPositions = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves url that points to the pdf of the given deliveryNote nr.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">Path parameter of the number of the customer.</param>
        /// <param name="deliveryNoteNr">Path parameter of nr of requested deliveryNote.</param>
        /// <response code="200">Successful response provides the requested url.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the deliveryNote with given nr does not exist, the service responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/{customerNr}/{deliveryNoteNr}/pdf")]
        [ValidateModelState]
        [SwaggerOperation("GetDeliveryNotePdf")]
        [SwaggerResponse(statusCode: 200, type: typeof(UrlEntry), description: "Successful response provides the requested url.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the deliveryNote with given nr does not exist, the service responds with a 404 (Not Found) status.")]
        [ApiExplorerSettings(IgnoreApi = true)]
        public virtual IActionResult GetDeliveryNotePdf([FromRoute][Required] string company, [FromRoute][Required] string customerNr, [FromRoute][Required] string deliveryNoteNr)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UrlEntry));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorInfo));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorInfo));

            string exampleJson = null;
            exampleJson = "{\n  \"url\" : \"url\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UrlEntry>(exampleJson)
            : default(UrlEntry);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests transfer of new shopping basket to the ERP system. The ERP system asynchronously creates orders based on the shopping basket, but service call immediately returns when shopping basket could be transfered.        </remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="updateOrderRequest">The request containing the order to be updated.</param>
        /// <response code="200">Successful update of order results in false error code</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/update-order")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrder")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOrderConfirmation), description: "Successful update of order results in false error code")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        [ApiExplorerSettings(IgnoreApi = true)]
        public virtual IActionResult UpdateOrder([FromRoute][Required] string company, [FromBody] UpdateOrderRequest updateOrderRequest)
        {
           
            string exampleJson = null;
            exampleJson = "{\n  \"orderUpdated\" : true\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOrderConfirmation>(exampleJson)
            : default(UpdateOrderConfirmation);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests change of the sales order process status.      </remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="orderProcessStatus">The request containing the order to to have its status changed.</param>
        /// <response code="202">Successful transfer of order results in Accepted status code.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/process-status")]
        [ValidateModelState]
        [SwaggerOperation("ChangeOrderProcessStatus")]
        [SwaggerResponse(statusCode: 202, type: typeof(OrderProcessStatusConfirmation), description: "Successful transfer of order results in Accepted status code.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual async Task<IActionResult> ChangeOrderProcessStatus([FromRoute][Required] string company, [FromBody] OrderProcessStatus orderProcessStatus)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@orderNr", orderProcessStatus.OrderNr),
                new SqlParameter("@processStatus", (object)orderProcessStatus.ProcessStatus  ?? DBNull.Value)
            };
            try
            {
                if (!Convert.ToBoolean(await Dal.ExecSpAsync("ChangeOrderProcessStatus", param)))
                {
                    ObjectResult objectResult = new ObjectResult(new OrderProcessStatusConfirmation() { ProcessStatusChanged = true });
                    objectResult.StatusCode = 202;
                    return objectResult;
                }
                else
                    return StatusCode(400, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Not found"
                    }));
            }
            finally
            {
                param = null;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests transfer of new shopping basket to the ERP system. The ERP system asynchronously creates orders based on the shopping basket, but service call immediately returns when shopping basket could be transfered.        </remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="orderRequest">The request containing the order to be forwarded.</param>
        /// <response code="202">Successful transfer of order results in Accepted status code.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}")]
        [ValidateModelState]
        [SwaggerOperation("CreateOrder")]
        [SwaggerResponse(statusCode: 202, type: typeof(OrderConfirmation), description: "Successful transfer of order results in Accepted status code.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual IActionResult CreateOrder([FromRoute][Required] string company, [FromBody] OrderRequest orderRequest)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            #region SQL sp version
            /*
            DataTable dt = new DataTable();
            dt.Columns.Add("articleId", typeof(string));
            dt.Columns.Add("quantity", typeof(double));
            dt.Columns.Add("brandId", typeof(int));
            dt.Columns.Add("model", typeof(string));
            dt.Columns.Add("brand", typeof(string));
            dt.Columns.Add("type", typeof(string));
            dt.Columns.Add("sourcingType", typeof(string));
            dt.Columns.Add("vendorId", typeof(string));
            dt.Columns.Add("arrivalTime", typeof(DateTime));
            dt.Columns.Add("externalLineNumber", typeof(string));
            dt.Columns.Add("additionalTextDoc", typeof(string));
            dt.Columns.Add("additionalTextDocPrinters", typeof(string));
            dt.Columns.Add("registrationDocNr", typeof(string));
            dt.Columns.Add("priceDiscTypeId", typeof(string));

            foreach (OrderRequestItem orderRequestItem in orderRequest.Items)
            {
                dt.Rows.Add(orderRequestItem.ArticleId, orderRequestItem.Quantity, orderRequestItem.BrandId, orderRequestItem.Model, orderRequestItem.Brand,
                    orderRequestItem.Type, orderRequestItem.SourcingType, orderRequestItem.VendorId, orderRequestItem.ArrivalTime, orderRequestItem.ExternalLineNumber,
                    orderRequestItem.AdditionalTextDoc, orderRequestItem.AdditionalTextDocPrinters, orderRequestItem.RegistrationDocNr, orderRequestItem.PriceDiscTypeId);
            }
           
           List<SqlParameter> param = new List<SqlParameter>()
           {
               new SqlParameter("@company", company),                
               new SqlParameter("@customerNr", orderRequest.CustomerNr),
               new SqlParameter("@branchId", orderRequest.BranchId),
               new SqlParameter("@sendMethod", orderRequest.SendMethod),
               new SqlParameter("@partialDelivery", (object)orderRequest.PartialDelivery ?? DBNull.Value),
               new SqlParameter("@paymentMethod", orderRequest.PaymentMethod),
               new SqlParameter("@deliveryAddressId", (object)orderRequest.DeliveryAddressId  ?? DBNull.Value),
               new SqlParameter("@pickupBranchId", (object)orderRequest.PickupBranchId  ?? DBNull.Value),
               new SqlParameter("@customerRefText", (object)orderRequest.CustomerRefText ?? DBNull.Value),
               new SqlParameter("@message", (object)orderRequest.Message ?? DBNull.Value),
               new SqlParameter("@singleInvoice", (object)orderRequest.SingleInvoice ?? DBNull.Value),
               new SqlParameter("@completeInvoice", (object)orderRequest.CompleteInvoice ?? DBNull.Value),
               new SqlParameter("@personalNumber", (object)orderRequest.PersonalNumber ?? DBNull.Value),
               new SqlParameter("@salesOrigin", (object)orderRequest.SalesOrigin ?? DBNull.Value),
               new SqlParameter("@orderType", (object)orderRequest.OrderType ?? DBNull.Value),
               new SqlParameter("@orderRequest", dt)
               {
                   TypeName = "dbo.tyOrderRequest"
               }
           };            
                  //DataSet ds = Dal.GetData("CreateOrder", param);
                  if (ds.Tables[0].Rows.Count > 0)
                  {
                      foreach (DataRow dr in ds.Tables[0].Rows)
                      {
                          if (string.IsNullOrEmpty(orderConfirmation.OrderNr))
                          {
                              orderConfirmation = new OrderConfirmation()
                              {
                                  OrderNr = dr["orderNr"].ToString(),
                                  AxOrderURL = dr["axOrderURL"].ToString(),
                                  WorkIds = new List<string>() { dr["workIds"].ToString() },
                                  AllPositionsAvailable = Convert.ToBoolean(dr["allPositionsAvailable"]),
                                  CreditLimitExceeded = Convert.ToBoolean(dr["creditLimitExceeded"]),
                                  EffectiveAvailabilityLines = null,      //todo -> done down
                                  Links = new Dictionary<string, LinkEntry>() {
                                      {"self", new LinkEntry(Request.Path.ToString()) }       //todo not sure
                                  }
                              };
                          }
                          else
                          {
                              orderConfirmation.WorkIds.Add(dr["workIds"].ToString());
                          }
                      }

                      List<Availability> availabilities = new List<Availability>();
                      Availability availability = new Availability();

                      if (ds.Tables[1].Rows.Count > 0)
                      {
                          foreach (DataRow dr in ds.Tables[1].Rows)
                          {
                              if (!availabilities.Any(e => e.ArticleId == dr["articleId"].ToString()))
                              {
                                  availability = new Availability()
                                  {
                                      ArticleId = dr["articleId"].ToString(),
                                      Quantity = Convert.ToDouble(dr["quantity"]),
                                      BackOrder = Convert.ToBoolean(dr["backOrder"]),
                                      CutOffTime = Convert.ToDateTime(dr["cutOffTime"]),
                                      ArrivalTime = Convert.ToDateTime(dr["arrivalTime"]),
                                      ImmediateDelivery = Convert.ToBoolean(dr["immediateDelivery"]),
                                      StockWarehouse = dr["stockWarehouse"].ToString(),
                                      DeliveryWarehouse = dr["deliveryWarehouse"].ToString(),
                                      SendMethod = dr["sendMethod"].ToString(),
                                      AssignmentPriority = Convert.ToInt64(dr["assignmentPriority"]),
                                      ErrorMessage = dr["errorMessage"].ToString(),
                                      TourName = dr["tourName"].ToString(),
                                      TourTimeTable = new List<Tour>() { new Tour() {
                                          TourName = dr["tourTimeTableTourName"].ToString(),
                                          StartTime = Convert.ToDateTime(dr["tourTimeTableStartTime"]) }
                                      }
                                  };
                                  availabilities.Add(availability);
                              }
                              else
                              {
                                  availabilities.Find(e => e.ArticleId == availability.ArticleId).TourTimeTable.Add(new Tour()
                                  {
                                      TourName = dr["tourTimeTableTourName"].ToString(),
                                      StartTime = Convert.ToDateTime(dr["tourTimeTableStartTime"])
                                  });
                              }
                          }
                      }
                      orderConfirmation.EffectiveAvailabilityLines = new Availabilities() { _Availabilities = availabilities };
                      
            return new ObjectResult(orderConfirmation);
        }
            else
                return StatusCode(404, (new ErrorInfo()
        {
            ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Not found"
                }));
           */

            #endregion

            List<NavWebServiceReference.items> navItems = new List<NavWebServiceReference.items>();

            foreach (OrderRequestItem orderRequestItem in orderRequest.Items)
            {
                NavWebServiceReference.items navItem = new NavWebServiceReference.items()
                {
                    articleId = orderRequestItem.ArticleId,
                    quantity = Convert.ToDecimal(orderRequestItem.Quantity),
                    brandId = Convert.ToInt32(orderRequestItem.BrandId),

                    model = orderRequestItem.Model,
                    brand = orderRequestItem.Brand,

                    type = orderRequestItem.Type,
                    sourcingType = orderRequestItem.SourcingType,
                    vendorId = orderRequestItem.VendorId,
                    arrivalTime = Convert.ToDateTime(orderRequestItem.ArrivalTime),
                    externalLineNumber = orderRequestItem.ExternalLineNumber,

                    additionalTextDoc = orderRequestItem.AdditionalTextDoc,
                    additionalTextDocPrinters = orderRequestItem.AdditionalTextDocPrinters,
                    registrationDocNr = orderRequestItem.RegistrationDocNr,
                    priceDiscTypeId = orderRequestItem.PriceDiscTypeId
                };
                navItems.Add(navItem);
            }

            NavWebServiceReference.OrderRequestConnectWebSalesHeader navHeader = new NavWebServiceReference.OrderRequestConnectWebSalesHeader()
            {
                customerNr = orderRequest.CustomerNr,
                branchId = orderRequest.BranchId,

                courierServiceCode = orderRequest.CourierServiceCode,

                sendMethod = orderRequest.SendMethod,
                partialDelivery = orderRequest.PartialDelivery ?? false,
                paymentMethod = orderRequest.PaymentMethod.ToString(),

                deliveryAddressId = orderRequest.DeliveryAddressId ?? string.Empty,
                pickupBranchId = orderRequest.PickupBranchId ?? string.Empty,
                customerRefText = orderRequest.CustomerRefText ?? string.Empty,
                message = orderRequest.Message ?? string.Empty,
                singleInvoice = orderRequest.SingleInvoice ?? false,

                completeInvoice = orderRequest.CompleteInvoice ?? false,
                personalNumber = orderRequest.PersonalNumber ?? string.Empty,
                salesOrigin = orderRequest.SalesOrigin ?? string.Empty,
                orderType = orderRequest.OrderType ?? string.Empty,

                userName = orderRequest.UserName ?? string.Empty,
                email = orderRequest.Email ?? string.Empty,

                items = navItems.ToArray()
            };
           
            string[] text = new string[1];
            text[0] = string.Empty;

            NavWebServiceReference.OrderRequestConnectWebSalesHeader[] connectWebSalesHeaders = new NavWebServiceReference.OrderRequestConnectWebSalesHeader[1];
            connectWebSalesHeaders[0] = navHeader;

            NavWebServiceReference.OrderRequest navRequest = new NavWebServiceReference.OrderRequest() {  OrderRequestConnectWebSalesHeader = connectWebSalesHeaders, Text = text };
            NavWebServiceReference.OrderConfirmation navResponse = new NavWebServiceReference.OrderConfirmation();
            bool isOk = false;
            string errorMessage = string.Empty;

           Helpers.NavWebServiceReference navWebServiceReference = Dal.GetNavWebReference();

            try
            {              
                var res = new NavWebServiceReference.ConnectIntegration_PortClient(NavWebServiceReference.ConnectIntegration_PortClient.EndpointConfiguration.ConnectIntegration_Port, navWebServiceReference.Url);
                res.ChannelFactory.Credentials.UserName.UserName = navWebServiceReference.Domain + @"\" + navWebServiceReference.UserName;
                res.ChannelFactory.Credentials.UserName.Password = navWebServiceReference.Password;

                res.ChannelFactory.Credentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Impersonation;
                res.ChannelFactory.Credentials.Windows.ClientCredential 
                    = new System.Net.NetworkCredential { Domain = navWebServiceReference.Domain, UserName = navWebServiceReference.UserName, Password = navWebServiceReference.Password };

                res.ClientCredentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Impersonation;
                res.ClientCredentials.Windows.ClientCredential = new System.Net.NetworkCredential { Domain = navWebServiceReference.Domain, UserName = navWebServiceReference.UserName, Password = navWebServiceReference.Password };
                             
                ((BasicHttpBinding)res.Endpoint.Binding).Security.Mode = BasicHttpSecurityMode.TransportCredentialOnly;
                ((BasicHttpBinding)res.Endpoint.Binding).Security.Transport.ClientCredentialType = HttpClientCredentialType.Ntlm;
                ((BasicHttpBinding)res.Endpoint.Binding).Security.Transport.ProxyCredentialType = HttpProxyCredentialType.Windows;

                res.CreateConnectOrderInNAV(navRequest, ref navResponse, ref isOk, ref errorMessage);
            }
            catch (Exception e) 
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = e.Message
                }));
            }
            finally
            {
                navItems = null;
            }       
            if (isOk)
            {
                List<Availability> availabilities = new List<Availability>();
                Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry> { { "self", new LinkEntry(Request.Path.ToString()) } };
                link = UrlTool.ParseLinks(link);

                foreach (NavWebServiceReference.availabilities navAvailailitie in navResponse.OrderConfirmationConnectWebSalesHeader[0].availabilities)
                {                   
                    List<Tour> tours = new List<Tour>();
                    foreach(NavWebServiceReference.tourTimeTable navTourTime in navAvailailitie.tourTimeTable)
                    {
                        DateTime dt = DateTime.Today;
                        DateTime.TryParse(navTourTime.startTime, out dt);

                        Tour tour = new Tour()
                        {
                            TourName = navTourTime.tourNameTimeTable,                       
                            StartTime = dt           
                        };
                        tours.Add(tour);
                    }

                    Availability availability = new Availability()
                    {
                        ArticleId = navAvailailitie.articleId,
                        Quantity = Convert.ToDouble(navAvailailitie.quantity),
                        BackOrder = navAvailailitie.backOrder,
                        CutOffTime = navAvailailitie.cutOffTime,
                        DeliveryTime = navAvailailitie.deliveryTime,
                        ImmediateDelivery = navAvailailitie.immediateDelivery,
                        StockWarehouse = navAvailailitie.stockWarehouse,
                        DeliveryWarehouse = navAvailailitie.deliveryWarehouse,
                        SendMethod = navAvailailitie.sendMethod,
                        AssignmentPriority = navAvailailitie.assignmentPriority,
                        ErrorMessage = navAvailailitie.errorMessage,
                        TourName = navAvailailitie.tourName,
                        TourTimeTable = tours
                    };
                    availabilities.Add(availability);
                    tours = null;
                }

                OrderConfirmation orderConfirmation = new OrderConfirmation()
                {
                    OrderNr = navResponse.OrderConfirmationConnectWebSalesHeader[0].orderNr,
                    AxOrderURL = navResponse.OrderConfirmationConnectWebSalesHeader[0].axOrderURL,
                    WorkIds = new List<string>() { navResponse.OrderConfirmationConnectWebSalesHeader[0].workIds },
                    AllPositionsAvailable = Convert.ToBoolean(navResponse.OrderConfirmationConnectWebSalesHeader[0].allPositionsAvailable),
                    CreditLimitExceeded = Convert.ToBoolean(navResponse.OrderConfirmationConnectWebSalesHeader[0].creditLimitExceeded),
                    EffectiveAvailabilityLines = new Availabilities() { _Availabilities = availabilities },
                    Links = link
                };
                availabilities = null;
                link = null;
                ObjectResult objectResult = new ObjectResult(orderConfirmation);
                objectResult.StatusCode = 202;
                return objectResult;
            }
            else
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = errorMessage
                }));
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests forwarding of (new) order to ERP system, so that it can be manually post-processed by ERP users.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="orderRequest">The request containing the shopping basket for which an order is expected to be created.</param>
        /// <response code="200">If provided shopping basket passes business validation rules and ERP ensures fulfillment the order based on basket, the response will be 200 (OK).</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/baskets/{company}")]
        [ValidateModelState]
        [SwaggerOperation("CreateShoppingBasket")]
        [SwaggerResponse(statusCode: 200, type: typeof(OrderConfirmation), description: "If provided shopping basket passes business validation rules and ERP ensures fulfillment the order based on basket, the response will be 200 (OK).")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual async Task<IActionResult> CreateShoppingBasket([FromRoute][Required] string company, [FromBody] OrderRequest orderRequest)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("articleId", typeof(string));
            dt.Columns.Add("quantity", typeof(double));
            dt.Columns.Add("brandId", typeof(int));
            dt.Columns.Add("model", typeof(string));
            dt.Columns.Add("brand", typeof(string));
            dt.Columns.Add("type", typeof(string));
            dt.Columns.Add("sourcingType", typeof(string));
            dt.Columns.Add("vendorId", typeof(string));
            dt.Columns.Add("arrivalTime", typeof(DateTime));
            dt.Columns.Add("externalLineNumber", typeof(string));
            dt.Columns.Add("additionalTextDoc", typeof(string));
            dt.Columns.Add("additionalTextDocPrinters", typeof(string));
            dt.Columns.Add("registrationDocNr", typeof(string));
            dt.Columns.Add("priceDiscTypeId", typeof(string));


            foreach (OrderRequestItem orderRequestItem in orderRequest.Items)
            {
                dt.Rows.Add(orderRequestItem.ArticleId, orderRequestItem.Quantity, orderRequestItem.BrandId, orderRequestItem.Model, orderRequestItem.Brand,
                    orderRequestItem.Type, orderRequestItem.SourcingType, orderRequestItem.VendorId, orderRequestItem.ArrivalTime, orderRequestItem.ExternalLineNumber,
                    orderRequestItem.AdditionalTextDoc, orderRequestItem.AdditionalTextDocPrinters, orderRequestItem.RegistrationDocNr, orderRequestItem.PriceDiscTypeId);
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", orderRequest.CustomerNr),
                new SqlParameter("@branchId", orderRequest.BranchId),
                new SqlParameter("@sendMethod", orderRequest.SendMethod),
                new SqlParameter("@partialDelivery", (object)orderRequest.PartialDelivery ?? DBNull.Value),
                new SqlParameter("@paymentMethod", orderRequest.PaymentMethod),
                new SqlParameter("@deliveryAddressId", (object)orderRequest.DeliveryAddressId ?? DBNull.Value),
                new SqlParameter("@pickupBranchId", (object)orderRequest.PickupBranchId ?? DBNull.Value),
                new SqlParameter("@customerRefText", (object)orderRequest.CustomerRefText ?? DBNull.Value),
                new SqlParameter("@message", (object)orderRequest.Message ?? DBNull.Value),
                new SqlParameter("@singleInvoice", (object)orderRequest.SingleInvoice ?? DBNull.Value),
                new SqlParameter("@completeInvoice", (object)orderRequest.CompleteInvoice ?? DBNull.Value),
                new SqlParameter("@personalNumber", (object)orderRequest.PersonalNumber ?? DBNull.Value),
                new SqlParameter("@salesOrigin", (object)orderRequest.SalesOrigin ?? DBNull.Value),
                new SqlParameter("@orderType", (object)orderRequest.OrderType ?? DBNull.Value),
                new SqlParameter("@orderRequest", dt)
                {
                    TypeName = "dbo.tyOrderRequest"
                }
            };
            OrderConfirmation orderConfirmation = new OrderConfirmation();
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() {
                                {"self", new LinkEntry(Request.Path.ToString()) } };
            links = UrlTool.ParseLinks(links);
            try
            {
                DataSet ds = await Dal.GetDataAsync("CreateShoppingBasket", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (string.IsNullOrEmpty(orderConfirmation.OrderNr))
                        {
                            orderConfirmation = new OrderConfirmation()
                            {
                                OrderNr = dr["orderNr"].ToString(),
                                AxOrderURL = dr["axOrderURL"].ToString(),

                                WorkIds = new List<string>() { dr["workIds"].ToString() },

                                AllPositionsAvailable = Convert.ToBoolean(dr["allPositionsAvailable"]),
                                CreditLimitExceeded = Convert.ToBoolean(dr["creditLimitExceeded"]),
                                EffectiveAvailabilityLines = null,      //todo -> done down

                                Links = links
                            };
                        }
                        else
                        {
                            orderConfirmation.WorkIds.Add(dr["workIds"].ToString());
                        }
                    }

                    List<Availability> availabilities = new List<Availability>();
                    Availability availability = new Availability();

                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            if (!availabilities.Any(e => e.ArticleId == dr["articleId"].ToString()))
                            {
                                availability = new Availability()
                                {
                                    ArticleId = dr["articleId"].ToString(),
                                    Quantity = Convert.ToDouble(dr["quantity"]),
                                    BackOrder = Convert.ToBoolean(dr["backOrder"]),
                                    CutOffTime = Convert.ToDateTime(dr["cutOffTime"]),
                                    DeliveryTime = Convert.ToDateTime(dr["deliveryTime"]),
                                    ImmediateDelivery = Convert.ToBoolean(dr["immediateDelivery"]),
                                    StockWarehouse = dr["stockWarehouse"].ToString(),
                                    DeliveryWarehouse = dr["deliveryWarehouse"].ToString(),
                                    SendMethod = dr["sendMethod"].ToString(),
                                    AssignmentPriority = Convert.ToInt64(dr["assignmentPriority"]),
                                    ErrorMessage = dr["errorMessage"].ToString(),
                                    TourName = dr["tourName"].ToString(),
                                    TourTimeTable = new List<Tour>() { new Tour() {
                                    TourName = dr["tourTimeTableTourName"].ToString(),
                                    StartTime = Convert.ToDateTime(dr["tourTimeTableStartTime"]) }
                                }
                                };
                                availabilities.Add(availability);
                            }
                            else
                            {
                                availabilities.Find(e => e.ArticleId == availability.ArticleId).TourTimeTable.Add(new Tour()
                                {
                                    TourName = dr["tourTimeTableTourName"].ToString(),
                                    StartTime = Convert.ToDateTime(dr["tourTimeTableStartTime"])
                                });
                            }
                        }
                    }
                    orderConfirmation.EffectiveAvailabilityLines = new Availabilities() { _Availabilities = availabilities };
                    return new ObjectResult(orderConfirmation);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Not found"
                    }));
            }
            finally
            {
                param = null;
                orderConfirmation = null;
                links = null;
            }
        }

    }
}
