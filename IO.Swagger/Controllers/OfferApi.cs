/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [ApiExplorerSettings(IgnoreApi = true)]
    public class OfferApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates an offer in the Ax ERP.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="orderRequest">The request containing the shopping basket for which an offer is expected to be created.</param>
        /// <response code="200">If provided shopping basket passes business validation rules and ERP ensures fulfillment the order based on basket, the response will be 200 (OK).</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/offers/{company}")]
        [ValidateModelState]
        [SwaggerOperation("CreateOffer")]
        [SwaggerResponse(statusCode: 200, type: typeof(OfferConfirmation), description: "If provided shopping basket passes business validation rules and ERP ensures fulfillment the order based on basket, the response will be 200 (OK).")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual IActionResult CreateOffer([FromRoute][Required]string company, [FromBody]OrderRequest orderRequest)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OfferConfirmation));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorInfo));

            string exampleJson = null;
            exampleJson = "{\n  \"axOfferURL\" : \"axOfferURL\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OfferConfirmation>(exampleJson)
            : default(OfferConfirmation);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
