/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Reflection;
using System.Runtime.Versioning;
using System.IO;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UtilApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Public endpoint returns release, build and version information of running service. 
        /// This public endpoint is the only one, that is not protected any security measurement, and can therefore used as health-check by any monitoring application.</remarks>
        /// <response code="200">Successful response provides release information.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/release")]
        [ValidateModelState]
        [SwaggerOperation("GetReleaseInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReleaseInfo), description: "Successful response provides release information.")]
        
        public virtual IActionResult GetReleaseInfo()
        {
           
                string assemblyVersion = GetType().Assembly.GetName().Version.ToString();

                string packageVersion = Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;

                DateTime releaseDate = Convert.ToDateTime("2020-01-01");

                var filesPath = Directory.GetCurrentDirectory() + "/Resources/";
                if (System.IO.Directory.Exists(filesPath))
                {
                    var path = Path.Combine(filesPath, Path.GetFileName("BuildDate.txt"));
                    releaseDate = Convert.ToDateTime(System.IO.File.ReadAllText(path));
                }
            try
            {
                return new ObjectResult(new ReleaseInfo() { ReleaseBuild = assemblyVersion, ReleaseVersion = packageVersion, ReleaseDate = releaseDate });
            }
            finally
            {
                assemblyVersion = null; packageVersion = null; filesPath = null;
            }
        }
    }
}
