/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, 
 * which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, 
 * which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Mvc.Routing;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Routing;
using System.Runtime.CompilerServices;
using System.Data;
using IO.Swagger.Helpers;
using System.Data.SqlClient;
using static IO.Swagger.Models.Customer;
using System.Runtime.Loader;
using static IO.Swagger.Models.Address;
using System.Linq;
using static IO.Swagger.Models.ContactInfo;
using System.Threading.Tasks;
using System.Net;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CustomerApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves particular address by its id.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">Number of the customer resource.</param>
        /// <param name="addressId">The id of the address resource.</param>
        /// <response code="200">Successful response provides the requested addresses.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If customer or address does not exist for given company, the request responds a 404 (NotFound) status. </response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}/{customerNr}/addresses/{addressId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAddressById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Address), description: "Successful response provides the requested addresses.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If customer or address does not exist for given company, the request responds a 404 (NotFound) status. ")]
        public virtual async Task<IActionResult> GetAddressById([FromRoute][Required] string company, [FromRoute][Required] string customerNr, [FromRoute][Required] string addressId)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr),
                new SqlParameter("@addressId", addressId)
            };
            Address address;
            Dictionary<string, LinkEntry> links;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetAddressById", param);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    links = new Dictionary<string, LinkEntry>()
                    {
                        { "self", new LinkEntry(Url.Action(nameof(GetAddressById), values: new { company, customerNr, addressId})) },
                        { "next-tour", new LinkEntry(Request.Path.ToString()) } //#todo jos ne znam koji endpoint treba da pozovem
                    };
                    address = new Address()
                    {
                        Id = ds.Tables[0].Rows[0]["addressId"].ToString(),
                        Street = ds.Tables[0].Rows[0]["street"].ToString(),
                        StreetNumber = ds.Tables[0].Rows[0]["streetNumber"].ToString(),
                        PostOfficeBox = ds.Tables[0].Rows[0]["postOfficeBox"].ToString(),
                        PostCode = ds.Tables[0].Rows[0]["postCode"].ToString(),
                        City = ds.Tables[0].Rows[0]["city"].ToString(),
                        CountryCode = ds.Tables[0].Rows[0]["countryCode"].ToString(),
                        Country = ds.Tables[0].Rows[0]["country"].ToString(),
                        State = ds.Tables[0].Rows[0]["state"].ToString(),
                        Active = Convert.ToBoolean(ds.Tables[0].Rows[0]["active"]),
                        Primary = Convert.ToBoolean(ds.Tables[0].Rows[0]["primary"]),
                        AddressType = (AddressTypeEnum)Convert.ToInt32(ds.Tables[0].Rows[0]["addressType"]),
                        BuildingCompliment = ds.Tables[0].Rows[0]["buildingCompliment"].ToString(),
                        Description = ds.Tables[0].Rows[0]["description"].ToString(),
                        Links = links
                    };
                    return new ObjectResult(address);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Customer " + customerNr + " not found"
                    }));
            }
            finally
            {
                param = null;
                address = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves invoice and delivery addresses of the customer.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">Number of the customer resource.</param>
        /// <param name="street">Address street</param>
        /// <param name="postCode">Address post code</param>
        /// <param name="city">Address city</param>
        /// <param name="countryCode">Address country code</param>
        /// <param name="buildingCompliment">Address building compliment</param>
        /// <param name="description">Address description</param>
        /// <response code="200">Successful response provides the list of addresses of the customer</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the customer has no addresses or customer does not exist, endpoint responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}/{customerNr}/addresses")]
        [ValidateModelState]
        [SwaggerOperation("GetAddressesOfCustomer")]
        [SwaggerResponse(statusCode: 200, type: typeof(Addresses), description: "Successful response provides the list of addresses of the customer")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the customer has no addresses or customer does not exist, endpoint responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetAddressesOfCustomer([FromRoute][Required] string company, [FromRoute][Required] string customerNr, [FromQuery] string street, [FromQuery] string postCode, [FromQuery] string city, [FromQuery] string countryCode, [FromQuery] string buildingCompliment, [FromQuery] string description)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<Address> addresses = new List<Address>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr),
                new SqlParameter("@street", (object)street  ?? DBNull.Value),
                new SqlParameter("@postCode",  (object)postCode ?? DBNull.Value),
                new SqlParameter("@city",  (object)city ?? DBNull.Value),
                new SqlParameter("@countryCode",  (object)countryCode ?? DBNull.Value),
                new SqlParameter("@buildingCompliment",  (object)buildingCompliment ?? DBNull.Value),
                new SqlParameter("@description",  (object)description ?? DBNull.Value)
            };
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) } };
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetAddressesOfCustomer", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>()
                        {
                            { "self", new LinkEntry(Url.Action(nameof(GetAddressById), values: new { company, customerNr = customerNr, addressId = dr["id"].ToString()})) },
                            { "next-tour", new LinkEntry(Request.Path.ToString()) } //#todo jos ne znam koji endpoint treba da pozovem
                        };
                        Address address = new Address()
                        {
                            Id = dr["id"].ToString(),
                            Street = dr["street"].ToString(),
                            StreetNumber = dr["streetNumber"].ToString(),
                            PostOfficeBox = dr["postOfficeBox"].ToString(),
                            PostCode = dr["postCode"].ToString(),
                            City = dr["city"].ToString(),
                            CountryCode = dr["countryCode"].ToString(),
                            Country = dr["country"].ToString(),
                            State = dr["state"].ToString(),
                            Active = Convert.ToBoolean(dr["active"]),
                            Primary = Convert.ToBoolean(dr["primary"]),
                            AddressType = (AddressTypeEnum)Convert.ToInt32(dr["addressType"]),
                            BuildingCompliment = dr["buildingCompliment"].ToString(),
                            Description = dr["description"].ToString(),
                            Links = link
                        };
                        addresses.Add(address);
                        link = null;
                    }
                    return new ObjectResult(new Addresses() { _Addresses = addresses, Links = links } );
                }
                else
                {
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Customer " + customerNr + " not found"
                    }));
                }
            }
            finally
            {
                param = null;
                addresses = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves creditlimit of given customer.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">The number of the customer.</param>
        /// <response code="200">Successful response if credit limit of customer with the given number could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If customer with given number does not exist, the service responds with a 404 (NotFound) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}/{customerNr}/creditlimit")]
        [ValidateModelState]
        [SwaggerOperation("GetCreditLimit")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreditLimit), description: "Successful response if credit limit of customer with the given number could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If customer with given number does not exist, the service responds with a 404 (NotFound) status.")]
        public virtual async Task<IActionResult> GetCreditLimit([FromRoute][Required] string company, [FromRoute][Required] string customerNr)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr)
            };
            CreditLimit creditLimit;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetCreditLimit", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    creditLimit = new CreditLimit()
                    {
                        AlreadyUsedCredit = Convert.ToDouble(ds.Tables[0].Rows[0]["alreadyUsedCredit"]),
                        AvailableCredit = Convert.ToDouble(ds.Tables[0].Rows[0]["availableCredit"]),
                        AlreadyUsedCreditCashPayment = Convert.ToDouble(ds.Tables[0].Rows[0]["alreadyUsedCreditCashPayment"]),
                        AvailableCreditCashPayment = Convert.ToDouble(ds.Tables[0].Rows[0]["availableCreditCashPayment"])
                    };
                    return new ObjectResult(creditLimit);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Customer " + customerNr + " not found"
                    }));
            }
            finally
            {
                param = null;
                creditLimit = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves customer representation by customer number.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">The number of the customer.</param>
        /// <response code="200">Successful response if customer with the given number could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If customer with given number does not exist, the service responds with a 404 (NotFound) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}/{customerNr}")]
        [ValidateModelState]
        [SwaggerOperation("GetCustomerByNr")]
        [SwaggerResponse(statusCode: 200, type: typeof(Customer), description: "Successful response if customer with the given number could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If customer with given number does not exist, the service responds with a 404 (NotFound) status.")]
        public virtual async Task<IActionResult> GetCustomerByNr([FromRoute][Required] string company, [FromRoute][Required] string customerNr)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", customerNr)
            };
            Customer customer;
            Dictionary<string, LinkEntry> links;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetCustomerByNr", param);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    links = new Dictionary<string, LinkEntry>() {
                                {"self", new LinkEntry(this.Request.Path.ToString())},
                                {"collection/addresses", new LinkEntry(Url.Action(nameof(GetAddressesOfCustomer), values: new{ company, customerNr }))},
                                {"collection/orders", new LinkEntry(Url.Action(nameof(OrderApiController.GetOrdersOfCustomer), "OrderApi" , values: new{ company, customerNr}))},
                                {"collection/prices", new LinkEntry(Url.Action(nameof(ArticleApiController.GetArticlePrices), "ArticleApi", values: new{ company }))},
                                {"collection/availabilities", new LinkEntry(Url.Action(nameof( ArticleApiController.GetAvailabilities), "ArticleApi", values: new{ company }))},
                                {"collection/invoices", new LinkEntry(Url.Action(nameof(InvoicesApiController.GetInvoices), "InvoicesApi" , values: new{ company, customerNr }))},
                                {"collection/creditlimit", new LinkEntry(Url.Action(nameof(GetCreditLimit), values: new{ company, customerNr}))}
                            };
                    customer = new Customer()
                    {
                        Nr = ds.Tables[0].Rows[0]["customerNr"].ToString(),
                        Name = ds.Tables[0].Rows[0]["name"].ToString(),
                        VatNr = ds.Tables[0].Rows[0]["vatNr"].ToString(),
                        DefaultBranchId = ds.Tables[0].Rows[0]["defaultBranchId"].ToString(),
                        Comments = ds.Tables[0].Rows[0]["comments"].ToString(),
                        Language = ds.Tables[0].Rows[0]["language"].ToString(),
                        AddressSalutation = ds.Tables[0].Rows[0]["addressSalutation"].ToString(),
                        BlockedStatus = (BlockedStatusEnum)Convert.ToInt32(ds.Tables[0].Rows[0]["blockedStatus"]),
                        BlockedReason = ds.Tables[0].Rows[0]["blockedReason"].ToString(),
                        Currency = ds.Tables[0].Rows[0]["currency"].ToString(),
                        DirectDelivery = "No",
                        SendMethod = ds.Tables[0].Rows[0]["sendMethod"].ToString(),
                        PaymentType = ds.Tables[0].Rows[0]["paymentType"].ToString(),
                        InvoiceType = ds.Tables[0].Rows[0]["invoiceType"].ToString(),
                        InvoiceTypeDesc = ds.Tables[0].Rows[0]["invoiceTypeDesc"].ToString(),
                        AlreadyUsedCredit = Convert.ToDouble(ds.Tables[0].Rows[0]["alreadyUsedCredit"]),
                        AvailableCredit = Convert.ToDouble(ds.Tables[0].Rows[0]["availableCredit"]),
                        LetterCode = (LetterCodeEnum)Convert.ToInt32(ds.Tables[0].Rows[0]["letterCode"]),
                        SalesOrderPool = ds.Tables[0].Rows[0]["salesOrderPool"].ToString(),
                        SalesGroup = ds.Tables[0].Rows[0]["salesGroup"].ToString(),
                        CostCenter = ds.Tables[0].Rows[0]["costCenter"].ToString(),
                        KuKa = ds.Tables[0].Rows[0]["kuKa"].ToString(),
                        SalesRepPersonalNumber = ds.Tables[0].Rows[0]["salesRepPersonalNumber"].ToString(),
                        TermOfPayment = ds.Tables[0].Rows[0]["termOfPayment"].ToString(),
                        CashDiscount = ds.Tables[0].Rows[0]["cashDiscount"].ToString(),
                        DisposalNumber = ds.Tables[0].Rows[0]["disposalNumber"].ToString(),
                        CollaborationEDI = Convert.ToBoolean(ds.Tables[0].Rows[0]["collaborationEDI"]),
                        InvoiceAccount = ds.Tables[0].Rows[0]["invoiceAccount"].ToString(),
                        GwsDupCustCompleteInvoicing = Convert.ToBoolean(ds.Tables[0].Rows[0]["gwsDupCustCompleteInvoicing"]),
                        GwsInvoiceSumBy = ds.Tables[0].Rows[0]["gwsInvoiceSumBy"].ToString(),
                        SagGwsLimitedTimeDlvTermExpiryDate = Convert.ToDateTime(ds.Tables[0].Rows[0]["sagGwsLimitedTimeDlvTermExpiryDate"]),
                        SagGwsPriceDiscDetailsForNetPricingPackingSlip = Convert.ToBoolean(ds.Tables[0].Rows[0]["sagGwsPriceDiscDetailsForNetPricingPackingSlip"]),
                        SagGwsPrintPricesOnSalesPackingSlip = Convert.ToBoolean(ds.Tables[0].Rows[0]["sagGwsPrintPricesOnSalesPackingSlip"]),
                        SagGwsExcludeFromShipmentConsolidation = Convert.ToBoolean(ds.Tables[0].Rows[0]["sagGwsExcludeFromShipmentConsolidation"]),
                        SagGwsSuppressPrintOfRecommendedPrice = Convert.ToBoolean(ds.Tables[0].Rows[0]["sagGwsSuppressPrintOfRecommendedPrice"]),
                        SagPriceTypeSelectionEnabled = ds.Tables[0].Rows[0]["sagPriceTypeSelectionEnabled"].ToString(),
                        SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation = ds.Tables[0].Rows[0]["sagGwsPriceDiscDetailsForNetPricingCalcPricePresentation"].ToString(),
                        SagSingleCreditNote = "No",
                        GwsInvoiceSortCode = ds.Tables[0].Rows[0]["gwsInvoiceSortCode"].ToString(),
                        GwsDayPeriod = ds.Tables[0].Rows[0]["gwsDayPeriod"].ToString(),
                        CustCollectionLetterCode = ds.Tables[0].Rows[0]["custCollectionLetterCode"].ToString(),
                        SagSpecialBusinessType = "None",
                        SagSpecialBusinessCustomerNo = "",
                        GwsInvoiceAdvancedSummarySetup = ds.Tables[0].Rows[0]["gwsInvoiceAdvancedSummarySetup"].ToString(),
                        Links = links
                    };

                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        List<CustomerGrantedBranchesForOrdering> customerGrantedBranchesForOrderings = new List<CustomerGrantedBranchesForOrdering>();
                        foreach (DataRow dr in ds.Tables[1].Rows)
                        {
                            CustomerGrantedBranchesForOrdering customerGrantedBranchesForOrdering = new CustomerGrantedBranchesForOrdering()
                            {
                                BranchId = dr["branchId"].ToString(),
                                OrderingPriority = Convert.ToInt32(dr["OrderingPriority"]),
                                PaymentMethodAllowed = (CustomerGrantedBranchesForOrdering.PaymentMethodAllowedEnum)Convert.ToInt32(dr["PaymentMethodAllowed"]),
                                ExternalOrderingLocationType = dr["externalOrderingLocationType"].ToString() == "0" ? string.Empty : "Autonet"
                            };

                            customerGrantedBranchesForOrderings.Add(customerGrantedBranchesForOrdering);
                        }
                        customer.CustomerGrantedBranchesForOrdering = customerGrantedBranchesForOrderings;

                        customerGrantedBranchesForOrderings = null;
                    }

                    customer.CustApprovalTypes = new List<CustApprovalTypes>();

                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        List<ContactInfo> contactInfos = new List<ContactInfo>();
                        foreach (DataRow dr in ds.Tables[2].Rows)
                        {
                            ContactInfo contactInfo = new ContactInfo()
                            {
                                ContactValue = dr["contactValue"].ToString(),
                                ContactDescription = dr["contactDescription"].ToString(),
                                ContactType = (ContactTypeEnum)Convert.ToInt32(dr["contactType"]),
                                IsPrimary = Convert.ToBoolean(dr["isPrimary"])
                            };
                            contactInfos.Add(contactInfo);
                        }
                        customer.Contacts = contactInfos;
                        contactInfos = null;
                    }
                    return new ObjectResult(customer);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Customer " + customerNr + " not found"
                    }));
            }
            finally
            {
                param = null;
                customer = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves courier services by company and optionally customerNr, addressId</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">Number of the customer resource.</param>
        /// <param name="addressId">The id of the address resource.</param>
        /// <response code="200">Successful response provides the requested courier services.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If customer or address does not exist for given company, the request responds a 404 (NotFound) status. </response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}/courierServices")]
        [ValidateModelState]
        [SwaggerOperation("GetCourierServices")]
        [SwaggerResponse(statusCode: 200, type: typeof(CourierServices), description: "Successful response provides the requested courier services.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If customer or address does not exist for given company, the request responds a 404 (NotFound) status.")]
        public virtual async Task<IActionResult> GetCourierServices([FromRoute][Required] string company, [FromQuery] string customerNr, [FromQuery] string addressId)
        {     
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", (object)customerNr ?? DBNull.Value),
                new SqlParameter("@addressId", (object)addressId ?? DBNull.Value)
            };
            List<CourierService> courierServices = new List<CourierService>();

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetCourierServices", param);                

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        CourierService courierService = new CourierService()
                        {
                            CourierServiceCode = dr["courierServiceCode"].ToString(),
                            Description = dr["description"].ToString()
                        };
                        courierServices.Add(courierService);
                    }
                    return new ObjectResult(new CourierServices() { _CourierServices = courierServices });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Not found courier services in filter"
                    }));
            }
            finally
            {
                param = null;
                courierServices = null;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves tours along with accompanying information by company and optionally customerNr</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="customerNr">Number of the customer resource.</param>
        /// <response code="200">Successful response provides the requested tours.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If customer or address does not exist for given company, the request responds a 404 (NotFound) status. </response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}/tours")]
        [ValidateModelState]
        [SwaggerOperation("GetTours")]
        [SwaggerResponse(statusCode: 200, type: typeof(CustomerTours), description: "Successful response provides the requested customer tours.")]                              
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If customer or address does not exist for given company, the request responds a 404 (NotFound) status.")]
        public virtual async Task<IActionResult> GetTours([FromRoute][Required] string company, [FromQuery] string customerNr)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", (object)customerNr ?? DBNull.Value)
            };
            List<CustomerTour> customerTours = new List<CustomerTour>();

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetCustomerTours", param);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        CustomerTour tour = new CustomerTour()
                        {
                            CustomerNumber = dr["customerNumber"].ToString(),
                            BranchId = dr["branchId"].ToString(),
                            CustomerTourName = dr["tourName"].ToString(),
                            CutOffMinutes = Convert.ToInt32(dr["cutOffMinutes"]),
                            TourDays = dr["tourDays"].ToString(),
                            TourDepartureTime = dr["tourDepartureTime"].ToString(),
                            SpecialUse = dr["specialUse"] == DBNull.Value ? null : dr["specialUse"].ToString(),
                            LocationId = dr["locationId"] == DBNull.Value ? null : dr["locationId"].ToString()
                        };
                        customerTours.Add(tour);
                    }
                    return new ObjectResult(new CustomerTours() { Tours = customerTours });
                }
                else
                {
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "No customer tours found"
                    }));
                }
            }
            finally
            {
                param = null;
                customerTours = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves customers representation by company.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <response code="200">Successful response if customers could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If customers with given company does not exist, the service responds with a 404 (NotFound) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/customers/{company}")]
        [ValidateModelState]
        [SwaggerOperation("GetCustomers")]
        [SwaggerResponse(statusCode: 200, type: typeof(Customers), description: "Successful response if customers could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If customers with given company does not exist, the service responds with a 404 (NotFound) status.")]
        public virtual async Task<IActionResult> GetCustomers([FromRoute][Required] string company)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company)             
            };
            List<CustomerDetails> customersDetails;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetCustomers", param);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    customersDetails = new List<CustomerDetails>();

                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        CustomerDetails customerDetails = new CustomerDetails()
                        {
                            NameAlias = dr["nameAlias"].ToString(),
                            CustomerAccountNr = dr["customerAccountNr"].ToString(),
                            PrimaryFax = dr["primaryFax"].ToString(),
                            PrimaryPhone = dr["primaryPhone"].ToString(),
                            PrimaryPhoneCC = dr["primaryPhoneCC"].ToString(),
                            PrimaryEmail = dr["primaryEmail"].ToString(),
                            CustomerName = dr["customerName"].ToString(),
                            Addresses = new List<CustomerDetailsAddress>(),
                            Contacts = new List<ContactInfo>()
                        };

                        if (ds.Tables[1].Select("customerAccountNr = '" + customerDetails.CustomerAccountNr + "'").Any())
                        {
                            List<CustomerDetailsAddress> addresses = new List<CustomerDetailsAddress>();
                            foreach (DataRow drA in ds.Tables[1].Select("customerAccountNr = '" + customerDetails.CustomerAccountNr + "'"))
                            {
                                CustomerDetailsAddress address = new CustomerDetailsAddress()
                                {
                                    IdLocation = drA["idLocation"].ToString(),
                                    AddressDesc = drA["addressDesc"].ToString(),
                                    AddressType = (CustomerDetailsAddress.AddressTypeEnum)Convert.ToInt32(drA["addressType"]),
                                    IsPrimary = Convert.ToBoolean(drA["isPrimary"]),
                                    AddressStreet = drA["addressStreet"].ToString(),
                                    City = drA["city"].ToString(),
                                    Zip = drA["zip"].ToString(),
                                    Sort = Convert.ToInt32(drA["sort"]),
                                };
                                addresses.Add(address);
                            }
                            customerDetails.Addresses = addresses;
                            addresses = null;
                        }

                        //if (ds.Tables[2].Select("customerAccountNr = '" + customerDetails.CustomerAccountNr + "'").Any())
                        //{
                        //    List<ContactInfo> contactInfos = new List<ContactInfo>();
                        //    foreach (DataRow drC in ds.Tables[2].Select("customerAccountNr = '" + customerDetails.CustomerAccountNr + "'"))
                        //    {
                        //        ContactInfo contactInfo = new ContactInfo()
                        //        {
                        //            ContactValue = drC["contactValue"].ToString(),
                        //            ContactDescription = drC["contactDescription"].ToString(),
                        //            ContactType = (ContactTypeEnum)Convert.ToInt32(drC["contactType"]),
                        //            IsPrimary = Convert.ToBoolean(drC["isPrimary"])
                        //        };
                        //        contactInfos.Add(contactInfo);
                        //    }
                        //    customerDetails.Contacts = contactInfos;
                        //}

                        customersDetails.Add(customerDetails);
                    }
                    return new ObjectResult(new Customers() { _Customers = customersDetails });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Customers not found"
                    }));
            }
            finally
            {
                param = null;
                customersDetails = null;
            }
        }


    }
}

