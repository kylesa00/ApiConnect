/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Data;
using System.Data.SqlClient;
using IO.Swagger.Helpers;
using System.Linq;
using static IO.Swagger.Models.ContactInfo;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EmployeeApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves employee representation by employee personal number.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="personalNr">The personal number of the employee.</param>
        /// <response code="200">Successful response if employee with the given number could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If employee with given number does not exist, the service responds with a 404 (NotFound) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/employees/{company}/{personalNr}")]
        [ValidateModelState]
        [SwaggerOperation("GetEmployeeByNr")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employee), description: "Successful response if employee with the given number could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If employee with given number does not exist, the service responds with a 404 (NotFound) status.")]
        [ApiExplorerSettings(IgnoreApi = true)]
        public virtual async Task<IActionResult> GetEmployeeByNr([FromRoute][Required] string company, [FromRoute][Required] string personalNr)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            Employee employee = new Employee();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@personalNr", personalNr)
            };

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetEmployeeByNr", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (string.IsNullOrEmpty(employee.PersonalNumber))
                        {
                            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() {{"self", new LinkEntry(Request.Path.ToString()) }};
                            links = UrlTool.ParseLinks(links);
                            employee = new Employee()
                            {
                                PersonalNumber = dr["personalNr"].ToString(),
                                SearchName = dr["searchName"].ToString(),
                                Name = dr["name"].ToString(),
                                Contacts = new List<ContactInfo>() { new ContactInfo() {
                                                                        ContactValue = dr["contactValue"].ToString(),
                                                                        ContactDescription = dr["contactDescription"].ToString(),
                                                                        ContactType = (ContactTypeEnum)Convert.ToInt32(dr["contactType"]),
                                                                        IsPrimary = Convert.ToBoolean(dr["isPrimary"])
                                }
                                },
                                Links = links

                            };
                            links = null;
                        }
                        else
                        {
                            employee.Contacts.Add(new ContactInfo()
                            {
                                ContactValue = dr["contactValue"].ToString(),
                                ContactDescription = dr["contactDescription"].ToString(),
                                ContactType = (ContactTypeEnum)Convert.ToInt32(dr["contactType"]),
                                IsPrimary = Convert.ToBoolean(dr["isPrimary"])
                            });
                        }
                    }
                    return new ObjectResult(employee);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Employee " + personalNr + " not found"
                    }));
            }
            finally
            {
                param = null;
                employee = null;
            }
        }
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves employee representation.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="searchName">The search name of the employee.</param>
        /// <param name="name">The name of the employee.</param>
        /// <param name="telephoneNr">The telephone number of the employee.</param>
        /// <param name="emailAddress">The email address number of the employee.</param>
        /// <response code="200">Successful response if employee could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the queried employee does not exist, the service responds with a 404 (NotFound) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/employees/{company}")]
        [ValidateModelState]
        [SwaggerOperation("GetEmployees")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employees), description: "Successful response if employee could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the queried employee does not exist, the service responds with a 404 (NotFound) status.")]
        public virtual async Task<IActionResult> GetEmployees([FromRoute][Required] string company, [FromQuery] string searchName, [FromQuery] string name, [FromQuery] string telephoneNr, [FromQuery] string emailAddress)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<Employee> employees = new List<Employee>();
            Employee employee = new Employee();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@searchName", (object)searchName ?? DBNull.Value),
                new SqlParameter("@name", (object)name ?? DBNull.Value),
                new SqlParameter("@telephoneNr", (object)telephoneNr ?? DBNull.Value),
                new SqlParameter("@emailAddress", (object)emailAddress ?? DBNull.Value)
            };
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) } };
            links = UrlTool.ParseLinks(links);

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetEmployees", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (!employees.Any(e => e.PersonalNumber == dr["personalNr"].ToString()))
                        {
                            Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                                { "self", new LinkEntry(Url.Action(nameof(GetEmployeeByNr), values: new { company, personalNr = dr["personalNr"].ToString() })) }};
                            link = UrlTool.ParseLinks(link);
                            employee = new Employee()
                            {
                                PersonalNumber = dr["personalNr"].ToString(),
                                SearchName = dr["searchName"].ToString(),
                                Name = dr["name"].ToString(),
                                Contacts = new List<ContactInfo>() { new ContactInfo() {
                                                                        ContactValue = dr["contactValue"].ToString(),
                                                                        ContactDescription = dr["contactDescription"].ToString(),
                                                                        ContactType = (ContactTypeEnum)Convert.ToInt32(dr["contactType"]),
                                                                        IsPrimary = Convert.ToBoolean(dr["isPrimary"])
                            } },
                                Links = link
                            };
                            employees.Add(employee);
                            link = null;
                        }
                        else
                        {
                            employees.Find(e => e.PersonalNumber == employee.PersonalNumber).Contacts.Add(new ContactInfo()
                            {
                                ContactValue = dr["contactValue"].ToString(),
                                ContactDescription = dr["contactDescription"].ToString(),
                                ContactType = (ContactTypeEnum)Convert.ToInt32(dr["contactType"]),
                                IsPrimary = Convert.ToBoolean(dr["isPrimary"])
                            });
                        }
                    }
                    return new ObjectResult(new Employees()
                    {
                        _Employees = employees,
                        Links = links
                    });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Employees not found"
                    }));
            }
            finally
            {
                param = null;
                employee = null;
                employees = null;
                links = null;
            }
        }
    }
}
