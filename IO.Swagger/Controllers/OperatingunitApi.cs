/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [ApiExplorerSettings(IgnoreApi = true)]
    public class OperatingunitApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a warehouse which is given by its id</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="operatingUnitNr">Operating unit number</param>
        /// <response code="200">Successful response returns the operation unit entity </response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/operatingunits/{company}/{operatingUnitNr}")]
        [ValidateModelState]
        [SwaggerOperation("GetOperatingUnit")]
        [SwaggerResponse(statusCode: 200, type: typeof(OperatingUnit), description: "Successful response returns the operation unit entity ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual IActionResult GetOperatingUnit([FromRoute][Required]string company, [FromRoute][Required]string operatingUnitNr)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OperatingUnit));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorInfo));

            string exampleJson = null;
            exampleJson = "{\n  \"address\" : {\n    \"buildingCompliment\" : \"buildingCompliment\",\n    \"country\" : \"country\",\n    \"streetNumber\" : \"streetNumber\",\n    \"city\" : \"city\",\n    \"_links\" : {\n      \"key\" : {\n        \"href\" : \"href\"\n      }\n    },\n    \"addressType\" : \"DELIVERY\",\n    \"active\" : true,\n    \"description\" : \"description\",\n    \"postOfficeBox\" : \"postOfficeBox\",\n    \"street\" : \"street\",\n    \"countryCode\" : \"countryCode\",\n    \"postCode\" : \"postCode\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"primary\" : false\n  },\n  \"nr\" : \"nr\",\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"contacts\" : [ {\n    \"contactDescription\" : \"contactDescription\",\n    \"contactValue\" : \"contactValue\",\n    \"isPrimary\" : true,\n    \"contactType\" : \"Phone\"\n  }, {\n    \"contactDescription\" : \"contactDescription\",\n    \"contactValue\" : \"contactValue\",\n    \"isPrimary\" : true,\n    \"contactType\" : \"Phone\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OperatingUnit>(exampleJson)
            : default(OperatingUnit);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
