/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [ApiExplorerSettings(IgnoreApi = true)]
    public class ReturnApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Provides functionality to create a return order and post it.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g.&#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="returnOrderRequest">The request containing the return order to be created</param>
        /// <response code="200">Successful transfer of return order results</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/orders/{company}/create-return-order")]
        [ValidateModelState]
        [SwaggerOperation("CreateReturnOrder")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReturnOrder), description: "Successful transfer of return order results")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.")]
        public virtual IActionResult CreateReturnOrder([FromRoute][Required]string company, [FromBody]ReturnOrderRequest returnOrderRequest)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReturnOrder));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorInfo));

            string exampleJson = null;
            exampleJson = "{\n  \"returnOrderUrl\" : \"returnOrderUrl\",\n  \"returnOrderPositionList\" : [ {\n    \"orderUrl\" : \"orderUrl\",\n    \"quarantineOrder\" : true,\n    \"orderNr\" : \"orderNr\"\n  }, {\n    \"orderUrl\" : \"orderUrl\",\n    \"quarantineOrder\" : true,\n    \"orderNr\" : \"orderNr\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReturnOrder>(exampleJson)
            : default(ReturnOrder);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the representation of a list of transaction references for a given parameter</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="reference">The value of this parameter can refer to orderNr or deliveryNoteNr or invoiceNr or transaction Id</param>
        /// <response code="200">Successful response returns the entire list of transaction references for given search criteria</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the transaction references given by the search criteria do not exist, the service endpoint responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/transactions/{company}")]
        [ValidateModelState]
        [SwaggerOperation("GetTransactionReferences")]
        [SwaggerResponse(statusCode: 200, type: typeof(TransactionReferences), description: "Successful response returns the entire list of transaction references for given search criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the transaction references given by the search criteria do not exist, the service endpoint responds with a 404 (Not Found) status.")]
        public virtual IActionResult GetTransactionReferences([FromRoute][Required]string company, [FromQuery][Required()]string reference)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TransactionReferences));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorInfo));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorInfo));

            string exampleJson = null;
            exampleJson = "{\n  \"transactions\" : [ {\n    \"unitOfMeasurement\" : \"unitOfMeasurement\",\n    \"branchId\" : \"branchId\",\n    \"articleName\" : \"articleName\",\n    \"customerNr\" : \"customerNr\",\n    \"quantity\" : 0.8008281904610115,\n    \"returnQty\" : 6.027456183070403,\n    \"transId\" : \"transId\",\n    \"articleId\" : \"articleId\",\n    \"articleKeyword\" : \"articleKeyword\",\n    \"customerName\" : \"customerName\",\n    \"paymentType\" : \"paymentType\",\n    \"cashDiscount\" : \"cashDiscount\",\n    \"orderNr\" : \"orderNr\",\n    \"sourcingType\" : \"sourcingType\",\n    \"termOfPayment\" : \"termOfPayment\"\n  }, {\n    \"unitOfMeasurement\" : \"unitOfMeasurement\",\n    \"branchId\" : \"branchId\",\n    \"articleName\" : \"articleName\",\n    \"customerNr\" : \"customerNr\",\n    \"quantity\" : 0.8008281904610115,\n    \"returnQty\" : 6.027456183070403,\n    \"transId\" : \"transId\",\n    \"articleId\" : \"articleId\",\n    \"articleKeyword\" : \"articleKeyword\",\n    \"customerName\" : \"customerName\",\n    \"paymentType\" : \"paymentType\",\n    \"cashDiscount\" : \"cashDiscount\",\n    \"orderNr\" : \"orderNr\",\n    \"sourcingType\" : \"sourcingType\",\n    \"termOfPayment\" : \"termOfPayment\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TransactionReferences>(exampleJson)
            : default(TransactionReferences);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
