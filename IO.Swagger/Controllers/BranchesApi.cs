/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Data.SqlClient;
using IO.Swagger.Helpers;
using System.Data;
using System.Threading.Tasks;
using Google.Protobuf.Collections;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BranchesApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a warehouse which is given by its id.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="branchId">Path parameter of id of requested warehouse.</param>
        /// <response code="200">Successful response provides the requested warehouse information.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the branch with given id does not exist, the service responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/branches/{company}/{branchId}")]
        [ValidateModelState]
        [SwaggerOperation("GetBranchById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Branch), description: "Successful response provides the requested warehouse information.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the branch with given id does not exist, the service responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetBranchById([FromRoute][Required] string company, [FromRoute][Required] string branchId)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@branchId", branchId)
            };
            Branch branch;
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { {"self", new LinkEntry(Request.Path.ToString()) }};
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetBranchById", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    branch = new Branch()
                    {
                        BranchId = ds.Tables[0].Rows[0]["branchId"].ToString(),
                        BranchName = ds.Tables[0].Rows[0]["branchName"].ToString(),
                        PhoneNr = ds.Tables[0].Rows[0]["phoneNr"].ToString(),
                        Links = links
                    };
                    return new ObjectResult(branch);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Branch " + branchId + " not found"
                    }));
            }
            finally
            {
                param = null;
                branch = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves warehouses information</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <response code="200">Successful response if branches could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/branches/{company}")]
        [ValidateModelState]
        [SwaggerOperation("GetBranches")]
        [SwaggerResponse(statusCode: 200, type: typeof(Branches), description: "Successful response if branches could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        public virtual async Task<IActionResult> GetBranches([FromRoute][Required] string company)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<Branch> branches = new List<Branch>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company)
            };
            Dictionary<string, LinkEntry> links;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetBranches", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        links = new Dictionary<string, LinkEntry>() {
                            { "self", new LinkEntry(Url.Action(nameof(GetBranchById), values: new { company, branchId = dr["branchId"].ToString() })) }
                        };
                        Branch branch = new Branch()
                        {
                            BranchId = dr["branchId"].ToString(),
                            BranchName = dr["branchName"].ToString(),
                            PhoneNr = dr["phoneNr"].ToString(),
                            Links = links
                        };

                        branches.Add(branch);
                    }
                    return new ObjectResult(new Branches() { _Branches = branches, Links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString()) } } });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Branches not found"
                    }));
            }
            finally
            {
                param = null;
                branches = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves next working day of a specific warehouse</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;</param>
        /// <param name="nextWorkingDateRequest"></param>
        /// <response code="200">Successful response if next working date could be retreived in the context of the company.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/branches/{company}/next-working-date")]
        [ValidateModelState]
        [SwaggerOperation("GetNextWorkingDate")]   
        [SwaggerResponse(statusCode: 200, type: typeof(NextWorkingDate), description: "Successful response if next working date could be retreived in the context of the company.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [ApiExplorerSettings(IgnoreApi = true)]
        public virtual async Task<IActionResult> GetNextWorkingDate([FromRoute][Required] string company, [FromBody] NextWorkingDateRequest nextWorkingDateRequest)
        {
           if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@branchId", nextWorkingDateRequest.BranchId),
                new SqlParameter("@date", nextWorkingDateRequest.Date)
            };
            Dictionary<string, LinkEntry> links;
            try
            {
                DateTime nextWorkingDate = Convert.ToDateTime(await Dal.GetDataAsync("GetNextWorkingDate", param));

                links = new Dictionary<string, LinkEntry>() {
                        { "branch", new LinkEntry(Url.Action(nameof(GetBranchById), values: new { company, branchId = nextWorkingDateRequest.BranchId })) } };
                return new ObjectResult(new NextWorkingDate()
                {
                    _NextWorkingDate = nextWorkingDate,
                    Links = links
                });
            }
            finally
            {
                param = null;         
                links = null;
            }
        }
    }
}
