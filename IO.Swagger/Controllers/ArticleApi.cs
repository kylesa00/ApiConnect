/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Data.SqlClient;
using IO.Swagger.Helpers;
using System.Linq;
using System.Data;
using System.Threading.Tasks;
using Google.Protobuf.Collections;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArticleApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a list of articles, which are given by their ids.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleIds">Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.</param>
        /// <param name="acceptLanguage"></param>
        /// <response code="200">Successful response provides a list of article representations.</response>
        /// <response code="400">If the provided company name is invalid, the list of article identifier is empty,    
        /// or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}")]
        [ValidateModelState]
        [SwaggerOperation("GetArticles")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleInfoResponse), description: "Successful response provides a list of article representations.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        public virtual async Task<IActionResult> GetArticles([FromRoute][Required] string company, [FromQuery][Required()] string articleIds, [FromHeader] string acceptLanguage)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<ArticleInfo> articles = new List<ArticleInfo>();
            string articleId = string.Empty;
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@articleIds", articleIds),
                new SqlParameter("@acceptLanguage", (object)acceptLanguage ?? DBNull.Value)
            };
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) } };
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticles", param);
                if (ds.Tables[0].Rows.Count > 0)
                {

                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                                { "self", new LinkEntry(Url.Action(nameof(GetArticleById), values: new { company, articleId = dr["id"].ToString(), acceptLanguage})) },
                                { "collection/stock", new LinkEntry(Url.Action(nameof(GetArticlesStocks), values: new { company, articleId = dr["id"].ToString() })) }
                            };
                        Article article = new Article()
                        {
                            Id = dr["id"].ToString(),
                            Description = dr["description"].ToString(),
                            Number = dr["number"].ToString(),
                            Keyword = dr["keyword"].ToString(),
                            SalesQuantity = Convert.ToDouble(dr["salesQuantity"]),
                            DepotArticleId = dr["depotArticleId"].ToString(),
                            RecycleArticleId = dr["recycleArticleId"].ToString(),
                            VocArticleId = dr["vocArticleId"].ToString(),
                            VrgArticleId = dr["vrgArticleId"].ToString(),
                            ArticleLock = Convert.ToBoolean(dr["articleLock"]),
                            FitmentLock = Convert.ToBoolean(dr["fitmentLock"]),
                            Links = link
                        };
                        articleId = dr["id"].ToString();
                        articles.Add(new ArticleInfo() { Article = article, ArticleId = articleId });
                        link = null;
                    }
                    return new ObjectResult(
                            new ArticleInfoResponse()
                            {
                                Articles = articles,
                                Links = links
                            });
                }
                else
                    return StatusCode(400, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                articleIds = null;
                links = null;

            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of an article which is given by its id.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleId">Path parameter of id of requested article.</param>
        /// <param name="acceptLanguage"></param>
        /// <response code="200">Successful response provides the requested article information.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status.</response>
        /// <response code="404">If the article with given id does not exist, the service responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/{articleId}")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Article), description: "Successful response provides the requested article information.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the article with given id does not exist, the service responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetArticleById([FromRoute][Required] string company, [FromRoute][Required] string articleId, [FromHeader] string acceptLanguage)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            Article article = null;
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@articleId", articleId),
                new SqlParameter("@acceptLanguage", (object)acceptLanguage ?? DBNull.Value)
            };
            Dictionary<string, LinkEntry> links;
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticleById", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    links = new Dictionary<string, LinkEntry>() {
                        { "self", new LinkEntry(Request.Path.ToString())},
                        { "collection/stock", new LinkEntry(Url.Action(nameof(GetArticlesStocks), values: new { company, articleId = ds.Tables[0].Rows[0]["id"].ToString() })) } };
                    article = new Article()
                    {
                        Id = ds.Tables[0].Rows[0]["id"].ToString(),
                        Description = ds.Tables[0].Rows[0]["description"].ToString(),
                        Number = ds.Tables[0].Rows[0]["number"].ToString(),
                        Keyword = ds.Tables[0].Rows[0]["keyword"].ToString(),
                        SalesQuantity = Convert.ToDouble(ds.Tables[0].Rows[0]["salesQuantity"]),
                        DepotArticleId = ds.Tables[0].Rows[0]["depotArticleId"].ToString(),
                        RecycleArticleId = ds.Tables[0].Rows[0]["recycleArticleId"].ToString(),
                        VocArticleId = ds.Tables[0].Rows[0]["vocArticleId"].ToString(),
                        VrgArticleId = ds.Tables[0].Rows[0]["vrgArticleId"].ToString(),
                        ArticleLock = Convert.ToBoolean(ds.Tables[0].Rows[0]["articleLock"]),
                        FitmentLock = Convert.ToBoolean(ds.Tables[0].Rows[0]["fitmentLock"]),
                        Links = links
                    };
                    return new ObjectResult(article);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Article " + articleId + " not found"
                    }));
            }
            finally
            {
                param = null;
                article = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a list of article stocks, which are given by their ids.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleIds">Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.</param>
        /// <param name="branchId">Query parameter containing identifier of a branch.</param>
        /// <response code="200">Successful response provides a list of article stocks representations.</response>
        /// <response code="400">If the provided company name is invalid, the list of article identifier is empty, 
        /// or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/stocks")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleStocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleStockResponse), description: "Successful response provides a list of article stocks representations.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.")]
        public virtual async Task<IActionResult> GetArticleStocks([FromRoute][Required] string company, [FromQuery][Required()] string articleIds, [FromQuery] string branchId)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<ArticleStockInfo> articleStockInfos = new List<ArticleStockInfo>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@articleIds", articleIds),
                new SqlParameter("@branchId", (object)branchId ?? DBNull.Value)
            };
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) } };

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticleStocks", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                            { "self", new LinkEntry(Url.Action(nameof(GetArticleById), values: new { company, articleId = dr["articleId"].ToString()}))} };
                        ArticleStockInfo articleStock = new ArticleStockInfo()
                        {
                            ArticleId = dr["articleId"].ToString(),
                            Stock = new ArticleStock()
                            {
                                Stock = Convert.ToDouble(dr["stock"]),
                                BranchId = dr["branchId"].ToString(),
                                Links = link
                            }
                        };
                        articleStockInfos.Add(articleStock);
                        link = null;
                    }
                    return new ObjectResult(new ArticleStockResponse()
                    {
                        ArticleStock = articleStockInfos,
                        Links = links
                    });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                articleStockInfos = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a list of article stocks, which are given by their ids.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleIds">Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.</param>
        /// <param name="branchId">Query parameter containing identifier of a branch.</param>
        /// <response code="200">Successful response provides a list of article stocks representations.</response>
        /// <response code="400">If the provided company name is invalid, the list of article identifier is empty, or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status.            </response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/stocks/articleIds")]
        [ValidateModelState]
        [SwaggerOperation("GetArticlesStocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleStockResponse), description: "Successful response provides a list of article stocks representations.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.")]
        public virtual async Task<IActionResult> GetArticlesStocks([FromRoute][Required] string company, [FromQuery][Required()] string articleIds, [FromQuery] string branchId)
        {
            return await GetArticleStocks(company, articleIds, branchId ?? null);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the quantity on stock of a certain article which is given by its id.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleId">Path parameter of id of requested article.</param>
        /// <param name="branchId">Query parameter containing identifier of a branch.</param>
        /// <response code="200">Successful response returns the quantity on stock.</response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.</response>
        /// <response code="404">If the article with given id does not exist, the service responds with a 404 (Not Found) status.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/{articleId}/stock")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleStockById")]
        [SwaggerResponse(statusCode: 200, type: typeof(double?), description: "Successful response returns the quantity on stock.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorInfo), description: "If the article with given id does not exist, the service responds with a 404 (Not Found) status.")]
        public virtual async Task<IActionResult> GetArticleStockById([FromRoute][Required] string company, [FromRoute][Required] string articleId, [FromQuery] string branchId)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<ArticleStockInfo> articleStockInfos = new List<ArticleStockInfo>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@articleId", articleId),
                new SqlParameter("@branchId", (object)branchId ?? DBNull.Value)
            };
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) } };
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticleStockById", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                            { "self", new LinkEntry(Url.Action(nameof(GetArticleById), values: new { company, articleId }))}};
                        ArticleStockInfo articleStock = new ArticleStockInfo()
                        {
                            ArticleId = articleId,
                            Stock = new ArticleStock()
                            {
                                Stock = Convert.ToDouble(dr["stock"]),
                                BranchId = dr["branchId"].ToString(),
                                Links = link
                            }
                        };
                        articleStockInfos.Add(articleStock);
                        link = null;
                    }
                    return new ObjectResult(new ArticleStockResponse()
                    {
                        ArticleStock = articleStockInfos,
                        Links = links
                    });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Article " + articleId + " not found"
                    }));
            }
            finally
            {
                param = null;
                articleStockInfos = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves representation of a list of articles sum of stocks for the requested country, which are given by their ids.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleIds">Query parameter containing comma-separated list of identifiers of articles. The article identifiers must be positive integer values consisting of max 10 digits.</param>
        /// <response code="200">Successful response provides a list of article stocks sum representations.</response>
        /// <response code="400">If the provided company name is invalid, the list of article identifier is empty, 
        /// or any article identifier does not conform to the identified rules, then the service responds with a 400 (Bad Request) status.            </response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/stocks/sum")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleStocksSum")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleStockSumResponse), description: "Successful response provides a list of article stocks sum representations.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.")]
        public virtual async Task<IActionResult> GetArticleStocksSum([FromRoute][Required] string company, [FromQuery][Required()] string articleIds)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<ArticleStockSumInfo> articleStockSumInfos = new List<ArticleStockSumInfo>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@articleIds", articleIds)
            };
            Dictionary<string, LinkEntry> links = new Dictionary<string, LinkEntry>() { { "self", new LinkEntry(Request.Path.ToString() + Request.QueryString.ToString()) } };
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticleStocksSum", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Dictionary<string, LinkEntry> link = new Dictionary<string, LinkEntry>() {
                                { "self", new LinkEntry(Url.Action(nameof(GetArticleById), values: new { company, articleId = dr["articleId"].ToString()}))} };
                        ArticleStockSumInfo articleStockSumInfo = new ArticleStockSumInfo()
                        {

                            ArticleId = dr["articleId"].ToString(),
                            StockSum = new ArticleStockSum()
                            {
                                StockSum = Convert.ToDouble(dr["stockSum"]),
                                Links = link
                            }
                        };
                        articleStockSumInfos.Add(articleStockSumInfo);
                        link = null;
                    }
                    return new ObjectResult(new ArticleStockSumResponse()
                    {
                        ArticleStockSum = articleStockSumInfos,
                        Links = links
                    });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                articleStockSumInfos = null;
                links = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests vendor information for a list of articles</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="articleIds">Query parameter containing a list of identifiers of comma-seperated articles </param>
        /// <response code="200"></response>
        /// <response code="400">If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), 
        /// but responds  with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpGet]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/vendors")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleVendors")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleVendors), description: "")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorInfo), description: "If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object.")]
        public virtual async Task<IActionResult> GetArticleVendors([FromRoute][Required] string company, [FromQuery][Required()] string articleIds)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            List<ArticleVendor> articleVendors = new List<ArticleVendor>();
            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@articleIds", articleIds)
            };
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticleVendors", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        ArticleVendor articleVendor = new ArticleVendor()
                        {
                            VendorId = dr["vendorId"].ToString(),
                            VendorName = dr["vendorName"].ToString(),
                            LeadTime = dr["leadTime"].ToString(),
                            ArticleId = dr["articleId"].ToString(),
                            ExternalArticleId = dr["externalArticleId"].ToString(),
                            EPriority = 9,
                            DirectDelivery = "No",
                            Stopped = "No"
                        };
                        articleVendors.Add(articleVendor);
                    }
                    return new ObjectResult(new ArticleVendors { Vendors = articleVendors });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                articleVendors = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests stock information for a list of articles from SAG vendors</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="vendorId">The vendorID to which the request will be sent</param>
        /// <param name="vendorStockRequest"></param>
        /// <response code="200"></response>
        /// <response code="400">If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds  with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/{vendorId}/stocks")]
        [ValidateModelState]
        [SwaggerOperation("GetVendorStocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(VendorStocks), description: "")]
        public virtual async Task<IActionResult> GetVendorStocks([FromRoute][Required] string company, [FromRoute][Required] string vendorId, [FromBody] VendorStockRequest vendorStockRequest)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("vendorArticleId", typeof(string));
            dt.Columns.Add("quantity", typeof(double));

            foreach (VendorStockRequestItem vendorStockRequestItem in vendorStockRequest.Stocks)
            {
                dt.Rows.Add(vendorStockRequestItem.VendorArticleId, vendorStockRequestItem.Quantity);
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@vendorId", vendorId),
                new SqlParameter("@branchId", vendorStockRequest.BranchId),
                new SqlParameter("@vendorStockRequest", dt)
                {
                    TypeName = "dbo.tyVendorStockRequest"
                }
            };
            VendorStocks vendorStocks = new VendorStocks();
            try
            {
                DataSet ds = await Dal.GetDataAsync("GetVendorStocks", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (string.IsNullOrEmpty(vendorStocks.DeliveryDate.ToString()))
                        {
                            vendorStocks = new VendorStocks()
                            {
                                Stocks = new List<VendorStock>() {
                                new VendorStock() {
                                    VendorArticleId = dr["vendorArticleId"].ToString(),
                                    Quantity = Convert.ToDouble(dr["quantity"])
                                } },
                                DeliveryDate = Convert.ToDateTime(dr["deliveryDate"]),
                                CutoffTime = Convert.ToDateTime(dr["cutoffTime"])
                            };
                        }
                        else
                        {
                            vendorStocks.Stocks.Add(new VendorStock()
                            {
                                VendorArticleId = dr["vendorArticleId"].ToString(),
                                Quantity = Convert.ToDouble(dr["quantity"])
                            });
                        }
                    }
                    return new ObjectResult(vendorStocks);
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Vendor " + vendorId + " not found"
                    }));
            }
            finally
            {
                param = null;
                vendorStocks = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests prices of a list of articles from ERP system.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="priceRequest">The request contains a list of items, which contain articles with quantities.</param>
        /// <response code="200"></response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/prices")]
        [ValidateModelState]
        [SwaggerOperation("GetArticlePrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(Prices), description: "")]
        public virtual async Task<IActionResult> GetArticlePrices([FromRoute][Required] string company, [FromBody] PriceRequest priceRequest)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("articleId", typeof(string));
            dt.Columns.Add("quantity", typeof(double));
            dt.Columns.Add("brandId", typeof(int));

            foreach (PriceRequestItem priceRequestItem in priceRequest.Items)
            {
                dt.Rows.Add(priceRequestItem.ArticleId, priceRequestItem.Quantity, priceRequestItem.BrandId);
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", priceRequest.CustomerNr),
                new SqlParameter("@calculateAssortedQtyDisc", (object)priceRequest.CalculateAssortedQtyDisc ?? DBNull.Value),
                new SqlParameter("@priceRequest", dt)
                {
                    TypeName = "dbo.tyPriceRequest"
                }
            };
            List<Price> prices = new List<Price>();
            Price price = new Price();

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticlePrices", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (!prices.Any(e => e.ArticleId == dr["articleId"].ToString()))
                        {
                            price = new Price()
                            {
                                ArticleId = dr["articleId"].ToString(),
                                Currency = dr["currency"].ToString(),
                                GrossPrice = Convert.ToDouble(dr["grossPrice"]),
                                NetPrice = Convert.ToDouble(dr["netPrice"]),
                                Net1Price = Convert.ToDouble(dr["net1Price"]),
                                Net1PriceFound = true,
                                TotalNet1Price = Convert.ToDouble(dr["totalNet1Price"]),
                                DiscountPrice = Convert.ToDouble(dr["discountPrice"]),
                                TotalGrossPrice = Convert.ToDouble(dr["totalGrossPrice"]),
                                TotalNetPrice = Convert.ToDouble(dr["totalNetPrice"]),
                                TotalDiscountPrice = Convert.ToDouble(dr["totalDiscountPrice"]),
                                DiscountInPercent = Convert.ToDouble(dr["discountInPercent"]),
                                ErrorMessage = dr["errorMessage"].ToString(),
                                PriceFound = Convert.ToBoolean(dr["priceFound"]),
                                HasAssortedQtyDisc = Convert.ToBoolean(dr["hasAssortedQtyDisc"]),
                                UnitOfMeasurement = dr["unitOfMeasurement"].ToString(),
                                AdditionalPrices = new List<AdditionalPrices>() { new AdditionalPrices() {
                                PriceType = dr["priceType"].ToString(),
                                PriceValue = Convert.ToDouble(dr["priceValue"]) }
                            }
                            };
                            prices.Add(price);
                        }
                        else
                        {
                            prices.Find(e => e.ArticleId == price.ArticleId).AdditionalPrices.Add(new AdditionalPrices()
                            {
                                PriceType = dr["priceType"].ToString(),
                                PriceValue = Convert.ToDouble(dr["priceValue"])
                            });
                        }
                    }
                    return new ObjectResult(new Prices() { _Prices = prices });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                prices = null;
                price = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Copy of /apps/prod-webshop-service-app/webshop-service/articles/{company}/prices with additional input .</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="priceRequestForExternalLocationOrdering">The request contains a list of items, which contain articles with quantities and external ordering location Id.</param>
        /// <response code="200"></response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/pricesForExternalLocationOrdering")]
        [ValidateModelState]
        [SwaggerOperation("GetArticlePricesForExternalLocationOrdering")]
        [SwaggerResponse(statusCode: 200, type: typeof(PriceForExternalOrdering), description: "")]
        public virtual async Task<IActionResult> GetArticlePricesForExternalLocationOrdering([FromRoute][Required] string company, [FromBody] PriceRequestForExternalLocationOrdering priceRequestForExternalLocationOrdering)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("articleId", typeof(string));
            dt.Columns.Add("quantity", typeof(double));
            dt.Columns.Add("brandId", typeof(int));
            dt.Columns.Add("externalOrderingLocationId", typeof(string));

            foreach (PriceRequestItemForExternalLocationOrdering priceRequestItem in priceRequestForExternalLocationOrdering.Items)
            {
                dt.Rows.Add(priceRequestItem.ArticleId, priceRequestItem.Quantity, priceRequestItem.BrandId, priceRequestItem.ExternalOrderingLocationId);
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@customerNr", priceRequestForExternalLocationOrdering.CustomerNr),
                new SqlParameter("@calculateAssortedQtyDisc", (object)priceRequestForExternalLocationOrdering.CalculateAssortedQtyDisc ?? DBNull.Value),
                new SqlParameter("@priceRequestForExternalLocationOrdering", dt)
                {
                    TypeName = "dbo.tyPriceRequestForExternalLocationOrdering"
                }
            };
            List<PriceForExternalOrdering> prices = new List<PriceForExternalOrdering>();
            PriceForExternalOrdering price = new PriceForExternalOrdering();

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetArticlePricesForExternalLocationOrdering", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (!prices.Any(e => e.ArticleId == dr["articleId"].ToString()))
                        {
                            price = new PriceForExternalOrdering()
                            {
                                ArticleId = dr["articleId"].ToString(),
                                Currency = dr["currency"].ToString(),
                                GrossPrice = Convert.ToDouble(dr["grossPrice"]),
                                NetPrice = Convert.ToDouble(dr["netPrice"]),
                                DiscountPrice = Convert.ToDouble(dr["discountPrice"]),
                                TotalGrossPrice = Convert.ToDouble(dr["totalGrossPrice"]),
                                TotalNetPrice = Convert.ToDouble(dr["totalNetPrice"]),
                                TotalDiscountPrice = Convert.ToDouble(dr["totalDiscountPrice"]),
                                DiscountInPercent = Convert.ToDouble(dr["discountInPercent"]),
                                ErrorMessage = dr["errorMessage"].ToString(),
                                PriceFound = Convert.ToBoolean(dr["priceFound"]),
                                HasAssortedQtyDisc = Convert.ToBoolean(dr["hasAssortedQtyDisc"]),
                                UnitOfMeasurement = dr["unitOfMeasurement"].ToString(),
                                AdditionalPrices = new List<AdditionalPrices>() { new AdditionalPrices() {
                                PriceType = dr["priceType"].ToString(),
                                PriceValue = Convert.ToDouble(dr["priceValue"]) }
                            },
                                ExternalArticleId = dr["externalArticleId"].ToString()
                            };
                            prices.Add(price);
                        }
                        else
                        {
                            prices.Find(e => e.ArticleId == price.ArticleId).AdditionalPrices.Add(new AdditionalPrices()
                            {
                                PriceType = dr["priceType"].ToString(),
                                PriceValue = Convert.ToDouble(dr["priceValue"])
                            });
                        }
                    }
                    return new ObjectResult(new PricesForExternalOrdering() { _Prices = prices });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                prices = null;
                price = null;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Requests availabilities of a list of articles from ERP system.</remarks>
        /// <param name="company">The company to which the webshop belongs, e.g. &#39;Derendinger-Switzerland&#39;.</param>
        /// <param name="availabilityRequest"></param>
        /// <response code="200"></response>
        /// <response code="400">If the provided company name is invalid, the service responds with a 400 (Bad Request) status and an ErrorInfo object. + If the request entity contained in message body violates any validation rule, the resulting status will also be 400 (Bad Request), but responds with a detailled description of violated rules instead of an ErrorInfo object.</response>
        [HttpPost]
        [Route("/apps/prod-webshop-service-app/webshop-service/articles/{company}/availabilities")]
        [ValidateModelState]
        [SwaggerOperation("GetAvailabilities")]
        [SwaggerResponse(statusCode: 200, type: typeof(Availabilities), description: "")]
        public virtual async Task<IActionResult> GetAvailabilities([FromRoute][Required] string company, [FromBody] AvailabilityRequest availabilityRequest)
        {
            if (!Companies.IsCompanyExists(company))
            {
                return StatusCode(400, (new ErrorInfo()
                {
                    ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                    ErrorMessage = "Company not found"
                }));
            }

            DataTable dt = new DataTable();
            dt.Columns.Add("articleId", typeof(string));
            dt.Columns.Add("quantity", typeof(double));
            dt.Columns.Add("customerNr", typeof(string));
            dt.Columns.Add("sendMethod", typeof(string));
            dt.Columns.Add("partialDelivery", typeof(bool));
            dt.Columns.Add("deliveryAddressId", typeof(string));
            dt.Columns.Add("pickupBranchId", typeof(string));
            dt.Columns.Add("pickingWarehouse", typeof(string));
            dt.Columns.Add("isTourTimetable", typeof(bool));

            foreach (AvailabilityRequestItem availabilityRequestItem in availabilityRequest.Items)
            {
                dt.Rows.Add(availabilityRequestItem.ArticleId, availabilityRequestItem.Quantity, availabilityRequest.CustomerNr,
                    availabilityRequest.SendMethod, availabilityRequest.PartialDelivery, availabilityRequest.DeliveryAddressId, availabilityRequest.PickupBranchId,
                    availabilityRequest.PickingWarehouse, availabilityRequest.IsTourTimetable);
            }

            List<SqlParameter> param = new List<SqlParameter>()
            {
                new SqlParameter("@company", company),
                new SqlParameter("@availabilityRequest", dt)
                {
                    TypeName = "dbo.tyAvailabilityRequest"
                }
            };

            List<Availability> availabilities = new List<Availability>();
            Availability availability = new Availability();

            try
            {
                DataSet ds = await Dal.GetDataAsync("GetAvailabilities", param);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        if (!availabilities.Any(e => e.ArticleId == dr["articleId"].ToString()))
                        {
                            availability = new Availability()
                            {
                                ArticleId = dr["articleId"].ToString(),
                                Quantity = Convert.ToDouble(dr["quantity"]),
                                BackOrder = Convert.ToBoolean(dr["backOrder"]),
                                CutOffTime = Convert.ToDateTime(dr["cutOffTime"]),
                                DeliveryTime = Convert.ToDateTime(dr["deliveryTime"]),
                                DeliveryTime2 = Convert.ToDateTime(dr["deliveryTime"]),
                                ImmediateDelivery = Convert.ToBoolean(dr["immediateDelivery"]),
                                StockWarehouse = dr["stockWarehouse"].ToString(),
                                DeliveryWarehouse = dr["deliveryWarehouse"].ToString(),
                                SendMethod = dr["sendMethod"].ToString(),
                                AssignmentPriority = Convert.ToInt64(dr["assignmentPriority"]),
                                ErrorMessage = dr["errorMessage"].ToString(),
                                TourName = dr["tourName"].ToString(),
                                TourTimeTable = new List<Tour>() { 
                                    new Tour() 
                                    {
                                        TourName = dr["tourTimeTableTourName"].ToString(),
                                        StartTime = Convert.ToDateTime(dr["tourTimeTableStartTime"])
                                    }
                                }
                            };
                            availabilities.Add(availability);
                        }
                        else
                        {
                            availabilities.Find(e => e.ArticleId == availability.ArticleId).TourTimeTable.Add(new Tour()
                            {
                                TourName = dr["tourTimeTableTourName"].ToString(),
                                StartTime = Convert.ToDateTime(dr["tourTimeTableStartTime"])
                            });
                        }
                    }
                    return new ObjectResult(new Availabilities() { _Availabilities = availabilities });
                }
                else
                    return StatusCode(404, (new ErrorInfo()
                    {
                        ErrorOrigin = ErrorInfo.ErrorOriginEnum.WEBSHOPSERVICEEnum,
                        ErrorMessage = "Articles not found"
                    }));
            }
            finally
            {
                param = null;
                availabilities = null;
                availability = null;
            }
        }

    }
}
