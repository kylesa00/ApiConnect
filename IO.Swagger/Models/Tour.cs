/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Tour : IEquatable<Tour>
    { 
        /// <summary>
        /// A string of format X_Y_Z where X is the starting point of the tour, Y is the Description (tour number), Z is the time(HH:mm).
        /// </summary>
        /// <value>A string of format X_Y_Z where X is the starting point of the tour, Y is the Description (tour number), Z is the time(HH:mm).</value>
        [Required]
        [DataMember(Name="tourName")]
        public string TourName { get; set; }

        /// <summary>
        /// Point in time when tour starts at distribution center. +  +  **Note 1**: This isn&#39;t the point in time when customer&#39;s delivery address is reached, because that time is actually not predictable.
        /// </summary>
        /// <value>Point in time when tour starts at distribution center. +  +  **Note 1**: This isn&#39;t the point in time when customer&#39;s delivery address is reached, because that time is actually not predictable.</value>
        [Required]
        [DataMember(Name="startTime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tour {\n");
            sb.Append("  TourName: ").Append(TourName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tour)obj);
        }

        /// <summary>
        /// Returns true if Tour instances are equal
        /// </summary>
        /// <param name="other">Instance of Tour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tour other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TourName == other.TourName ||
                    TourName != null &&
                    TourName.Equals(other.TourName)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TourName != null)
                    hashCode = hashCode * 59 + TourName.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Tour left, Tour right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Tour left, Tour right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
