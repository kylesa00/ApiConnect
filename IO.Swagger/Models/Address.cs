/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Address : IEquatable<Address>
    { 
        /// <summary>
        /// Id of the address. Although, identifiers usually not returned \&quot;as is\&quot; to calling Webshop application, this exceptional case is justified, because the  &#39;address id&#39; must be passed back with availability request.
        /// </summary>
        /// <value>Id of the address. Although, identifiers usually not returned \&quot;as is\&quot; to calling Webshop application, this exceptional case is justified, because the  &#39;address id&#39; must be passed back with availability request.</value>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Street of customer&#39;s address.
        /// </summary>
        /// <value>Street of customer&#39;s address.</value>
        [DataMember(Name="street")]
        public string Street { get; set; }

        /// <summary>
        /// Street number of customer&#39;s address.
        /// </summary>
        /// <value>Street number of customer&#39;s address.</value>
        [DataMember(Name="streetNumber")]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets PostOfficeBox
        /// </summary>
        [DataMember(Name="postOfficeBox")]
        public string PostOfficeBox { get; set; }

        /// <summary>
        /// Post code of address, AKA zip code.
        /// </summary>
        /// <value>Post code of address, AKA zip code.</value>
        [DataMember(Name="postCode")]
        public string PostCode { get; set; }

        /// <summary>
        /// City of address.
        /// </summary>
        /// <value>City of address.</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// ISO code of the country of the address.
        /// </summary>
        /// <value>ISO code of the country of the address.</value>
        [DataMember(Name="countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Multi-language name of the country. Is this required???? Do webshop applications rather use countryCode and their own translations????
        /// </summary>
        /// <value>Multi-language name of the country. Is this required???? Do webshop applications rather use countryCode and their own translations????</value>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// ???.
        /// </summary>
        /// <value>???.</value>
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Boolean indicator for address being active.
        /// </summary>
        /// <value>Boolean indicator for address being active.</value>
        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Boolean indicator for primary address.
        /// </summary>
        /// <value>Boolean indicator for primary address.</value>
        [DataMember(Name="primary")]
        public bool? Primary { get; set; }

        /// <summary>
        /// Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.
        /// </summary>
        /// <value>Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AddressTypeEnum
        {
            
            /// <summary>
            /// Enum DELIVERYEnum for DELIVERY
            /// </summary>
            [EnumMember(Value = "DELIVERY")]
            DELIVERYEnum = 1,
            
            /// <summary>
            /// Enum INVOICEEnum for INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICEEnum = 2,
            
            /// <summary>
            /// Enum DEFAULTEnum for DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULTEnum = 3
        }

        /// <summary>
        /// Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.
        /// </summary>
        /// <value>Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.</value>
        [DataMember(Name="addressType")]
        public AddressTypeEnum? AddressType { get; set; }

        /// <summary>
        /// Additional address related information on the address&#39;s building.
        /// </summary>
        /// <value>Additional address related information on the address&#39;s building.</value>
        [DataMember(Name="buildingCompliment")]
        public string BuildingCompliment { get; set; }

        /// <summary>
        /// A dercription of the purpoce of the returned address.           
        /// </summary>
        /// <value>A dercription of the purpoce of the returned address.           </value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  + 
        /// **self (GET)**: The link to address representation itself. Following this link returns representation of very same address resource. +  +  
        /// **next-tour (GET)**: Following this link, the next planned delivery tour to this address will be returned. Start date/time can be provided as query parameter, 
        /// so that only tours departing from warehouse/distribution center after or equal that given start date/time will be considered. 
        /// Current date/time will be used when query parameter is missing.
        /// </summary>
        /// <value>Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **self (GET)**: The link to address representation itself. Following this link returns representation of very same address resource. +  +  **next-tour (GET)**: Following this link, the next planned delivery tour to this address will be returned. Start date/time can be provided as query parameter, so that only tours departing from warehouse/distribution center after or equal that given start date/time will be considered. Current date/time will be used when query parameter is missing.</value>
        [Required]
        [DataMember(Name="_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  PostOfficeBox: ").Append(PostOfficeBox).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  BuildingCompliment: ").Append(BuildingCompliment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Address)obj);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    StreetNumber == other.StreetNumber ||
                    StreetNumber != null &&
                    StreetNumber.Equals(other.StreetNumber)
                ) && 
                (
                    PostOfficeBox == other.PostOfficeBox ||
                    PostOfficeBox != null &&
                    PostOfficeBox.Equals(other.PostOfficeBox)
                ) && 
                (
                    PostCode == other.PostCode ||
                    PostCode != null &&
                    PostCode.Equals(other.PostCode)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    CountryCode == other.CountryCode ||
                    CountryCode != null &&
                    CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    Primary == other.Primary ||
                    Primary != null &&
                    Primary.Equals(other.Primary)
                ) && 
                (
                    AddressType == other.AddressType ||
                    AddressType != null &&
                    AddressType.Equals(other.AddressType)
                ) && 
                (
                    BuildingCompliment == other.BuildingCompliment ||
                    BuildingCompliment != null &&
                    BuildingCompliment.Equals(other.BuildingCompliment)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (StreetNumber != null)
                    hashCode = hashCode * 59 + StreetNumber.GetHashCode();
                    if (PostOfficeBox != null)
                    hashCode = hashCode * 59 + PostOfficeBox.GetHashCode();
                    if (PostCode != null)
                    hashCode = hashCode * 59 + PostCode.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (CountryCode != null)
                    hashCode = hashCode * 59 + CountryCode.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Primary != null)
                    hashCode = hashCode * 59 + Primary.GetHashCode();
                    if (AddressType != null)
                    hashCode = hashCode * 59 + AddressType.GetHashCode();
                    if (BuildingCompliment != null)
                    hashCode = hashCode * 59 + BuildingCompliment.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Address left, Address right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Address left, Address right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
