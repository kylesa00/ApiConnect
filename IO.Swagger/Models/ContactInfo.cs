/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContactInfo : IEquatable<ContactInfo>
    { 
        /// <summary>
        /// Customer&#39;s contact info value
        /// </summary>
        /// <value>Customer&#39;s contact info value</value>
        [DataMember(Name="contactValue")]
        public string ContactValue { get; set; }

        /// <summary>
        /// Description of the customer&#39;s contact
        /// </summary>
        /// <value>Description of the customer&#39;s contact</value>
        [DataMember(Name="contactDescription")]
        public string ContactDescription { get; set; }

        /// <summary>
        /// The type of the contact of the customer
        /// </summary>
        /// <value>The type of the contact of the customer</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContactTypeEnum
        {
            
            /// <summary>
            /// Enum PhoneEnum for Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            PhoneEnum = 1,
            
            /// <summary>
            /// Enum EmailEnum for Email
            /// </summary>
            [EnumMember(Value = "Email")]
            EmailEnum = 2,
            
            /// <summary>
            /// Enum URLEnum for URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URLEnum = 3,
            
            /// <summary>
            /// Enum TelexEnum for Telex
            /// </summary>
            [EnumMember(Value = "Telex")]
            TelexEnum = 4,
            
            /// <summary>
            /// Enum FaxEnum for Fax
            /// </summary>
            [EnumMember(Value = "Fax")]
            FaxEnum = 5
        }

        /// <summary>
        /// The type of the contact of the customer
        /// </summary>
        /// <value>The type of the contact of the customer</value>
        [DataMember(Name="contactType")]
        public ContactTypeEnum? ContactType { get; set; }

        /// <summary>
        /// Indicator whether the contact is the primary one of the customer
        /// </summary>
        /// <value>Indicator whether the contact is the primary one of the customer</value>
        [DataMember(Name="isPrimary")]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactInfo {\n");
            sb.Append("  ContactValue: ").Append(ContactValue).Append("\n");
            sb.Append("  ContactDescription: ").Append(ContactDescription).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactInfo)obj);
        }

        /// <summary>
        /// Returns true if ContactInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactValue == other.ContactValue ||
                    ContactValue != null &&
                    ContactValue.Equals(other.ContactValue)
                ) && 
                (
                    ContactDescription == other.ContactDescription ||
                    ContactDescription != null &&
                    ContactDescription.Equals(other.ContactDescription)
                ) && 
                (
                    ContactType == other.ContactType ||
                    ContactType != null &&
                    ContactType.Equals(other.ContactType)
                ) && 
                (
                    IsPrimary == other.IsPrimary ||
                    IsPrimary != null &&
                    IsPrimary.Equals(other.IsPrimary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactValue != null)
                    hashCode = hashCode * 59 + ContactValue.GetHashCode();
                    if (ContactDescription != null)
                    hashCode = hashCode * 59 + ContactDescription.GetHashCode();
                    if (ContactType != null)
                    hashCode = hashCode * 59 + ContactType.GetHashCode();
                    if (IsPrimary != null)
                    hashCode = hashCode * 59 + IsPrimary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactInfo left, ContactInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactInfo left, ContactInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
