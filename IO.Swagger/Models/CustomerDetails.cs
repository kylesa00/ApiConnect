/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerDetails : IEquatable<CustomerDetails>
    {
        #region dataMembers
        /// <summary>
        /// The name alias of the customer.
        /// </summary>
        /// <value>The name alias of the customer.</value>
        [Required]
        [DataMember(Name= "nameAlias")]
        public string NameAlias { get; set; }

        [Required]
        /// <summary>
        /// The customer account number.
        /// </summary>
        /// <value>The customer account number.</value>
        [DataMember(Name= "customerAccountNr")]
        public string CustomerAccountNr { get; set; }

        /// <summary>
        /// Customers primary fax.
        /// </summary>
        /// <value>Customers primary fax.</value>
        [DataMember(Name= "primaryFax")]
        public string PrimaryFax { get; set; }

        /// <summary>
        /// The primary phone of the customer.
        /// </summary>
        /// <value>The primary phone of the customer.</value>
        [DataMember(Name= "primaryPhone")]
        public string PrimaryPhone { get; set; }

        /// <summary>
        /// Primary Phone CC of customer.
        /// </summary>
        /// <value>Primary Phone CC of customer.</value>
        [DataMember(Name= "primaryPhoneCC")]
        public string PrimaryPhoneCC { get; set; }

        /// <summary>
        /// The primary email of a customer.
        /// </summary>
        /// <value>The primary email of a customer.</value>
        [DataMember(Name= "primaryEmail")]
        public string PrimaryEmail { get; set; }

        /// <summary>
        /// The customer name.
        /// </summary>
        /// <value>The customer name.</value>
        [DataMember(Name = "customerName")]
        public string CustomerName { get; set; }

        /// <summary>
        /// Adressess of customer.
        /// </summary>
        /// <value>Adressess of customer.</value>
        [DataMember(Name = "addresses")]
        public List<CustomerDetailsAddress> Addresses { get; set; }

        /// <summary>
        /// Contacts of customer.
        /// </summary>
        /// <value>Contacts of customer.</value>
        [DataMember(Name="contacts")]
        public List<ContactInfo> Contacts { get; set; }

        #endregion dataMembers      

        #region overrides
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
           
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerDetails)obj);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="other">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDetails other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                true;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
               
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerDetails left, CustomerDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerDetails left, CustomerDetails right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators

        #endregion overrides
    }
}
