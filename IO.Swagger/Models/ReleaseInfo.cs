/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReleaseInfo : IEquatable<ReleaseInfo>
    { 
        /// <summary>
        /// The build number of released service application.
        /// </summary>
        /// <value>The build number of released service application.</value>
        [Required]
        [DataMember(Name="releaseBuild")]
        public string ReleaseBuild { get; set; }

        /// <summary>
        /// The version of released service application according to version control system.
        /// </summary>
        /// <value>The version of released service application according to version control system.</value>
        [Required]
        [DataMember(Name="releaseVersion")]
        public string ReleaseVersion { get; set; }

        /// <summary>
        /// The date and time the service application has been built and released.
        /// </summary>
        /// <value>The date and time the service application has been built and released.</value>
        [Required]
        [DataMember(Name="releaseDate")]
        public DateTime? ReleaseDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseInfo {\n");
            sb.Append("  ReleaseBuild: ").Append(ReleaseBuild).Append("\n");
            sb.Append("  ReleaseVersion: ").Append(ReleaseVersion).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReleaseInfo)obj);
        }

        /// <summary>
        /// Returns true if ReleaseInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ReleaseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReleaseBuild == other.ReleaseBuild ||
                    ReleaseBuild != null &&
                    ReleaseBuild.Equals(other.ReleaseBuild)
                ) && 
                (
                    ReleaseVersion == other.ReleaseVersion ||
                    ReleaseVersion != null &&
                    ReleaseVersion.Equals(other.ReleaseVersion)
                ) && 
                (
                    ReleaseDate == other.ReleaseDate ||
                    ReleaseDate != null &&
                    ReleaseDate.Equals(other.ReleaseDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReleaseBuild != null)
                    hashCode = hashCode * 59 + ReleaseBuild.GetHashCode();
                    if (ReleaseVersion != null)
                    hashCode = hashCode * 59 + ReleaseVersion.GetHashCode();
                    if (ReleaseDate != null)
                    hashCode = hashCode * 59 + ReleaseDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReleaseInfo left, ReleaseInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReleaseInfo left, ReleaseInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
