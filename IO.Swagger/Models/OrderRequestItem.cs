/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderRequestItem : IEquatable<OrderRequestItem>
    { 
        /// <summary>
        /// The id of the article to be ordered.
        /// </summary>
        /// <value>The id of the article to be ordered.</value>
        [Required]
        [DataMember(Name="articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// Requested quantity of article, which need to be greater than zero.
        /// </summary>
        /// <value>Requested quantity of article, which need to be greater than zero.</value>
        [Required]
        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Vehicle brand id
        /// </summary>
        /// <value>Vehicle brand id</value>
        [DataMember(Name="brandId")]
        public long? BrandId { get; set; }

        /// <summary>
        /// Vehicle model
        /// </summary>
        /// <value>Vehicle model</value>
        [DataMember(Name="model")]
        public string Model { get; set; }

        /// <summary>
        /// Vehicle brand
        /// </summary>
        /// <value>Vehicle brand</value>
        [DataMember(Name="brand")]
        public string Brand { get; set; }

        /// <summary>
        /// Vehicle type
        /// </summary>
        /// <value>Vehicle type</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Source type
        /// </summary>
        /// <value>Source type</value>
        [DataMember(Name="sourcingType")]
        public string SourcingType { get; set; }

        /// <summary>
        /// Vendor Id
        /// </summary>
        /// <value>Vendor Id</value>
        [DataMember(Name="vendorId")]
        public string VendorId { get; set; }

        /// <summary>
        /// The arrival time in ISO 8601 format
        /// </summary>
        /// <value>The arrival time in ISO 8601 format</value>
        [DataMember(Name="arrivalTime")]
        public DateTime? ArrivalTime { get; set; }

        /// <summary>
        /// External line number for identifying each position
        /// </summary>
        /// <value>External line number for identifying each position</value>
        [DataMember(Name="externalLineNumber")]
        public string ExternalLineNumber { get; set; }

        /// <summary>
        /// Additional text which will be included in the position and will be printed in documents, e.g. offer or invoice selected by &#x60;additionalTextDocPrinters&#x60;.
        /// </summary>
        /// <value>Additional text which will be included in the position and will be printed in documents, e.g. offer or invoice selected by &#x60;additionalTextDocPrinters&#x60;.</value>
        [DataMember(Name="additionalTextDoc")]
        public string AdditionalTextDoc { get; set; }

        /// <summary>
        /// The id of the printer which is logged in the text management
        /// </summary>
        /// <value>The id of the printer which is logged in the text management</value>
        [DataMember(Name="additionalTextDocPrinters")]
        public string AdditionalTextDocPrinters { get; set; }

        /// <summary>
        /// The number of the official document that comes along with a (new) car from the producer containing all the relevant technical details, serial numbers etc.
        /// </summary>
        /// <value>The number of the official document that comes along with a (new) car from the producer containing all the relevant technical details, serial numbers etc.</value>
        [DataMember(Name="registrationDocNr")]
        public string RegistrationDocNr { get; set; }

        /// <summary>
        /// Type of price discount
        /// </summary>
        /// <value>Type of price discount</value>
        [DataMember(Name="priceDiscTypeId")]
        public string PriceDiscTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderRequestItem {\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SourcingType: ").Append(SourcingType).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  ExternalLineNumber: ").Append(ExternalLineNumber).Append("\n");
            sb.Append("  AdditionalTextDoc: ").Append(AdditionalTextDoc).Append("\n");
            sb.Append("  AdditionalTextDocPrinters: ").Append(AdditionalTextDocPrinters).Append("\n");
            sb.Append("  RegistrationDocNr: ").Append(RegistrationDocNr).Append("\n");
            sb.Append("  PriceDiscTypeId: ").Append(PriceDiscTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderRequestItem)obj);
        }

        /// <summary>
        /// Returns true if OrderRequestItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderRequestItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    BrandId == other.BrandId ||
                    BrandId != null &&
                    BrandId.Equals(other.BrandId)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Brand == other.Brand ||
                    Brand != null &&
                    Brand.Equals(other.Brand)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    SourcingType == other.SourcingType ||
                    SourcingType != null &&
                    SourcingType.Equals(other.SourcingType)
                ) && 
                (
                    VendorId == other.VendorId ||
                    VendorId != null &&
                    VendorId.Equals(other.VendorId)
                ) && 
                (
                    ArrivalTime == other.ArrivalTime ||
                    ArrivalTime != null &&
                    ArrivalTime.Equals(other.ArrivalTime)
                ) && 
                (
                    ExternalLineNumber == other.ExternalLineNumber ||
                    ExternalLineNumber != null &&
                    ExternalLineNumber.Equals(other.ExternalLineNumber)
                ) && 
                (
                    AdditionalTextDoc == other.AdditionalTextDoc ||
                    AdditionalTextDoc != null &&
                    AdditionalTextDoc.Equals(other.AdditionalTextDoc)
                ) && 
                (
                    AdditionalTextDocPrinters == other.AdditionalTextDocPrinters ||
                    AdditionalTextDocPrinters != null &&
                    AdditionalTextDocPrinters.Equals(other.AdditionalTextDocPrinters)
                ) && 
                (
                    RegistrationDocNr == other.RegistrationDocNr ||
                    RegistrationDocNr != null &&
                    RegistrationDocNr.Equals(other.RegistrationDocNr)
                ) && 
                (
                    PriceDiscTypeId == other.PriceDiscTypeId ||
                    PriceDiscTypeId != null &&
                    PriceDiscTypeId.Equals(other.PriceDiscTypeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (BrandId != null)
                    hashCode = hashCode * 59 + BrandId.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Brand != null)
                    hashCode = hashCode * 59 + Brand.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (SourcingType != null)
                    hashCode = hashCode * 59 + SourcingType.GetHashCode();
                    if (VendorId != null)
                    hashCode = hashCode * 59 + VendorId.GetHashCode();
                    if (ArrivalTime != null)
                    hashCode = hashCode * 59 + ArrivalTime.GetHashCode();
                    if (ExternalLineNumber != null)
                    hashCode = hashCode * 59 + ExternalLineNumber.GetHashCode();
                    if (AdditionalTextDoc != null)
                    hashCode = hashCode * 59 + AdditionalTextDoc.GetHashCode();
                    if (AdditionalTextDocPrinters != null)
                    hashCode = hashCode * 59 + AdditionalTextDocPrinters.GetHashCode();
                    if (RegistrationDocNr != null)
                    hashCode = hashCode * 59 + RegistrationDocNr.GetHashCode();
                    if (PriceDiscTypeId != null)
                    hashCode = hashCode * 59 + PriceDiscTypeId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderRequestItem left, OrderRequestItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderRequestItem left, OrderRequestItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
