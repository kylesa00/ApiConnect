/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using static IO.Swagger.Models.UsedCreditLimit;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Document : IEquatable<Document>
    { 
        /// <summary>
        /// Number of the customer.
        /// </summary>
        /// <value>Number of the customer.</value>
        [Required]
        [DataMember(Name= "customerNr")]
        public string CustomerNr { get; set; }

        /// <summary>
        /// Enum PaymentMethodAnalyticalCardEnum.
        /// </summary>
        /// <value>Enum PaymentMethodAnalyticalCardEnum.</value>
        [Required]
        [DataMember(Name= "paymentMethod")]
        public PaymentMethodAnalyticalCardEnum PaymentMethod { get; set; }

        /// <summary>
        /// Enum documentType
        /// </summary>
        /// <value>Enum documentType</value>
        ///   [Required]
        [DataMember(Name = "documentType")]
        public DocumentTypeAnalyticalCardEnum DocumentType { get; set; }

        /// <summary>
        /// Document Number.
        /// </summary>
        /// <value>Document Number.</value>
        [DataMember(Name= "documentNr")]
        public string DocumentNr { get; set; }

        /// <summary>
        /// Web Order Number.
        /// </summary>
        /// <value>Web Order Number.</value>
        [DataMember(Name = "webOrderNr")]
        public string WebOrderNr { get; set; }

        /// <summary>
        /// Date of posting.
        /// </summary>
        /// <value>Date of posting.</value>
        [Required]
        [DataMember(Name="postingDate")]
        public DateTime? PostingDate { get; set; }

        /// <summary>
        /// Date of due.
        /// </summary>
        /// <value>Date of due.</value>
        [Required]
        [DataMember(Name = "dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// paymentDeadlineNotification.
        /// </summary>
        /// <value>paymentDeadlineNotification.</value>
        [DataMember(Name = "paymentDeadlineNotification")]
        public string PaymentDeadlineNotification { get; set; }

        /// <summary>
        /// Enum status 
        /// </summary>
        /// <value>Enum status</value>
        ///   [Required]
        [DataMember(Name = "status")]
        public StatusAnalyticalCardEnum Status { get; set; }

        /// <summary>
        /// remaining Amount  
        /// </summary>
        /// <value>remaining Amount.</value>
        ///   [Required]
        [DataMember(Name = "remainingAmount")]
        public double RemainingAmount { get; set; }

        /// <summary>
        /// documentCount  
        /// </summary>
        /// <value>Document count</value>
        ///   [Required]
        [DataMember(Name = "documentCount")]
        public int DocumentCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                
                (
                   true
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                   
                    
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Document left, Document right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Document left, Document right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
