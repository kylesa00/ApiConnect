/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnOrder : IEquatable<ReturnOrder>
    { 
        /// <summary>
        /// Part of the Url to call the positions directly for the created return order
        /// </summary>
        /// <value>Part of the Url to call the positions directly for the created return order</value>
        [DataMember(Name="returnOrderUrl")]
        public string ReturnOrderUrl { get; set; }

        /// <summary>
        /// List of return order positions
        /// </summary>
        /// <value>List of return order positions</value>
        [DataMember(Name="returnOrderPositionList")]
        public List<ReturnOrderPosition> ReturnOrderPositionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnOrder {\n");
            sb.Append("  ReturnOrderUrl: ").Append(ReturnOrderUrl).Append("\n");
            sb.Append("  ReturnOrderPositionList: ").Append(ReturnOrderPositionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnOrder)obj);
        }

        /// <summary>
        /// Returns true if ReturnOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnOrder other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReturnOrderUrl == other.ReturnOrderUrl ||
                    ReturnOrderUrl != null &&
                    ReturnOrderUrl.Equals(other.ReturnOrderUrl)
                ) && 
                (
                    ReturnOrderPositionList == other.ReturnOrderPositionList ||
                    ReturnOrderPositionList != null &&
                    ReturnOrderPositionList.SequenceEqual(other.ReturnOrderPositionList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReturnOrderUrl != null)
                    hashCode = hashCode * 59 + ReturnOrderUrl.GetHashCode();
                    if (ReturnOrderPositionList != null)
                    hashCode = hashCode * 59 + ReturnOrderPositionList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnOrder left, ReturnOrder right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnOrder left, ReturnOrder right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
