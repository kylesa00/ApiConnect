/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TransactionReference : IEquatable<TransactionReference>
    { 
        /// <summary>
        /// The inventory transaction Id
        /// </summary>
        /// <value>The inventory transaction Id</value>
        [DataMember(Name="transId")]
        public string TransId { get; set; }

        /// <summary>
        /// The Item Id of the transaction reference
        /// </summary>
        /// <value>The Item Id of the transaction reference</value>
        [DataMember(Name="articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// The article description in the current language of the item id
        /// </summary>
        /// <value>The article description in the current language of the item id</value>
        [DataMember(Name="articleName")]
        public string ArticleName { get; set; }

        /// <summary>
        /// Search name of the item
        /// </summary>
        /// <value>Search name of the item</value>
        [DataMember(Name="articleKeyword")]
        public string ArticleKeyword { get; set; }

        /// <summary>
        /// Releated order nr found for the given search string
        /// </summary>
        /// <value>Releated order nr found for the given search string</value>
        [DataMember(Name="orderNr")]
        public string OrderNr { get; set; }

        /// <summary>
        /// Customer account of the found position
        /// </summary>
        /// <value>Customer account of the found position</value>
        [DataMember(Name="customerNr")]
        public string CustomerNr { get; set; }

        /// <summary>
        /// Name of the found customer
        /// </summary>
        /// <value>Name of the found customer</value>
        [DataMember(Name="customerName")]
        public string CustomerName { get; set; }

        /// <summary>
        /// The transaction reference quantity
        /// </summary>
        /// <value>The transaction reference quantity</value>
        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Quantity not returned yet
        /// </summary>
        /// <value>Quantity not returned yet</value>
        [DataMember(Name="returnQty")]
        public double? ReturnQty { get; set; }

        /// <summary>
        /// Original location of point of sell
        /// </summary>
        /// <value>Original location of point of sell</value>
        [DataMember(Name="branchId")]
        public string BranchId { get; set; }

        /// <summary>
        /// Used payment mode
        /// </summary>
        /// <value>Used payment mode</value>
        [DataMember(Name="paymentType")]
        public string PaymentType { get; set; }

        /// <summary>
        /// Used payment terms
        /// </summary>
        /// <value>Used payment terms</value>
        [DataMember(Name="termOfPayment")]
        public string TermOfPayment { get; set; }

        /// <summary>
        /// Granted cash discount
        /// </summary>
        /// <value>Granted cash discount</value>
        [DataMember(Name="cashDiscount")]
        public string CashDiscount { get; set; }

        /// <summary>
        /// Unit of the quantity sold
        /// </summary>
        /// <value>Unit of the quantity sold</value>
        [DataMember(Name="unitOfMeasurement")]
        public string UnitOfMeasurement { get; set; }

        /// <summary>
        /// Sourcing type when sales line has a sourcing type set
        /// </summary>
        /// <value>Sourcing type when sales line has a sourcing type set</value>
        [DataMember(Name="sourcingType")]
        public string SourcingType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionReference {\n");
            sb.Append("  TransId: ").Append(TransId).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  ArticleName: ").Append(ArticleName).Append("\n");
            sb.Append("  ArticleKeyword: ").Append(ArticleKeyword).Append("\n");
            sb.Append("  OrderNr: ").Append(OrderNr).Append("\n");
            sb.Append("  CustomerNr: ").Append(CustomerNr).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReturnQty: ").Append(ReturnQty).Append("\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  TermOfPayment: ").Append(TermOfPayment).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("  SourcingType: ").Append(SourcingType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TransactionReference)obj);
        }

        /// <summary>
        /// Returns true if TransactionReference instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionReference other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TransId == other.TransId ||
                    TransId != null &&
                    TransId.Equals(other.TransId)
                ) && 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    ArticleName == other.ArticleName ||
                    ArticleName != null &&
                    ArticleName.Equals(other.ArticleName)
                ) && 
                (
                    ArticleKeyword == other.ArticleKeyword ||
                    ArticleKeyword != null &&
                    ArticleKeyword.Equals(other.ArticleKeyword)
                ) && 
                (
                    OrderNr == other.OrderNr ||
                    OrderNr != null &&
                    OrderNr.Equals(other.OrderNr)
                ) && 
                (
                    CustomerNr == other.CustomerNr ||
                    CustomerNr != null &&
                    CustomerNr.Equals(other.CustomerNr)
                ) && 
                (
                    CustomerName == other.CustomerName ||
                    CustomerName != null &&
                    CustomerName.Equals(other.CustomerName)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ReturnQty == other.ReturnQty ||
                    ReturnQty != null &&
                    ReturnQty.Equals(other.ReturnQty)
                ) && 
                (
                    BranchId == other.BranchId ||
                    BranchId != null &&
                    BranchId.Equals(other.BranchId)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    TermOfPayment == other.TermOfPayment ||
                    TermOfPayment != null &&
                    TermOfPayment.Equals(other.TermOfPayment)
                ) && 
                (
                    CashDiscount == other.CashDiscount ||
                    CashDiscount != null &&
                    CashDiscount.Equals(other.CashDiscount)
                ) && 
                (
                    UnitOfMeasurement == other.UnitOfMeasurement ||
                    UnitOfMeasurement != null &&
                    UnitOfMeasurement.Equals(other.UnitOfMeasurement)
                ) && 
                (
                    SourcingType == other.SourcingType ||
                    SourcingType != null &&
                    SourcingType.Equals(other.SourcingType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TransId != null)
                    hashCode = hashCode * 59 + TransId.GetHashCode();
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    if (ArticleName != null)
                    hashCode = hashCode * 59 + ArticleName.GetHashCode();
                    if (ArticleKeyword != null)
                    hashCode = hashCode * 59 + ArticleKeyword.GetHashCode();
                    if (OrderNr != null)
                    hashCode = hashCode * 59 + OrderNr.GetHashCode();
                    if (CustomerNr != null)
                    hashCode = hashCode * 59 + CustomerNr.GetHashCode();
                    if (CustomerName != null)
                    hashCode = hashCode * 59 + CustomerName.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ReturnQty != null)
                    hashCode = hashCode * 59 + ReturnQty.GetHashCode();
                    if (BranchId != null)
                    hashCode = hashCode * 59 + BranchId.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (TermOfPayment != null)
                    hashCode = hashCode * 59 + TermOfPayment.GetHashCode();
                    if (CashDiscount != null)
                    hashCode = hashCode * 59 + CashDiscount.GetHashCode();
                    if (UnitOfMeasurement != null)
                    hashCode = hashCode * 59 + UnitOfMeasurement.GetHashCode();
                    if (SourcingType != null)
                    hashCode = hashCode * 59 + SourcingType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TransactionReference left, TransactionReference right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TransactionReference left, TransactionReference right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
