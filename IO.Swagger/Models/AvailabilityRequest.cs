/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AvailabilityRequest : IEquatable<AvailabilityRequest>
    { 
        /// <summary>
        /// The number of the customer the article availabilities are request for.
        /// </summary>
        /// <value>The number of the customer the article availabilities are request for.</value>
        [Required]
        [DataMember(Name="customerNr")]
        public string CustomerNr { get; set; }

        /// <summary>
        /// The method of delivering the goods
        /// </summary>
        /// <value>The method of delivering the goods</value>
        [DataMember(Name="sendMethod")]
        public string SendMethod { get; set; }

        /// <summary>
        /// Flag indicating the desire of &#x60;availabilityRequestItem&#x60;s being delivered separately, in case they have different &#x60;arrivalTime&#x60;.
        /// </summary>
        /// <value>Flag indicating the desire of &#x60;availabilityRequestItem&#x60;s being delivered separately, in case they have different &#x60;arrivalTime&#x60;.</value>
        [DataMember(Name="partialDelivery")]
        public bool? PartialDelivery { get; set; }

        /// <summary>
        /// The id of the address where the listed goods should be delivered.
        /// </summary>
        /// <value>The id of the address where the listed goods should be delivered.</value>
        [DataMember(Name="deliveryAddressId")]
        public string DeliveryAddressId { get; set; }

        /// <summary>
        /// Id of the warehouse where the customer will pick up the articles from, in case &#x60;sendMethod&#x60; is PICKUP. For PICKUP with no branchId, the default of customer will be used.
        /// </summary>
        /// <value>Id of the warehouse where the customer will pick up the articles from, in case &#x60;sendMethod&#x60; is PICKUP. For PICKUP with no branchId, the default of customer will be used.</value>
        [DataMember(Name="pickupBranchId")]
        public string PickupBranchId { get; set; }

        /// <summary>
        /// Id of the warehouse where the articles will be picked for the Tour. Thus, the &#x60;sendMethod&#x60; is obvious that it should be TOUR. If the field is omitted  service behaves as usual.
        /// </summary>
        /// <value>Id of the warehouse where the articles will be picked for the Tour. Thus, the &#x60;sendMethod&#x60; is obvious that it should be TOUR. If the field is omitted  service behaves as usual.</value>
        [DataMember(Name="pickingWarehouse")]
        public string PickingWarehouse { get; set; }

        /// <summary>
        /// Flag indicating if there will be a calculation for the creation of Tour timetable. Default value is false
        /// </summary>
        /// <value>Flag indicating if there will be a calculation for the creation of Tour timetable. Default value is false</value>
        [DataMember(Name="isTourTimetable")]
        public bool? IsTourTimetable { get; set; }

        /// <summary>
        /// List of article positions for which availabilities are requested.
        /// </summary>
        /// <value>List of article positions for which availabilities are requested.</value>
        [Required]
        [DataMember(Name="items")]
        public List<AvailabilityRequestItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilityRequest {\n");
            sb.Append("  CustomerNr: ").Append(CustomerNr).Append("\n");
            sb.Append("  SendMethod: ").Append(SendMethod).Append("\n");
            sb.Append("  PartialDelivery: ").Append(PartialDelivery).Append("\n");
            sb.Append("  DeliveryAddressId: ").Append(DeliveryAddressId).Append("\n");
            sb.Append("  PickupBranchId: ").Append(PickupBranchId).Append("\n");
            sb.Append("  PickingWarehouse: ").Append(PickingWarehouse).Append("\n");
            sb.Append("  IsTourTimetable: ").Append(IsTourTimetable).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AvailabilityRequest)obj);
        }

        /// <summary>
        /// Returns true if AvailabilityRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AvailabilityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilityRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerNr == other.CustomerNr ||
                    CustomerNr != null &&
                    CustomerNr.Equals(other.CustomerNr)
                ) && 
                (
                    SendMethod == other.SendMethod ||
                    SendMethod != null &&
                    SendMethod.Equals(other.SendMethod)
                ) && 
                (
                    PartialDelivery == other.PartialDelivery ||
                    PartialDelivery != null &&
                    PartialDelivery.Equals(other.PartialDelivery)
                ) && 
                (
                    DeliveryAddressId == other.DeliveryAddressId ||
                    DeliveryAddressId != null &&
                    DeliveryAddressId.Equals(other.DeliveryAddressId)
                ) && 
                (
                    PickupBranchId == other.PickupBranchId ||
                    PickupBranchId != null &&
                    PickupBranchId.Equals(other.PickupBranchId)
                ) && 
                (
                    PickingWarehouse == other.PickingWarehouse ||
                    PickingWarehouse != null &&
                    PickingWarehouse.Equals(other.PickingWarehouse)
                ) && 
                (
                    IsTourTimetable == other.IsTourTimetable ||
                    IsTourTimetable != null &&
                    IsTourTimetable.Equals(other.IsTourTimetable)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerNr != null)
                    hashCode = hashCode * 59 + CustomerNr.GetHashCode();
                    if (SendMethod != null)
                    hashCode = hashCode * 59 + SendMethod.GetHashCode();
                    if (PartialDelivery != null)
                    hashCode = hashCode * 59 + PartialDelivery.GetHashCode();
                    if (DeliveryAddressId != null)
                    hashCode = hashCode * 59 + DeliveryAddressId.GetHashCode();
                    if (PickupBranchId != null)
                    hashCode = hashCode * 59 + PickupBranchId.GetHashCode();
                    if (PickingWarehouse != null)
                    hashCode = hashCode * 59 + PickingWarehouse.GetHashCode();
                    if (IsTourTimetable != null)
                    hashCode = hashCode * 59 + IsTourTimetable.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AvailabilityRequest left, AvailabilityRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AvailabilityRequest left, AvailabilityRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
