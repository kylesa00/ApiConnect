/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Price : IEquatable<Price>
    { 
        /// <summary>
        /// The id of the article.
        /// </summary>
        /// <value>The id of the article.</value>
        [DataMember(Name="articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// The currency of all resulting prices.
        /// </summary>
        /// <value>The currency of all resulting prices.</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The gross price of a single unit of the article before applying any discount.
        /// </summary>
        /// <value>The gross price of a single unit of the article before applying any discount.</value>
        [DataMember(Name="grossPrice")]
        public double? GrossPrice { get; set; }

        /// <summary>
        /// The net price of a single unit of the article before applying any discount.
        /// </summary>
        /// <value>The net price of a single unit of the article before applying any discount.</value>
        [DataMember(Name="netPrice")]
        public double? NetPrice { get; set; }

        /// <summary>
        /// The net price of a single unit of the article before applying any discount. Only used if promotional price is available.
        /// 
        /// </summary>
        /// <value>The net price of a single unit of the article before applying any discount.</value>
        [DataMember(Name="net1Price")]
        public double? Net1Price { get; set; }
        
        [DataMember(Name="net1PriceFound")]
        public bool? Net1PriceFound { get; set; }

        /// <summary>
        /// The discount for a single unit of the article.
        /// </summary>
        /// <value>The discount for a single unit of the article.</value>
        [DataMember(Name="discountPrice")]
        public double? DiscountPrice { get; set; }

        /// <summary>
        /// The total gross price for the total number of unit of the requested article before applying any discount.
        /// </summary>
        /// <value>The total gross price for the total number of unit of the requested article before applying any discount.</value>
        [DataMember(Name="totalGrossPrice")]
        public double? TotalGrossPrice { get; set; }

        /// <summary>
        /// The total net price for the total number of unit of the requested article before applying any discount.
        /// </summary>
        /// <value>The total net price for the total number of unit of the requested article before applying any discount.</value>
        [DataMember(Name="totalNetPrice")]
        public double? TotalNetPrice { get; set; }

        /// <summary>
        /// The total net price for the total number of unit of the requested article before applying any discount.
        /// </summary>
        /// <value>The total net price for the total number of unit of the requested article before applying any discount.</value>
        [DataMember(Name = "totalNet1Price")]
        public double? TotalNet1Price { get; set; }

        /// <summary>
        /// The total discount amount for requested articles.
        /// </summary>
        /// <value>The total discount amount for requested articles.</value>
        [DataMember(Name="totalDiscountPrice")]
        public double? TotalDiscountPrice { get; set; }

        /// <summary>
        /// The discount percentage for requested articles.
        /// </summary>
        /// <value>The discount percentage for requested articles.</value>
        [DataMember(Name="discountInPercent")]
        public double? DiscountInPercent { get; set; }

        /// <summary>
        /// Message in case we have error response from ERP.
        /// </summary>
        /// <value>Message in case we have error response from ERP.</value>
        [DataMember(Name="errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Indicates if a price has been found at the ERP.
        /// </summary>
        /// <value>Indicates if a price has been found at the ERP.</value>
        [DataMember(Name="priceFound")]
        public bool? PriceFound { get; set; }

        /// <summary>
        /// Indicates whether an assorted quantity discount exists for the current item or not.
        /// </summary>
        /// <value>Indicates whether an assorted quantity discount exists for the current item or not.</value>
        [DataMember(Name="hasAssortedQtyDisc")]
        public bool? HasAssortedQtyDisc { get; set; }

        /// <summary>
        /// The id of the unit for the specified quantity.
        /// </summary>
        /// <value>The id of the unit for the specified quantity.</value>
        [DataMember(Name="unitOfMeasurement")]
        public string UnitOfMeasurement { get; set; }

        /// <summary>
        /// The list of additional prices.
        /// </summary>
        /// <value>The list of additional prices.</value>
        [DataMember(Name="additionalPrices")]
        public List<AdditionalPrices> AdditionalPrices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  DiscountPrice: ").Append(DiscountPrice).Append("\n");
            sb.Append("  TotalGrossPrice: ").Append(TotalGrossPrice).Append("\n");
            sb.Append("  TotalNetPrice: ").Append(TotalNetPrice).Append("\n");
            sb.Append("  TotalDiscountPrice: ").Append(TotalDiscountPrice).Append("\n");
            sb.Append("  DiscountInPercent: ").Append(DiscountInPercent).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  PriceFound: ").Append(PriceFound).Append("\n");
            sb.Append("  HasAssortedQtyDisc: ").Append(HasAssortedQtyDisc).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("  AdditionalPrices: ").Append(AdditionalPrices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Price)obj);
        }

        /// <summary>
        /// Returns true if Price instances are equal
        /// </summary>
        /// <param name="other">Instance of Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Price other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    GrossPrice == other.GrossPrice ||
                    GrossPrice != null &&
                    GrossPrice.Equals(other.GrossPrice)
                ) && 
                (
                    NetPrice == other.NetPrice ||
                    NetPrice != null &&
                    NetPrice.Equals(other.NetPrice)
                ) && 
                (
                    DiscountPrice == other.DiscountPrice ||
                    DiscountPrice != null &&
                    DiscountPrice.Equals(other.DiscountPrice)
                ) && 
                (
                    TotalGrossPrice == other.TotalGrossPrice ||
                    TotalGrossPrice != null &&
                    TotalGrossPrice.Equals(other.TotalGrossPrice)
                ) && 
                (
                    TotalNetPrice == other.TotalNetPrice ||
                    TotalNetPrice != null &&
                    TotalNetPrice.Equals(other.TotalNetPrice)
                ) && 
                (
                    TotalDiscountPrice == other.TotalDiscountPrice ||
                    TotalDiscountPrice != null &&
                    TotalDiscountPrice.Equals(other.TotalDiscountPrice)
                ) && 
                (
                    DiscountInPercent == other.DiscountInPercent ||
                    DiscountInPercent != null &&
                    DiscountInPercent.Equals(other.DiscountInPercent)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    PriceFound == other.PriceFound ||
                    PriceFound != null &&
                    PriceFound.Equals(other.PriceFound)
                ) && 
                (
                    HasAssortedQtyDisc == other.HasAssortedQtyDisc ||
                    HasAssortedQtyDisc != null &&
                    HasAssortedQtyDisc.Equals(other.HasAssortedQtyDisc)
                ) && 
                (
                    UnitOfMeasurement == other.UnitOfMeasurement ||
                    UnitOfMeasurement != null &&
                    UnitOfMeasurement.Equals(other.UnitOfMeasurement)
                ) && 
                (
                    AdditionalPrices == other.AdditionalPrices ||
                    AdditionalPrices != null &&
                    AdditionalPrices.SequenceEqual(other.AdditionalPrices)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (GrossPrice != null)
                    hashCode = hashCode * 59 + GrossPrice.GetHashCode();
                    if (NetPrice != null)
                    hashCode = hashCode * 59 + NetPrice.GetHashCode();
                    if (DiscountPrice != null)
                    hashCode = hashCode * 59 + DiscountPrice.GetHashCode();
                    if (TotalGrossPrice != null)
                    hashCode = hashCode * 59 + TotalGrossPrice.GetHashCode();
                    if (TotalNetPrice != null)
                    hashCode = hashCode * 59 + TotalNetPrice.GetHashCode();
                    if (TotalDiscountPrice != null)
                    hashCode = hashCode * 59 + TotalDiscountPrice.GetHashCode();
                    if (DiscountInPercent != null)
                    hashCode = hashCode * 59 + DiscountInPercent.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (PriceFound != null)
                    hashCode = hashCode * 59 + PriceFound.GetHashCode();
                    if (HasAssortedQtyDisc != null)
                    hashCode = hashCode * 59 + HasAssortedQtyDisc.GetHashCode();
                    if (UnitOfMeasurement != null)
                    hashCode = hashCode * 59 + UnitOfMeasurement.GetHashCode();
                    if (AdditionalPrices != null)
                    hashCode = hashCode * 59 + AdditionalPrices.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Price left, Price right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Price left, Price right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
