/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>
    { 
        /// <summary>
        /// Number of the order.
        /// </summary>
        /// <value>Number of the order.</value>
        [Required]
        [DataMember(Name="nr")]
        public string Nr { get; set; }

        /// <summary>
        /// The id of the sales order category.
        /// </summary>
        /// <value>The id of the sales order category.</value>
        [Required]
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        ///   [Required]
        [DataMember(Name = "branchId")]
        public string BranchId { get; set; }

        /// <summary>
        /// The description of the sales order category.
        /// </summary>
        /// <value>The description of the sales order category.</value>
        [DataMember(Name="typeDesc")]
        public string TypeDesc { get; set; }

        /// <summary>
        /// The mode of the delivery of the ordered goods.
        /// </summary>
        /// <value>The mode of the delivery of the ordered goods.</value>
        [Required]
        [DataMember(Name="sendMethod")]
        public string SendMethod { get; set; }

        /// <summary>
        /// The status of the sales order.
        /// </summary>
        /// <value>The status of the sales order.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONEEnum = 1,
            
            /// <summary>
            /// Enum BACKORDEREnum for BACKORDER
            /// </summary>
            [EnumMember(Value = "BACKORDER")]
            BACKORDEREnum = 2,
            
            /// <summary>
            /// Enum DELIVEREDEnum for DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVEREDEnum = 3,
            
            /// <summary>
            /// Enum INVOICEDEnum for INVOICED
            /// </summary>
            [EnumMember(Value = "INVOICED")]
            INVOICEDEnum = 4,
            
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 5,
            
            /// <summary>
            /// Enum PENDINGEnum for PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDINGEnum = 6
        }

        /// <summary>
        /// The status of the sales order.
        /// </summary>
        /// <value>The status of the sales order.</value>
        [Required]
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Date of order.
        /// </summary>
        /// <value>Date of order.</value>
        [Required]
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  
        /// **collection/positions (GET)**: Following this link results in a list of all positions of this order.
        /// </summary>
        /// <value>Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **collection/positions (GET)**: Following this link results in a list of all positions of this order.</value>
        [Required]
        [DataMember(Name="_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Nr: ").Append(Nr).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeDesc: ").Append(TypeDesc).Append("\n");
            sb.Append("  SendMethod: ").Append(SendMethod).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Nr == other.Nr ||
                    Nr != null &&
                    Nr.Equals(other.Nr)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    TypeDesc == other.TypeDesc ||
                    TypeDesc != null &&
                    TypeDesc.Equals(other.TypeDesc)
                ) && 
                (
                    SendMethod == other.SendMethod ||
                    SendMethod != null &&
                    SendMethod.Equals(other.SendMethod)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nr != null)
                    hashCode = hashCode * 59 + Nr.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (TypeDesc != null)
                    hashCode = hashCode * 59 + TypeDesc.GetHashCode();
                    if (SendMethod != null)
                    hashCode = hashCode * 59 + SendMethod.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Order left, Order right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Order left, Order right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
