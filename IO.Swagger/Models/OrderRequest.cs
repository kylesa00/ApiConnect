/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderRequest : IEquatable<OrderRequest>
    { 
        /// <summary>
        /// The number of the ordering customer
        /// </summary>
        /// <value>The number of the ordering customer</value>
        [Required]
        [DataMember(Name="customerNr")]
        public string CustomerNr { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        [Required]
        [DataMember(Name = "branchId")]
        public string BranchId { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        [DataMember(Name = "courierServiceCode")]
        public string CourierServiceCode { get; set; }

        /// <summary>
        /// Method of delivering ordered goods
        /// </summary>
        /// <value>Method of delivering ordered goods</value>
        [Required]
        [DataMember(Name="sendMethod")]
        public string SendMethod { get; set; }

        /// <summary>
        /// Flag indicating the desire of &#x60;orderItem&#x60;s being delivered separately, in case they have different&#x60;arrivalTime&#x60;.
        /// </summary>
        /// <value>Flag indicating the desire of &#x60;orderItem&#x60;s being delivered separately, in case they have different&#x60;arrivalTime&#x60;.</value>
        [DataMember(Name="partialDelivery")]
        public bool? PartialDelivery { get; set; }

        /// <summary>
        /// Code for paying ordered goods
        /// </summary>
        /// <value>Code for paying ordered goods</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            
            /// <summary>
            /// Enum CASHEnum for CASH
            /// </summary>
            [EnumMember(Value = "CASH")]
            CASHEnum = 1,
            
            /// <summary>
            /// Enum CARDEnum for CARD
            /// </summary>
            [EnumMember(Value = "CARD")]
            CARDEnum = 2,
            
            /// <summary>
            /// Enum DIRECTINVOICEEnum for DIRECTINVOICE
            /// </summary>
            [EnumMember(Value = "DIRECTINVOICE")]
            DIRECTINVOICEEnum = 3,
            
            /// <summary>
            /// Enum RECHNUNGEnum for RECHNUNG
            /// </summary>
            [EnumMember(Value = "RECHNUNG")]
            RECHNUNGEnum = 4
        }

        /// <summary>
        /// Code for paying ordered goods
        /// </summary>
        /// <value>Code for paying ordered goods</value>
        [Required]
        [DataMember(Name="paymentMethod")]
        public PaymentMethodEnum? PaymentMethod { get; set; }

        /// <summary>
        /// The id of the address where the &#x60;orderItems&#x60; will be delivered to.
        /// </summary>
        /// <value>The id of the address where the &#x60;orderItems&#x60; will be delivered to.</value>
        [DataMember(Name="deliveryAddressId")]
        public string DeliveryAddressId { get; set; }

        /// <summary>
        /// The id of the store where the customer will pick up the articles from, in case &#x60;sendMethod&#x60; is PICKUP. For PICKUP with no branchId, the default of customer will be used.
        /// </summary>
        /// <value>The id of the store where the customer will pick up the articles from, in case &#x60;sendMethod&#x60; is PICKUP. For PICKUP with no branchId, the default of customer will be used.</value>
        [DataMember(Name="pickupBranchId")]
        public string PickupBranchId { get; set; }

        /// <summary>
        /// Reference text for the header of the order which will be used in all documents e.g. invoice.
        /// </summary>
        /// <value>Reference text for the header of the order which will be used in all documents e.g. invoice.</value>
        [DataMember(Name="customerRefText")]
        public string CustomerRefText { get; set; }

        /// <summary>
        /// Message to a real-person processor of the order. If a message is placed, the order cannot be created until a seller handles it manually.
        /// </summary>
        /// <value>Message to a real-person processor of the order. If a message is placed, the order cannot be created until a seller handles it manually.</value>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets SingleInvoice
        /// </summary>
        [DataMember(Name="singleInvoice")]
        public bool? SingleInvoice { get; set; }

        /// <summary>
        /// Gets or Sets CompleteInvoice
        /// </summary>
        [DataMember(Name="completeInvoice")]
        public bool? CompleteInvoice { get; set; }

        /// <summary>
        /// Employee personal number
        /// </summary>
        /// <value>Employee personal number</value>
        [DataMember(Name="personalNumber")]
        public string PersonalNumber { get; set; }

        /// <summary>
        /// The sales origin
        /// </summary>
        /// <value>The sales origin</value>
        [DataMember(Name="salesOrigin")]
        public string SalesOrigin { get; set; }

        /// <summary>
        /// The id of the sales order category
        /// </summary>
        /// <value>The id of the sales order category</value>
        [DataMember(Name="orderType")]
        public string OrderType { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        [DataMember(Name = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        [DataMember(Name = "email")]
        public string Email { get; set; }

        /// <summary>
        /// List of items that are requested to be ordered.
        /// </summary>
        /// <value>List of items that are requested to be ordered.</value>
        [Required]
        [DataMember(Name="items")]
        public List<OrderRequestItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderRequest {\n");
            sb.Append("  CustomerNr: ").Append(CustomerNr).Append("\n");
            sb.Append("  SendMethod: ").Append(SendMethod).Append("\n");
            sb.Append("  PartialDelivery: ").Append(PartialDelivery).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  DeliveryAddressId: ").Append(DeliveryAddressId).Append("\n");
            sb.Append("  PickupBranchId: ").Append(PickupBranchId).Append("\n");
            sb.Append("  CustomerRefText: ").Append(CustomerRefText).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SingleInvoice: ").Append(SingleInvoice).Append("\n");
            sb.Append("  CompleteInvoice: ").Append(CompleteInvoice).Append("\n");
            sb.Append("  PersonalNumber: ").Append(PersonalNumber).Append("\n");
            sb.Append("  SalesOrigin: ").Append(SalesOrigin).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderRequest)obj);
        }

        /// <summary>
        /// Returns true if OrderRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerNr == other.CustomerNr ||
                    CustomerNr != null &&
                    CustomerNr.Equals(other.CustomerNr)
                ) && 
                (
                    SendMethod == other.SendMethod ||
                    SendMethod != null &&
                    SendMethod.Equals(other.SendMethod)
                ) && 
                (
                    PartialDelivery == other.PartialDelivery ||
                    PartialDelivery != null &&
                    PartialDelivery.Equals(other.PartialDelivery)
                ) && 
                (
                    PaymentMethod == other.PaymentMethod ||
                    PaymentMethod != null &&
                    PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    DeliveryAddressId == other.DeliveryAddressId ||
                    DeliveryAddressId != null &&
                    DeliveryAddressId.Equals(other.DeliveryAddressId)
                ) && 
                (
                    PickupBranchId == other.PickupBranchId ||
                    PickupBranchId != null &&
                    PickupBranchId.Equals(other.PickupBranchId)
                ) && 
                (
                    CustomerRefText == other.CustomerRefText ||
                    CustomerRefText != null &&
                    CustomerRefText.Equals(other.CustomerRefText)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    SingleInvoice == other.SingleInvoice ||
                    SingleInvoice != null &&
                    SingleInvoice.Equals(other.SingleInvoice)
                ) && 
                (
                    CompleteInvoice == other.CompleteInvoice ||
                    CompleteInvoice != null &&
                    CompleteInvoice.Equals(other.CompleteInvoice)
                ) && 
                (
                    PersonalNumber == other.PersonalNumber ||
                    PersonalNumber != null &&
                    PersonalNumber.Equals(other.PersonalNumber)
                ) && 
                (
                    SalesOrigin == other.SalesOrigin ||
                    SalesOrigin != null &&
                    SalesOrigin.Equals(other.SalesOrigin)
                ) && 
                (
                    OrderType == other.OrderType ||
                    OrderType != null &&
                    OrderType.Equals(other.OrderType)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerNr != null)
                    hashCode = hashCode * 59 + CustomerNr.GetHashCode();
                    if (SendMethod != null)
                    hashCode = hashCode * 59 + SendMethod.GetHashCode();
                    if (PartialDelivery != null)
                    hashCode = hashCode * 59 + PartialDelivery.GetHashCode();
                    if (PaymentMethod != null)
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                    if (DeliveryAddressId != null)
                    hashCode = hashCode * 59 + DeliveryAddressId.GetHashCode();
                    if (PickupBranchId != null)
                    hashCode = hashCode * 59 + PickupBranchId.GetHashCode();
                    if (CustomerRefText != null)
                    hashCode = hashCode * 59 + CustomerRefText.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (SingleInvoice != null)
                    hashCode = hashCode * 59 + SingleInvoice.GetHashCode();
                    if (CompleteInvoice != null)
                    hashCode = hashCode * 59 + CompleteInvoice.GetHashCode();
                    if (PersonalNumber != null)
                    hashCode = hashCode * 59 + PersonalNumber.GetHashCode();
                    if (SalesOrigin != null)
                    hashCode = hashCode * 59 + SalesOrigin.GetHashCode();
                    if (OrderType != null)
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderRequest left, OrderRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderRequest left, OrderRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
