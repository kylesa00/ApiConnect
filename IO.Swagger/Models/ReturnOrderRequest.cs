/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnOrderRequest : IEquatable<ReturnOrderRequest>
    { 
        /// <summary>
        /// The id of the warehouse. If not set, the invent location from current worker will be used - - one of branchId and personalNumber must be set
        /// </summary>
        /// <value>The id of the warehouse. If not set, the invent location from current worker will be used - - one of branchId and personalNumber must be set</value>
        [DataMember(Name="branchId")]
        public string BranchId { get; set; }

        /// <summary>
        /// The Sales Rep’s Personal Number of the Customer’s Sales Group. Will be used as current worker - - one of branchId and personalNumber must be set
        /// </summary>
        /// <value>The Sales Rep’s Personal Number of the Customer’s Sales Group. Will be used as current worker - - one of branchId and personalNumber must be set</value>
        [DataMember(Name="personalNumber")]
        public string PersonalNumber { get; set; }

        /// <summary>
        /// Defines the record for default values from return order name table.
        /// </summary>
        /// <value>Defines the record for default values from return order name table.</value>
        [Required]
        [DataMember(Name="returnOrderName")]
        public string ReturnOrderName { get; set; }

        /// <summary>
        /// True, if return order receive confirmation document should be printed. If not set or false no document will be printed.
        /// </summary>
        /// <value>True, if return order receive confirmation document should be printed. If not set or false no document will be printed.</value>
        [DataMember(Name="returnOrderDocumentConfirmationPrint")]
        public bool? ReturnOrderDocumentConfirmationPrint { get; set; }

        /// <summary>
        /// List of ReturnOrderRequestPositions
        /// </summary>
        /// <value>List of ReturnOrderRequestPositions</value>
        [Required]
        [DataMember(Name="returnOrderRequestPositions")]
        public List<ReturnOrderRequestPosition> ReturnOrderRequestPositions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnOrderRequest {\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  PersonalNumber: ").Append(PersonalNumber).Append("\n");
            sb.Append("  ReturnOrderName: ").Append(ReturnOrderName).Append("\n");
            sb.Append("  ReturnOrderDocumentConfirmationPrint: ").Append(ReturnOrderDocumentConfirmationPrint).Append("\n");
            sb.Append("  ReturnOrderRequestPositions: ").Append(ReturnOrderRequestPositions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnOrderRequest)obj);
        }

        /// <summary>
        /// Returns true if ReturnOrderRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnOrderRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BranchId == other.BranchId ||
                    BranchId != null &&
                    BranchId.Equals(other.BranchId)
                ) && 
                (
                    PersonalNumber == other.PersonalNumber ||
                    PersonalNumber != null &&
                    PersonalNumber.Equals(other.PersonalNumber)
                ) && 
                (
                    ReturnOrderName == other.ReturnOrderName ||
                    ReturnOrderName != null &&
                    ReturnOrderName.Equals(other.ReturnOrderName)
                ) && 
                (
                    ReturnOrderDocumentConfirmationPrint == other.ReturnOrderDocumentConfirmationPrint ||
                    ReturnOrderDocumentConfirmationPrint != null &&
                    ReturnOrderDocumentConfirmationPrint.Equals(other.ReturnOrderDocumentConfirmationPrint)
                ) && 
                (
                    ReturnOrderRequestPositions == other.ReturnOrderRequestPositions ||
                    ReturnOrderRequestPositions != null &&
                    ReturnOrderRequestPositions.SequenceEqual(other.ReturnOrderRequestPositions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BranchId != null)
                    hashCode = hashCode * 59 + BranchId.GetHashCode();
                    if (PersonalNumber != null)
                    hashCode = hashCode * 59 + PersonalNumber.GetHashCode();
                    if (ReturnOrderName != null)
                    hashCode = hashCode * 59 + ReturnOrderName.GetHashCode();
                    if (ReturnOrderDocumentConfirmationPrint != null)
                    hashCode = hashCode * 59 + ReturnOrderDocumentConfirmationPrint.GetHashCode();
                    if (ReturnOrderRequestPositions != null)
                    hashCode = hashCode * 59 + ReturnOrderRequestPositions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnOrderRequest left, ReturnOrderRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnOrderRequest left, ReturnOrderRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
