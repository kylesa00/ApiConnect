/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UsedCreditLimit : IEquatable<UsedCreditLimit>
    {
        /// <summary>
        /// postedBalance
        /// </summary>
        /// <value>postedBalance</value>
        [DataMember(Name= "postedBalance")]
        public double? PostedBalance { get; set; }

        /// <summary>
        /// inProcessAmount
        /// </summary>
        /// <value>inProcessAmount</value>
        [DataMember(Name= "inProcessAmount")]
        public double? InProcessAmount { get; set; }

        /// <summary>
        /// Enumeration value of the payment type.
        /// </summary>
        /// <value>Enumeration value of the payment type.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentMethodAnalyticalCardEnum
        {
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 0,

            /// <summary>
            /// Enum WholesaleEnum for Wholesale
            /// </summary>
            [EnumMember(Value = "Wholesale")]
            Wholesale = 1,

            /// <summary>
            /// Enum CashPaymentEnumEnum for CashPaymentEnum
            /// </summary>
            [EnumMember(Value = "CashPayment")]
            CashPayment = 2,
        }

        /// <summary>
        /// Enumeration value of the status.
        /// </summary>
        /// <value>Enumeration value of the status.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusAnalyticalCardEnum
        {
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 0,

            /// <summary>
            /// Enum PostedEnum for Posted
            /// </summary>
            [EnumMember(Value = "Posted")]
            Posted = 1,

            /// <summary>
            /// Enum In ProcessEnumEnum for InProcess
            /// </summary>
            [EnumMember(Value = "InProcess")]
            InProcess = 2,
        }

        /// <summary>
        /// Enumeration value of the sorting.
        /// </summary>
        /// <value>Enumeration value of the sorting.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SortingAnalyticalCardEnum
        {

            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 0,

            /// <summary>
            /// Enum PostingDateASC Enum for Posting Date ASC
            /// </summary>
            [EnumMember(Value = "PostingDateASC")]
            PostingDateASC = 1,

            /// <summary>
            /// Enum In PostingDateDESC for PostingDateDESC
            /// </summary>
            [EnumMember(Value = "PostingDateDESC")]
            PostingDateDESC = 2,

            /// <summary>
            /// Enum In DueDateASC for DueDateASC
            /// </summary>
            [EnumMember(Value = "DueDateASC")]
            DueDateASC = 3,

            /// <summary>
            /// Enum In DueDateDESC for DueDateDESC
            /// </summary>
            [EnumMember(Value = "DueDateDESC")]
            DueDateDESC = 4,
        }

        /// <summary>
        /// Enumeration value of the status.
        /// </summary>
        /// <value>Enumeration value of the status.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DocumentTypeAnalyticalCardEnum
        {
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 0,

            /// <summary>
            /// Enum Payment for Payment
            /// </summary>
            [EnumMember(Value = "Payment")]
            Payment = 1,

            /// <summary>
            /// Enum Invoice for Invoice
            /// </summary>
            [EnumMember(Value = "Invoice")]
            Invoice = 2,

            /// <summary>
            /// Enum CreditMemo for CreditMemo
            /// </summary>
            [EnumMember(Value = "CreditMemo")]
            CreditMemo = 3,

            /// <summary>
            /// Enum FinanceChargeMemo for FinanceChargeMemo
            /// </summary>
            [EnumMember(Value = "FinanceChargeMemo")]
            FinanceChargeMemo = 4,

            /// <summary>
            /// Enum Reminder for Reminder
            /// </summary>
            [EnumMember(Value = "Reminder")]
            Reminder = 5,

            /// <summary>
            /// Enum Refund for Refund
            /// </summary>
            [EnumMember(Value = "Refund")]
            Refund = 6,

            /// <summary>
            /// Enum Advance for Advance
            /// </summary>
            [EnumMember(Value = "Advance")]
            Advance = 7,

            /// <summary>
            /// Enum CorrAdvance for CorrAdvance
            /// </summary>
            [EnumMember(Value = "CorrAdvance")]
            CorrAdvance = 8,

            /// <summary>
            /// Enum AdvanceInvoice for AdvanceInvoice
            /// </summary>
            [EnumMember(Value = "AdvanceInvoice")]
            AdvanceInvoice = 9,

            /// <summary>
            /// Enum CorrAdvanceInvoice for CorrAdvanceInvoice
            /// </summary>
            [EnumMember(Value = "CorrAdvanceInvoice")]
            CorrAdvanceInvoice = 10,
        }
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditLimit {\n");
            sb.Append("  PostedBalance: ").Append(PostedBalance).Append("\n");
            sb.Append("  InProcessAmount: ").Append(InProcessAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UsedCreditLimit)obj);
        }

        /// <summary>
        /// Returns true if CreditLimit instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditLimit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsedCreditLimit other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PostedBalance == other.PostedBalance ||
                    PostedBalance != null &&
                    PostedBalance.Equals(other.PostedBalance)
                ) && 
                (
                    InProcessAmount == other.InProcessAmount ||
                    InProcessAmount != null &&
                    InProcessAmount.Equals(other.InProcessAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PostedBalance != null)
                    hashCode = hashCode * 59 + PostedBalance.GetHashCode();
                    if (InProcessAmount != null)
                    hashCode = hashCode * 59 + InProcessAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UsedCreditLimit left, UsedCreditLimit right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UsedCreditLimit left, UsedCreditLimit right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
