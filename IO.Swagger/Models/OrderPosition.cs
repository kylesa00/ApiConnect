/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderPosition : IEquatable<OrderPosition>
    { 
        /// <summary>
        /// Sequence number of position in order.
        /// </summary>
        /// <value>Sequence number of position in order.</value>
        [Required]
        [DataMember(Name="sequence")]
        public long? Sequence { get; set; }

        /// <summary>
        /// Id of article. Basic article information can also retrieved by following the articles link. +  +  Note: Usually, returning identifiers from services is avoided, but the id of an article should through the catalog data have a meaning for a webshop application.
        /// </summary>
        /// <value>Id of article. Basic article information can also retrieved by following the articles link. +  +  Note: Usually, returning identifiers from services is avoided, but the id of an article should through the catalog data have a meaning for a webshop application.</value>
        [Required]
        [DataMember(Name="articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// Quantity of order position.
        /// </summary>
        /// <value>Quantity of order position.</value>
        [Required]
        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Status of this order position.
        /// </summary>
        /// <value>Status of this order position.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONEEnum = 1,
            
            /// <summary>
            /// Enum BACKORDEREnum for BACKORDER
            /// </summary>
            [EnumMember(Value = "BACKORDER")]
            BACKORDEREnum = 2,
            
            /// <summary>
            /// Enum DELIVEREDEnum for DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVEREDEnum = 3,
            
            /// <summary>
            /// Enum INVOICEDEnum for INVOICED
            /// </summary>
            [EnumMember(Value = "INVOICED")]
            INVOICEDEnum = 4,
            
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 5,
            
            /// <summary>
            /// Enum PENDINGEnum for PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDINGEnum = 6
        }

        /// <summary>
        /// Status of this order position.
        /// </summary>
        /// <value>Status of this order position.</value>
        [Required]
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  
        /// **self (GET)**: The link to this order position representation itself. Following this link returns representation of very same order position resource. +  +  
        /// **article (GET)**: Following this link leads to the article resource, this order position belongs to.
        /// </summary>
        /// <value>Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **self (GET)**: The link to this order position representation itself. Following this link returns representation of very same order position resource. +  +  **article (GET)**: Following this link leads to the article resource, this order position belongs to.</value>
        [Required]
        [DataMember(Name="_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPosition {\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderPosition)obj);
        }

        /// <summary>
        /// Returns true if OrderPosition instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPosition other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Sequence == other.Sequence ||
                    Sequence != null &&
                    Sequence.Equals(other.Sequence)
                ) && 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Sequence != null)
                    hashCode = hashCode * 59 + Sequence.GetHashCode();
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderPosition left, OrderPosition right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderPosition left, OrderPosition right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
