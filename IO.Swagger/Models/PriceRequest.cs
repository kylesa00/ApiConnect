/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PriceRequest : IEquatable<PriceRequest>
    { 
        /// <summary>
        /// The number of the customer the price are request for.
        /// </summary>
        /// <value>The number of the customer the price are request for.</value>
        [Required]
        [DataMember(Name="customerNr")]
        public string CustomerNr { get; set; }

        /// <summary>
        /// Indicates whether the assorted quantity discounts shall be recalculated or not.
        /// </summary>
        /// <value>Indicates whether the assorted quantity discounts shall be recalculated or not.</value>
        [DataMember(Name="calculateAssortedQtyDisc")]
        public bool? CalculateAssortedQtyDisc { get; set; }

        /// <summary>
        /// List of article positions for which prices are requested.
        /// </summary>
        /// <value>List of article positions for which prices are requested.</value>
        [Required]
        [DataMember(Name="items")]
        public List<PriceRequestItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceRequest {\n");
            sb.Append("  CustomerNr: ").Append(CustomerNr).Append("\n");
            sb.Append("  CalculateAssortedQtyDisc: ").Append(CalculateAssortedQtyDisc).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PriceRequest)obj);
        }

        /// <summary>
        /// Returns true if PriceRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PriceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerNr == other.CustomerNr ||
                    CustomerNr != null &&
                    CustomerNr.Equals(other.CustomerNr)
                ) && 
                (
                    CalculateAssortedQtyDisc == other.CalculateAssortedQtyDisc ||
                    CalculateAssortedQtyDisc != null &&
                    CalculateAssortedQtyDisc.Equals(other.CalculateAssortedQtyDisc)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerNr != null)
                    hashCode = hashCode * 59 + CustomerNr.GetHashCode();
                    if (CalculateAssortedQtyDisc != null)
                    hashCode = hashCode * 59 + CalculateAssortedQtyDisc.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PriceRequest left, PriceRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PriceRequest left, PriceRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
