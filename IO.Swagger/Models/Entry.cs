/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using static IO.Swagger.Models.UsedCreditLimit;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Entry : IEquatable<Entry>
    {
        /// <summary>
        /// Document Number.
        /// </summary>
        /// <value>Document Number.</value>
        [DataMember(Name = "documentNr")]
        public string DocumentNr { get; set; }

        /// <summary>
        /// Date of posting.
        /// </summary>
        /// <value>Date of posting.</value>
        [Required]
        [DataMember(Name = "postingDate")]
        public DateTime? PostingDate { get; set; }

        /// <summary>
        /// Date of due.
        /// </summary>
        /// <value>Date of due.</value>
        [Required]
        [DataMember(Name = "dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Description of entry line.
        /// </summary>
        /// <value>Description of entry line.</value>
        [DataMember(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// ExternalDocumentNr.
        /// </summary>
        /// <value>ExternalDocumentNr.</value>
        [DataMember(Name = "externalDocumentNr")]
        public string ExternalDocumentNr  { get; set; }

        /// <summary>
        /// Salesperson.
        /// </summary>
        /// <value>Salesperson.</value>
        [DataMember(Name = "salesperson")]
        public string Salesperson { get; set; }

        /// <summary>
        /// remaining Amount  
        /// </summary>
        /// <value>remaining Amount.</value>
        ///   [Required]
        [DataMember(Name = "remainingAmount")]
        public double RemainingAmount { get; set; }

        /// <summary>
        /// remaining Amount  
        /// </summary>
        /// <value>remaining Amount.</value>
        ///   [Required]
        [DataMember(Name = "entryLinesNo")]
        public int EntryLinesNo { get; set; }


        /// <summary>
        /// EntryLines  
        /// </summary>
        /// <value>EntryLines</value>
        ///   [Required]
        [DataMember(Name = "entryLines")]
        public List<EntryLine> EntryLines { get; set; }

        /// <summary>
        /// Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +  +  
        /// **self (GET)**: The link to list of orders representation itself. Following this link returns the very same order list representation. +  +  
        /// **next (GET)**: The &#x60;next&#x60; link is present, if older orders than returned ones exist. This link repeats query parameters, 
        /// which are provided in original request. That way, clients do not need to construct URIs themselves to get the batch of next orders. +  + 
        /// **prev (GET)**: The &#x60;prev&#x60; link is present, if more recent orders than returned ones exit. This link repeats query parameters, which are provided in original request. That way, clients don&#39;t need to construct URIs themselves to get the batch of previous orders.
        /// </summary>
        /// <value>Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +  +  **self (GET)**: The link to list of orders representation itself. Following this link returns the very same order list representation. +  +  **next (GET)**: The &#x60;next&#x60; link is present, if older orders than returned ones exist. This link repeats query parameters, which are provided in original request. That way, clients do not need to construct URIs themselves to get the batch of next orders. +  +  **prev (GET)**: The &#x60;prev&#x60; link is present, if more recent orders than returned ones exit. This link repeats query parameters, which are provided in original request. That way, clients don&#39;t need to construct URIs themselves to get the batch of previous orders.</value>
        [Required]
        [DataMember(Name = "_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entry other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                
                (
                   true
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                   
                    
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Entry left, Entry right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Entry left, Entry right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
