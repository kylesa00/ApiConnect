/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Invoice : IEquatable<Invoice>
    { 
        /// <summary>
        /// The invoice identification number.
        /// </summary>
        /// <value>The invoice identification number.</value>
        [Required]
        [DataMember(Name="invoiceNr")]
        public string InvoiceNr { get; set; }

        /// <summary>
        /// The invoice timestamp.
        /// </summary>
        /// <value>The invoice timestamp.</value>
        [Required]
        [DataMember(Name="invoiceDate")]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Invoice customer name.
        /// </summary>
        /// <value>Invoice customer name.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// The corresponding customer identification number.
        /// </summary>
        /// <value>The corresponding customer identification number.</value>
        [Required]
        [DataMember(Name="customerNr")]
        public string CustomerNr { get; set; }

        /// <summary>
        /// Invoice customer zipcode.
        /// </summary>
        /// <value>Invoice customer zipcode.</value>
        [DataMember(Name="zipcode")]
        public string Zipcode { get; set; }

        /// <summary>
        /// Invoice customer city.
        /// </summary>
        /// <value>Invoice customer city.</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Invoice customer country.
        /// </summary>
        /// <value>Invoice customer country.</value>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Terms of payment.
        /// </summary>
        /// <value>Terms of payment.</value>
        [Required]
        [DataMember(Name="termOfPayment")]
        public string TermOfPayment { get; set; }

        /// <summary>
        /// The total value of the invoice.
        /// </summary>
        /// <value>The total value of the invoice.</value>
        [DataMember(Name="amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// The type of payment of the random order linked to the invoice. An invoice can have positions from more than one orders.
        /// </summary>
        /// <value>The type of payment of the random order linked to the invoice. An invoice can have positions from more than one orders.</value>
        [Required]
        [DataMember(Name="paymentType")]
        public string PaymentType { get; set; }

        /// <summary>
        /// Map of links which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **self (GET)**: The link to invoice representation itself. Following this link returns representation of very same invoice list representation.           
        /// </summary>
        /// <value>Map of links which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **self (GET)**: The link to invoice representation itself. Following this link returns representation of very same invoice list representation.           </value>
        [DataMember(Name="_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  InvoiceNr: ").Append(InvoiceNr).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CustomerNr: ").Append(CustomerNr).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  TermOfPayment: ").Append(TermOfPayment).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Invoice)obj);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="other">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InvoiceNr == other.InvoiceNr ||
                    InvoiceNr != null &&
                    InvoiceNr.Equals(other.InvoiceNr)
                ) && 
                (
                    InvoiceDate == other.InvoiceDate ||
                    InvoiceDate != null &&
                    InvoiceDate.Equals(other.InvoiceDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    CustomerNr == other.CustomerNr ||
                    CustomerNr != null &&
                    CustomerNr.Equals(other.CustomerNr)
                ) && 
                (
                    Zipcode == other.Zipcode ||
                    Zipcode != null &&
                    Zipcode.Equals(other.Zipcode)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    TermOfPayment == other.TermOfPayment ||
                    TermOfPayment != null &&
                    TermOfPayment.Equals(other.TermOfPayment)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InvoiceNr != null)
                    hashCode = hashCode * 59 + InvoiceNr.GetHashCode();
                    if (InvoiceDate != null)
                    hashCode = hashCode * 59 + InvoiceDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (CustomerNr != null)
                    hashCode = hashCode * 59 + CustomerNr.GetHashCode();
                    if (Zipcode != null)
                    hashCode = hashCode * 59 + Zipcode.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (TermOfPayment != null)
                    hashCode = hashCode * 59 + TermOfPayment.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Invoice left, Invoice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Invoice left, Invoice right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
