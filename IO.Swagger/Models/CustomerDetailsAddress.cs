/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerDetailsAddress : IEquatable<CustomerDetailsAddress>
    {
        /// <summary>
        /// Id of the idLocation. 
        /// </summary>
        /// <value>Id of the idLocation.</value>
        [Required]
        [DataMember(Name= "idLocation")]
        public string IdLocation { get; set; }

        /// <summary>
        /// Address description.
        /// </summary>
        /// <value>Address description.</value>
        [DataMember(Name= "addressDesc")]
        public string AddressDesc { get; set; }

        /// <summary>
        /// Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.
        /// </summary>
        /// <value>Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AddressTypeEnum
        {

            /// <summary>
            /// Enum DELIVERYEnum for DELIVERY
            /// </summary>
            [EnumMember(Value = "DELIVERY")]
            DELIVERYEnum = 1,

            /// <summary>
            /// Enum INVOICEEnum for INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICEEnum = 2,

            /// <summary>
            /// Enum DEFAULTEnum for DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULTEnum = 3
        }

        /// <summary>
        /// Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.
        /// </summary>
        /// <value>Enumeration value for type (or role) of address. While one and the same address can appear in different roles, the type distinguish them.</value>
        [DataMember(Name = "addressType")]
        public AddressTypeEnum? AddressType { get; set; }

        /// <summary>
        /// Boolean is primary address.
        /// </summary>
        [DataMember(Name= "isPrimary")]
        public bool IsPrimary { get; set; }

        /// <summary>
        /// Address street.
        /// </summary>
        /// <value>Address street.</value>
        [DataMember(Name= "addressStreet")]
        public string AddressStreet { get; set; }

        /// <summary>
        /// City of address.
        /// </summary>
        /// <value>City of address.</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Zip.
        /// </summary>
        /// <value>Zip.</value>
        [DataMember(Name= "zip")]
        public string Zip { get; set; }

        /// <summary>
        /// Sort.
        /// </summary>
        /// <value>Sort.</value>
        [DataMember(Name= "sort")]
        public int Sort { get; set; }

      

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomerDetailsAddress)obj);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDetailsAddress other)
        {
            return true;
                
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                 
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerDetailsAddress left, CustomerDetailsAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerDetailsAddress left, CustomerDetailsAddress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
