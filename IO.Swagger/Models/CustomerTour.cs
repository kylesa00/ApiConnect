/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomerTour : IEquatable<CustomerTour>
    { 
        /// <summary>
        /// The customer's unique number.
        /// </summary>
        /// <value>The customer's unique number.</value>
        [Required]
        [DataMember(Name="customerNumber")]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Identifier for the branch associated with the tour.
        /// </summary>
        /// <value>Identifier for the branch associated with the tour.</value>
        [Required]
        [DataMember(Name="branchId")]
        public string BranchId { get; set; }

        /// <summary>
        /// Name of the customer's tour.
        /// </summary>
        /// <value>Name of the customer's tour.</value>
        [Required]
        [DataMember(Name="tourName")]
        public string CustomerTourName { get; set; }

        /// <summary>
        /// Minutes before departure after which changes are not allowed.
        /// </summary>
        /// <value>Minutes before departure after which changes are not allowed.</value>
        [Required]
        [DataMember(Name="cutOffMinutes")]
        public int CutOffMinutes { get; set; }

        /// <summary>
        /// Days when the tour operates. Format: "1,2,3,4" (each number represents a day of the week).
        /// </summary>
        /// <value>Days when the tour operates. Format: "1,2,3,4" (each number represents a day of the week).</value>
        [Required]
        [DataMember(Name="tourDays")]
        public string TourDays { get; set; }

        /// <summary>
        /// Departure time of the tour. Format: "HH:mm".
        /// </summary>
        /// <value>Departure time of the tour. Format: "HH:mm".</value>
        [Required]
        [DataMember(Name="tourDepartureTime")]
        public string TourDepartureTime { get; set; }

        /// <summary>
        /// Special instructions or use-case for the tour. Optional, may be null.
        /// </summary>
        /// <value>Special instructions or use-case for the tour. Optional, may be null.</value>
        [Required]
        [DataMember(Name="specialUse")]
        public string? SpecialUse { get; set; }

        /// <summary>
        /// Distribution center location identifier.
        /// </summary>
        /// <value>Distribution center location identifier.</value>
        [Required]
        [DataMember(Name="locationId")]
        public string? LocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerTour {\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  CustomerTourName: ").Append(CustomerTourName).Append("\n");
            sb.Append("  CutOffMinutes: ").Append(CutOffMinutes).Append("\n");
            sb.Append("  TourDays: ").Append(TourDays).Append("\n");
            sb.Append("  TourDepartureTime: ").Append(TourDepartureTime).Append("\n");
            sb.Append("  SpecialUse: ").Append(SpecialUse).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if CustomerTour instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomerTour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerTour other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerNumber == other.CustomerNumber ||
                    CustomerNumber != null && CustomerNumber.Equals(other.CustomerNumber)
                ) &&
                (
                    BranchId == other.BranchId ||
                    BranchId != null && BranchId.Equals(other.BranchId)
                ) &&
                (
                    CustomerTourName == other.CustomerTourName ||
                    CustomerTourName != null && CustomerTourName.Equals(other.CustomerTourName)
                ) &&
                (
                    CutOffMinutes == other.CutOffMinutes
                ) &&
                (
                    TourDays == other.TourDays ||
                    TourDays != null && TourDays.Equals(other.TourDays)
                ) &&
                (
                    TourDepartureTime == other.TourDepartureTime ||
                    TourDepartureTime != null && TourDepartureTime.Equals(other.TourDepartureTime)
                ) &&
                (
                    SpecialUse == other.SpecialUse ||
                    SpecialUse != null && SpecialUse.Equals(other.SpecialUse)
                ) &&
                (
                    LocationId == other.LocationId ||
                    LocationId != null && LocationId.Equals(other.LocationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CustomerNumber != null)
                    hashCode = hashCode * 59 + CustomerNumber.GetHashCode();
                if (BranchId != null)
                    hashCode = hashCode * 59 + BranchId.GetHashCode();
                if (CustomerTourName != null)
                    hashCode = hashCode * 59 + CustomerTourName.GetHashCode();
                hashCode = hashCode * 59 + CutOffMinutes.GetHashCode();
                if (TourDays != null)
                    hashCode = hashCode * 59 + TourDays.GetHashCode();
                if (TourDepartureTime != null)
                    hashCode = hashCode * 59 + TourDepartureTime.GetHashCode();
                if (SpecialUse != null)
                    hashCode = hashCode * 59 + SpecialUse.GetHashCode();
                if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomerTour left, CustomerTour right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomerTour left, CustomerTour right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
