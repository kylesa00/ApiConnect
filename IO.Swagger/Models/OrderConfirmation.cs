/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrderConfirmation : IEquatable<OrderConfirmation>
    { 
        /// <summary>
        /// Reserved number of the order that will be created asynchronously. The order cannot be retrieved immediately, the time to actual creation cannot be predicted. Since there is no notification mechanism, polling for the order is the only way to check for the order be actually created.
        /// </summary>
        /// <value>Reserved number of the order that will be created asynchronously. The order cannot be retrieved immediately, the time to actual creation cannot be predicted. Since there is no notification mechanism, polling for the order is the only way to check for the order be actually created.</value>
        [DataMember(Name="orderNr")]
        public string OrderNr { get; set; }

        /// <summary>
        /// A query string which can be attached to an AX URL in order to access the  created sales order in ERP.  
        /// </summary>
        /// <value>A query string which can be attached to an AX URL in order to access the  created sales order in ERP.  </value>
        [DataMember(Name="axOrderURL")]
        public string AxOrderURL { get; set; }

        /// <summary>
        /// A list of workIds of the work that was creates in case that the new sales order has a process status change and the “Release to Warehouse” 
        /// and Wave processing was automatically done due to the process status change.
        /// </summary>
        /// <value>A list of workIds of the work that was creates in case that the new sales order has a process status change and the “Release to Warehouse” and Wave processing was automatically done due to the process status change.</value>
        [DataMember(Name="workIds")]
        public List<string> WorkIds { get; set; }

        /// <summary>
        /// Indicates that all lines are directly available from any warehouse. If there are lines that are not available the resulting sales order might not be processed automatically.
        /// </summary>
        /// <value>Indicates that all lines are directly available from any warehouse. If there are lines that are not available the resulting sales order might not be processed automatically.</value>
        [DataMember(Name="allPositionsAvailable")]
        public bool? AllPositionsAvailable { get; set; }

        /// <summary>
        /// Indicates if the customer’s credit limit is exceeded. The shopping cart is created nevertheless, but the resulting sales order might not be processed automatically.
        /// </summary>
        /// <value>Indicates if the customer’s credit limit is exceeded. The shopping cart is created nevertheless, but the resulting sales order might not be processed automatically.</value>
        [DataMember(Name="creditLimitExceeded")]
        public bool? CreditLimitExceeded { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveAvailabilityLines
        /// </summary>
        [DataMember(Name="effectiveAvailabilityLines")]
        public Availabilities EffectiveAvailabilityLines { get; set; }

        /// <summary>
        /// Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **order (GET)**: The link to the order which is waiting to be created.
        /// </summary>
        /// <value>Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible links: +  +  **order (GET)**: The link to the order which is waiting to be created.</value>
        [Required]
        [DataMember(Name="_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderConfirmation {\n");
            sb.Append("  OrderNr: ").Append(OrderNr).Append("\n");
            sb.Append("  AxOrderURL: ").Append(AxOrderURL).Append("\n");
            sb.Append("  WorkIds: ").Append(WorkIds).Append("\n");
            sb.Append("  AllPositionsAvailable: ").Append(AllPositionsAvailable).Append("\n");
            sb.Append("  CreditLimitExceeded: ").Append(CreditLimitExceeded).Append("\n");
            sb.Append("  EffectiveAvailabilityLines: ").Append(EffectiveAvailabilityLines).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderConfirmation)obj);
        }

        /// <summary>
        /// Returns true if OrderConfirmation instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderConfirmation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderConfirmation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderNr == other.OrderNr ||
                    OrderNr != null &&
                    OrderNr.Equals(other.OrderNr)
                ) && 
                (
                    AxOrderURL == other.AxOrderURL ||
                    AxOrderURL != null &&
                    AxOrderURL.Equals(other.AxOrderURL)
                ) && 
                (
                    WorkIds == other.WorkIds ||
                    WorkIds != null &&
                    WorkIds.SequenceEqual(other.WorkIds)
                ) && 
                (
                    AllPositionsAvailable == other.AllPositionsAvailable ||
                    AllPositionsAvailable != null &&
                    AllPositionsAvailable.Equals(other.AllPositionsAvailable)
                ) && 
                (
                    CreditLimitExceeded == other.CreditLimitExceeded ||
                    CreditLimitExceeded != null &&
                    CreditLimitExceeded.Equals(other.CreditLimitExceeded)
                ) && 
                (
                    EffectiveAvailabilityLines == other.EffectiveAvailabilityLines ||
                    EffectiveAvailabilityLines != null &&
                    EffectiveAvailabilityLines.Equals(other.EffectiveAvailabilityLines)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrderNr != null)
                    hashCode = hashCode * 59 + OrderNr.GetHashCode();
                    if (AxOrderURL != null)
                    hashCode = hashCode * 59 + AxOrderURL.GetHashCode();
                    if (WorkIds != null)
                    hashCode = hashCode * 59 + WorkIds.GetHashCode();
                    if (AllPositionsAvailable != null)
                    hashCode = hashCode * 59 + AllPositionsAvailable.GetHashCode();
                    if (CreditLimitExceeded != null)
                    hashCode = hashCode * 59 + CreditLimitExceeded.GetHashCode();
                    if (EffectiveAvailabilityLines != null)
                    hashCode = hashCode * 59 + EffectiveAvailabilityLines.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderConfirmation left, OrderConfirmation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderConfirmation left, OrderConfirmation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
