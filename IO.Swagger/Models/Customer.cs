/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Customer : IEquatable<Customer>
    {
        #region dataMembers
        /// <summary>
        /// The number of the customer.
        /// </summary>
        /// <value>The number of the customer.</value>
        [Required]
        [DataMember(Name="nr")]
        public string Nr { get; set; }

        /// <summary>
        /// The name of the customer.
        /// </summary>
        /// <value>The name of the customer.</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Customer&#39;s value-added-tax number.
        /// </summary>
        /// <value>Customer&#39;s value-added-tax number.</value>
        [DataMember(Name="vatNr")]
        public string VatNr { get; set; }

        /// <summary>
        /// The default branch of the customer.
        /// </summary>
        /// <value>The default branch of the customer.</value>
        [DataMember(Name="defaultBranchId")]
        public string DefaultBranchId { get; set; }

        /// <summary>
        /// Comments of customer.
        /// </summary>
        /// <value>Comments of customer.</value>
        [DataMember(Name="comments")]
        public string Comments { get; set; }

        /// <summary>
        /// ISO code of language, which is preferred by the customer. This language should be provided in subsequent request for this customer. The language is then expected to be provided in &#x60;Accept-Language&#x60; HTTP header.
        /// </summary>
        /// <value>ISO code of language, which is preferred by the customer. This language should be provided in subsequent request for this customer. The language is then expected to be provided in &#x60;Accept-Language&#x60; HTTP header.</value>
        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// The personal title of a customer.
        /// </summary>
        /// <value>The personal title of a customer.</value>
        [DataMember(Name="addressSalutation")]
        public string AddressSalutation { get; set; }

        /// <summary>
        /// Enumeration value of the blocking status of customer.
        /// </summary>
        /// <value>Enumeration value of the blocking status of customer.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BlockedStatusEnum
        {
            
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONEEnum = 1,
            
            /// <summary>
            /// Enum NEVEREnum for NEVER
            /// </summary>
            [EnumMember(Value = "NEVER")]
            NEVEREnum = 2,
            
            /// <summary>
            /// Enum ALLEnum for ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALLEnum = 3,
            
            /// <summary>
            /// Enum PAYMENTEnum for PAYMENT
            /// </summary>
            [EnumMember(Value = "PAYMENT")]
            PAYMENTEnum = 4,
            
            /// <summary>
            /// Enum PROCUREMENTEnum for PROCUREMENT
            /// </summary>
            [EnumMember(Value = "PROCUREMENT")]
            PROCUREMENTEnum = 5,
            
            /// <summary>
            /// Enum INVOICEEnum for INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICEEnum = 6,
            
            /// <summary>
            /// Enum DELIVERYEnum for DELIVERY
            /// </summary>
            [EnumMember(Value = "DELIVERY")]
            DELIVERYEnum = 7,
            
            /// <summary>
            /// Enum INVOICEANDDELIVERYEnum for INVOICE_AND_DELIVERY
            /// </summary>
            [EnumMember(Value = "INVOICE_AND_DELIVERY")]
            INVOICEANDDELIVERYEnum = 8
        }

        /// <summary>
        /// Enumeration value of the blocking status of customer.
        /// </summary>
        /// <value>Enumeration value of the blocking status of customer.</value>
        [DataMember(Name="blockedStatus")]
        public BlockedStatusEnum? BlockedStatus { get; set; }

        /// <summary>
        /// Description of reason for blocked customer.
        /// </summary>
        /// <value>Description of reason for blocked customer.</value>
        [DataMember(Name="blockedReason")]
        public string BlockedReason { get; set; }

        /// <summary>
        /// ISO code of currency for invoicing the customer.
        /// </summary>
        /// <value>ISO code of currency for invoicing the customer.</value>
        /// 
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        [DataMember(Name= "directDelivery")]
        public string DirectDelivery { get; set; }

        [DataMember(Name= "defaultReturnReasonCodeId")]
        public string DefaultReturnReasonCodeId {get; set; }

        /// <summary>
        /// The &#x60;sendMethod&#x60; describes, how goods are usually delivered to the customer.
        /// </summary>
        /// <value>The &#x60;sendMethod&#x60; describes, how goods are usually delivered to the customer.</value>
        [DataMember(Name="sendMethod")]
        public string SendMethod { get; set; }

        /// <summary>
        /// The payment type of customer.
        /// </summary>
        /// <value>The payment type of customer.</value>
        [DataMember(Name="paymentType")]
        public string PaymentType { get; set; }

        /// <summary>
        /// Short description of how the customer gets invoiced.
        /// </summary>
        /// <value>Short description of how the customer gets invoiced.</value>
        [DataMember(Name="invoiceType")]
        public string InvoiceType { get; set; }

        /// <summary>
        /// Description of how the customer gets invoiced.
        /// </summary>
        /// <value>Description of how the customer gets invoiced.</value>
        [DataMember(Name="invoiceTypeDesc")]
        public string InvoiceTypeDesc { get; set; }

        /// <summary>
        /// Gets or Sets AlreadyUsedCredit
        /// </summary>
        [DataMember(Name="alreadyUsedCredit")]
        public double? AlreadyUsedCredit { get; set; }

        /// <summary>
        /// Gets or Sets AvailableCredit
        /// </summary>
        [DataMember(Name="availableCredit")]
        public double? AvailableCredit { get; set; }

        /// <summary>
        /// The letter code of the customer
        /// </summary>
        /// <value>The letter code of the customer</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum LetterCodeEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum CollectionLetter1Enum for CollectionLetter1
            /// </summary>
            [EnumMember(Value = "CollectionLetter1")]
            CollectionLetter1Enum = 2,
            
            /// <summary>
            /// Enum CollectionLetter2Enum for CollectionLetter2
            /// </summary>
            [EnumMember(Value = "CollectionLetter2")]
            CollectionLetter2Enum = 3,
            
            /// <summary>
            /// Enum CollectionLetter3Enum for CollectionLetter3
            /// </summary>
            [EnumMember(Value = "CollectionLetter3")]
            CollectionLetter3Enum = 4,
            
            /// <summary>
            /// Enum CollectionLetter4Enum for CollectionLetter4
            /// </summary>
            [EnumMember(Value = "CollectionLetter4")]
            CollectionLetter4Enum = 5
        }

        /// <summary>
        /// The letter code of the customer
        /// </summary>
        /// <value>The letter code of the customer</value>
        [DataMember(Name="letterCode")]
        public LetterCodeEnum? LetterCode { get; set; }

        /// <summary>
        /// SAG company field.
        /// </summary>
        /// <value>SAG company field.</value>
        [DataMember(Name="salesOrderPool")]
        public string SalesOrderPool { get; set; }

        /// <summary>
        /// The Sales Group of the customer.
        /// </summary>
        /// <value>The Sales Group of the customer.</value>
        [DataMember(Name="salesGroup")]
        public string SalesGroup { get; set; }

        /// <summary>
        /// The cost center which the customer belongs to.
        /// </summary>
        /// <value>The cost center which the customer belongs to.</value>
        [DataMember(Name="costCenter")]
        public string CostCenter { get; set; }

        /// <summary>
        /// The category of the customer (under PKZ_BAUM hierarchy - KuKas_DD/ KuKas_MA)
        /// </summary>
        /// <value>The category of the customer (under PKZ_BAUM hierarchy - KuKas_DD/ KuKas_MA)</value>
        [DataMember(Name="kuKa")]
        public string KuKa { get; set; }

        /// <summary>
        /// The Sales Rep’s Personal Number of the customer’s Sales Group.
        /// </summary>
        /// <value>The Sales Rep’s Personal Number of the customer’s Sales Group.</value>
        [DataMember(Name="salesRepPersonalNumber")]
        public string SalesRepPersonalNumber { get; set; }

        /// <summary>
        /// The payment terms for the customer.
        /// </summary>
        /// <value>The payment terms for the customer.</value>
        [DataMember(Name="termOfPayment")]
        public string TermOfPayment { get; set; }

        /// <summary>
        /// The cash discount for the customer.
        /// </summary>
        /// <value>The cash discount for the customer.</value>
        [DataMember(Name="cashDiscount")]
        public string CashDiscount { get; set; }

        /// <summary>
        /// The customer with this disposer number doesn&#39;t pay for recycling fees for the recyclable articles.
        /// </summary>
        /// <value>The customer with this disposer number doesn&#39;t pay for recycling fees for the recyclable articles.</value>
        [DataMember(Name="disposalNumber")]
        public string DisposalNumber { get; set; }

        /// <summary>
        /// Indicates the participation of the customer in the EDI.
        /// </summary>
        /// <value>Indicates the participation of the customer in the EDI.</value>
        [DataMember(Name="collaborationEDI")]
        public bool? CollaborationEDI { get; set; }

        /// <summary>
        /// The invoice account of the customer.
        /// </summary>
        /// <value>The invoice account of the customer.</value>
        [DataMember(Name="invoiceAccount")]
        public string InvoiceAccount { get; set; }

        /// <summary>
        /// Indicates whether the customer has complete invoicing
        /// </summary>
        /// <value>Indicates whether the customer has complete invoicing</value>
        [DataMember(Name="gwsDupCustCompleteInvoicing")]
        public bool? GwsDupCustCompleteInvoicing { get; set; }

        /// <summary>
        /// Indicates how the invoice is sum
        /// </summary>
        /// <value>Indicates how the invoice is sum</value>
        [DataMember(Name="gwsInvoiceSumBy")]
        public string GwsInvoiceSumBy { get; set; }

        /// <summary>
        /// The limited time delivery term expiry date
        /// </summary>
        /// <value>The limited time delivery term expiry date</value>
        [DataMember(Name="sagGwsLimitedTimeDlvTermExpiryDate")]
        public DateTime? SagGwsLimitedTimeDlvTermExpiryDate { get; set; }

        /// <summary>
        /// Indicates if there are price discount details for net on pricing packing slip
        /// </summary>
        /// <value>Indicates if there are price discount details for net on pricing packing slip</value>
        [DataMember(Name="sagGwsPriceDiscDetailsForNetPricingPackingSlip")]
        public bool? SagGwsPriceDiscDetailsForNetPricingPackingSlip { get; set; }

        /// <summary>
        /// Indicates whether the prices on sales are printed on packing slip
        /// </summary>
        /// <value>Indicates whether the prices on sales are printed on packing slip</value>
        [DataMember(Name="sagGwsPrintPricesOnSalesPackingSlip")]
        public bool? SagGwsPrintPricesOnSalesPackingSlip { get; set; }

        /// <summary>
        /// Indicates whether customer is excluded from shipment consolidation
        /// </summary>
        /// <value>Indicates whether customer is excluded from shipment consolidation</value>
        [DataMember(Name="sagGwsExcludeFromShipmentConsolidation")]
        public bool? SagGwsExcludeFromShipmentConsolidation { get; set; }

        /// <summary>
        /// Indicates whether there is suppress print of recommended price
        /// </summary>
        /// <value>Indicates whether there is suppress print of recommended price</value>
        [DataMember(Name="sagGwsSuppressPrintOfRecommendedPrice")]
        public bool? SagGwsSuppressPrintOfRecommendedPrice { get; set; }

        /// <summary>
        /// Indicates whether price type selection is enabled
        /// </summary>
        /// <value>Indicates whether price type selection is enabled</value>
        [DataMember(Name="sagPriceTypeSelectionEnabled")]
        public string SagPriceTypeSelectionEnabled { get; set; }

        /// <summary>
        /// The price discount details for net pricing calculated in price presentaion
        /// </summary>
        /// <value>The price discount details for net pricing calculated in price presentaion</value>
        [DataMember(Name="sagGwsPriceDiscDetailsForNetPricingCalcPricePresentation")]
        public string SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation { get; set; }

        /// <summary>
        /// sagSingleCreditNote
        /// </summary>
        /// <value>sagSingleCreditNote</value>
        [DataMember(Name= "sagSingleCreditNote")]
        public string SagSingleCreditNote { get; set; }

        /// <summary>
        /// The invoice sort code
        /// </summary>
        /// <value>The invoice sort code</value>
        [DataMember(Name="gwsInvoiceSortCode")]
        public string GwsInvoiceSortCode { get; set; }

        /// <summary>
        /// The day period
        /// </summary>
        /// <value>The day period</value>
        [DataMember(Name="gwsDayPeriod")]
        public string GwsDayPeriod { get; set; }

        /// <summary>
        /// The customer collection letter code
        /// </summary>
        /// <value>The customer collection letter code</value>
        [DataMember(Name="custCollectionLetterCode")]
        public string CustCollectionLetterCode { get; set; }

        /// <summary>
        /// The invoice advanced summary setup
        /// </summary>
        /// <value>The invoice advanced summary setup</value>
        [DataMember(Name="gwsInvoiceAdvancedSummarySetup")]
        public string GwsInvoiceAdvancedSummarySetup { get; set; }

        /// <summary>
        /// Indicates if a customer is a SmartCat customer
        /// </summary>
        /// <value>Indicates if a customer is a SmartCat customer</value>
        [DataMember(Name = "sagSpecialBusinessType")]
        public string SagSpecialBusinessType { get; set; }

        /// <summary>
        /// The special business customer number
        /// </summary>
        /// <value>The special business customer number</value>
        [DataMember(Name = "sagSpecialBusinessCustomerNo")]
        public string SagSpecialBusinessCustomerNo { get; set; }


        /// <summary>
        /// The certificate and the approval type name
        /// </summary>
        /// <value>The certificate and the approval type name</value>
        [DataMember(Name = "custApprovalTypes")]
        public List<CustApprovalTypes> CustApprovalTypes { get; set; }


        /// <summary>
        /// Contacts of customer.
        /// </summary>
        /// <value>Contacts of customer.</value>
        [DataMember(Name="contacts")]
        public List<ContactInfo> Contacts { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        [DataMember(Name = "customerGrantedBranchesForOrdering")]
        public List<CustomerGrantedBranchesForOrdering> CustomerGrantedBranchesForOrdering { get; set; }

        /// <summary>
        /// Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +  +  **self (GET)**: The link to article representation itself. Following this link returns representation of very same article resource. +  +  **collection/addresses (GET)**: Following this link with a GET request, results in a list of all addresses of the customer. +  +  **collection/orders (GET, POST)**: Following this link with a GET request, results in a list of all orders of the customer. In order to create a new order, a POST request must be sent to this URI. +  +  **collection/prices (POST)**: Article prices for customer can be retrieved by submitting a POST request to this URI. The request message contains the list of articles, for which prices are required. +  +  **collection/availabilities (POST)**: Availability of articles for requesting customer can be retrieved by submitting a POST request to this URI. The request message contains the list of articles, for which article availabilities are required. +  +  **collection/invoices (GET)**: Following this link with a GET request, results in a list of the invoices of the customer. +     +  **collection/creditlimit (GET)**: Following this link with a GET request, results in the credit limit info of the customer. +           
        /// </summary>
        /// <value>Map of links, which makes URIs to other resources available through symbolic names. The following table lists possible mappings: +  +  **self (GET)**: The link to article representation itself. Following this link returns representation of very same article resource. +  +  **collection/addresses (GET)**: Following this link with a GET request, results in a list of all addresses of the customer. +  +  **collection/orders (GET, POST)**: Following this link with a GET request, results in a list of all orders of the customer. In order to create a new order, a POST request must be sent to this URI. +  +  **collection/prices (POST)**: Article prices for customer can be retrieved by submitting a POST request to this URI. The request message contains the list of articles, for which prices are required. +  +  **collection/availabilities (POST)**: Availability of articles for requesting customer can be retrieved by submitting a POST request to this URI. The request message contains the list of articles, for which article availabilities are required. +  +  **collection/invoices (GET)**: Following this link with a GET request, results in a list of the invoices of the customer. +     +  **collection/creditlimit (GET)**: Following this link with a GET request, results in the credit limit info of the customer. +           </value>
        [Required]
        [DataMember(Name="_links")]
        public Dictionary<string, LinkEntry> Links { get; set; }

        #endregion dataMembers      

        #region overrides
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Nr: ").Append(Nr).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VatNr: ").Append(VatNr).Append("\n");
            sb.Append("  DefaultBranchId: ").Append(DefaultBranchId).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  AddressSalutation: ").Append(AddressSalutation).Append("\n");
            sb.Append("  BlockedStatus: ").Append(BlockedStatus).Append("\n");
            sb.Append("  BlockedReason: ").Append(BlockedReason).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SendMethod: ").Append(SendMethod).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  InvoiceTypeDesc: ").Append(InvoiceTypeDesc).Append("\n");
            sb.Append("  AlreadyUsedCredit: ").Append(AlreadyUsedCredit).Append("\n");
            sb.Append("  AvailableCredit: ").Append(AvailableCredit).Append("\n");
            sb.Append("  LetterCode: ").Append(LetterCode).Append("\n");
            sb.Append("  SalesOrderPool: ").Append(SalesOrderPool).Append("\n");
            sb.Append("  SalesGroup: ").Append(SalesGroup).Append("\n");
            sb.Append("  CostCenter: ").Append(CostCenter).Append("\n");
            sb.Append("  KuKa: ").Append(KuKa).Append("\n");
            sb.Append("  SalesRepPersonalNumber: ").Append(SalesRepPersonalNumber).Append("\n");
            sb.Append("  TermOfPayment: ").Append(TermOfPayment).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  DisposalNumber: ").Append(DisposalNumber).Append("\n");
            sb.Append("  CollaborationEDI: ").Append(CollaborationEDI).Append("\n");
            sb.Append("  InvoiceAccount: ").Append(InvoiceAccount).Append("\n");
            sb.Append("  GwsDupCustCompleteInvoicing: ").Append(GwsDupCustCompleteInvoicing).Append("\n");
            sb.Append("  GwsInvoiceSumBy: ").Append(GwsInvoiceSumBy).Append("\n");
            sb.Append("  SagGwsLimitedTimeDlvTermExpiryDate: ").Append(SagGwsLimitedTimeDlvTermExpiryDate).Append("\n");
            sb.Append("  SagGwsPriceDiscDetailsForNetPricingPackingSlip: ").Append(SagGwsPriceDiscDetailsForNetPricingPackingSlip).Append("\n");
            sb.Append("  SagGwsPrintPricesOnSalesPackingSlip: ").Append(SagGwsPrintPricesOnSalesPackingSlip).Append("\n");
            sb.Append("  SagGwsExcludeFromShipmentConsolidation: ").Append(SagGwsExcludeFromShipmentConsolidation).Append("\n");
            sb.Append("  SagGwsSuppressPrintOfRecommendedPrice: ").Append(SagGwsSuppressPrintOfRecommendedPrice).Append("\n");
            sb.Append("  SagPriceTypeSelectionEnabled: ").Append(SagPriceTypeSelectionEnabled).Append("\n");
            sb.Append("  SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation: ").Append(SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation).Append("\n");
            sb.Append("  GwsInvoiceSortCode: ").Append(GwsInvoiceSortCode).Append("\n");
            sb.Append("  GwsDayPeriod: ").Append(GwsDayPeriod).Append("\n");
            sb.Append("  CustCollectionLetterCode: ").Append(CustCollectionLetterCode).Append("\n");
            sb.Append("  GwsInvoiceAdvancedSummarySetup: ").Append(GwsInvoiceAdvancedSummarySetup).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Customer)obj);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="other">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Nr == other.Nr ||
                    Nr != null &&
                    Nr.Equals(other.Nr)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    VatNr == other.VatNr ||
                    VatNr != null &&
                    VatNr.Equals(other.VatNr)
                ) && 
                (
                    DefaultBranchId == other.DefaultBranchId ||
                    DefaultBranchId != null &&
                    DefaultBranchId.Equals(other.DefaultBranchId)
                ) && 
                (
                    Comments == other.Comments ||
                    Comments != null &&
                    Comments.Equals(other.Comments)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    AddressSalutation == other.AddressSalutation ||
                    AddressSalutation != null &&
                    AddressSalutation.Equals(other.AddressSalutation)
                ) && 
                (
                    BlockedStatus == other.BlockedStatus ||
                    BlockedStatus != null &&
                    BlockedStatus.Equals(other.BlockedStatus)
                ) && 
                (
                    BlockedReason == other.BlockedReason ||
                    BlockedReason != null &&
                    BlockedReason.Equals(other.BlockedReason)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    SendMethod == other.SendMethod ||
                    SendMethod != null &&
                    SendMethod.Equals(other.SendMethod)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    InvoiceType == other.InvoiceType ||
                    InvoiceType != null &&
                    InvoiceType.Equals(other.InvoiceType)
                ) && 
                (
                    InvoiceTypeDesc == other.InvoiceTypeDesc ||
                    InvoiceTypeDesc != null &&
                    InvoiceTypeDesc.Equals(other.InvoiceTypeDesc)
                ) && 
                (
                    AlreadyUsedCredit == other.AlreadyUsedCredit ||
                    AlreadyUsedCredit != null &&
                    AlreadyUsedCredit.Equals(other.AlreadyUsedCredit)
                ) && 
                (
                    AvailableCredit == other.AvailableCredit ||
                    AvailableCredit != null &&
                    AvailableCredit.Equals(other.AvailableCredit)
                ) && 
                (
                    LetterCode == other.LetterCode ||
                    LetterCode != null &&
                    LetterCode.Equals(other.LetterCode)
                ) && 
                (
                    SalesOrderPool == other.SalesOrderPool ||
                    SalesOrderPool != null &&
                    SalesOrderPool.Equals(other.SalesOrderPool)
                ) && 
                (
                    SalesGroup == other.SalesGroup ||
                    SalesGroup != null &&
                    SalesGroup.Equals(other.SalesGroup)
                ) && 
                (
                    CostCenter == other.CostCenter ||
                    CostCenter != null &&
                    CostCenter.Equals(other.CostCenter)
                ) && 
                (
                    KuKa == other.KuKa ||
                    KuKa != null &&
                    KuKa.Equals(other.KuKa)
                ) && 
                (
                    SalesRepPersonalNumber == other.SalesRepPersonalNumber ||
                    SalesRepPersonalNumber != null &&
                    SalesRepPersonalNumber.Equals(other.SalesRepPersonalNumber)
                ) && 
                (
                    TermOfPayment == other.TermOfPayment ||
                    TermOfPayment != null &&
                    TermOfPayment.Equals(other.TermOfPayment)
                ) && 
                (
                    CashDiscount == other.CashDiscount ||
                    CashDiscount != null &&
                    CashDiscount.Equals(other.CashDiscount)
                ) && 
                (
                    DisposalNumber == other.DisposalNumber ||
                    DisposalNumber != null &&
                    DisposalNumber.Equals(other.DisposalNumber)
                ) && 
                (
                    CollaborationEDI == other.CollaborationEDI ||
                    CollaborationEDI != null &&
                    CollaborationEDI.Equals(other.CollaborationEDI)
                ) && 
                (
                    InvoiceAccount == other.InvoiceAccount ||
                    InvoiceAccount != null &&
                    InvoiceAccount.Equals(other.InvoiceAccount)
                ) && 
                (
                    GwsDupCustCompleteInvoicing == other.GwsDupCustCompleteInvoicing ||
                    GwsDupCustCompleteInvoicing != null &&
                    GwsDupCustCompleteInvoicing.Equals(other.GwsDupCustCompleteInvoicing)
                ) && 
                (
                    GwsInvoiceSumBy == other.GwsInvoiceSumBy ||
                    GwsInvoiceSumBy != null &&
                    GwsInvoiceSumBy.Equals(other.GwsInvoiceSumBy)
                ) && 
                (
                    SagGwsLimitedTimeDlvTermExpiryDate == other.SagGwsLimitedTimeDlvTermExpiryDate ||
                    SagGwsLimitedTimeDlvTermExpiryDate != null &&
                    SagGwsLimitedTimeDlvTermExpiryDate.Equals(other.SagGwsLimitedTimeDlvTermExpiryDate)
                ) && 
                (
                    SagGwsPriceDiscDetailsForNetPricingPackingSlip == other.SagGwsPriceDiscDetailsForNetPricingPackingSlip ||
                    SagGwsPriceDiscDetailsForNetPricingPackingSlip != null &&
                    SagGwsPriceDiscDetailsForNetPricingPackingSlip.Equals(other.SagGwsPriceDiscDetailsForNetPricingPackingSlip)
                ) && 
                (
                    SagGwsPrintPricesOnSalesPackingSlip == other.SagGwsPrintPricesOnSalesPackingSlip ||
                    SagGwsPrintPricesOnSalesPackingSlip != null &&
                    SagGwsPrintPricesOnSalesPackingSlip.Equals(other.SagGwsPrintPricesOnSalesPackingSlip)
                ) && 
                (
                    SagGwsExcludeFromShipmentConsolidation == other.SagGwsExcludeFromShipmentConsolidation ||
                    SagGwsExcludeFromShipmentConsolidation != null &&
                    SagGwsExcludeFromShipmentConsolidation.Equals(other.SagGwsExcludeFromShipmentConsolidation)
                ) && 
                (
                    SagGwsSuppressPrintOfRecommendedPrice == other.SagGwsSuppressPrintOfRecommendedPrice ||
                    SagGwsSuppressPrintOfRecommendedPrice != null &&
                    SagGwsSuppressPrintOfRecommendedPrice.Equals(other.SagGwsSuppressPrintOfRecommendedPrice)
                ) && 
                (
                    SagPriceTypeSelectionEnabled == other.SagPriceTypeSelectionEnabled ||
                    SagPriceTypeSelectionEnabled != null &&
                    SagPriceTypeSelectionEnabled.Equals(other.SagPriceTypeSelectionEnabled)
                ) && 
                (
                    SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation == other.SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation ||
                    SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation != null &&
                    SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation.Equals(other.SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation)
                ) && 
                (
                    GwsInvoiceSortCode == other.GwsInvoiceSortCode ||
                    GwsInvoiceSortCode != null &&
                    GwsInvoiceSortCode.Equals(other.GwsInvoiceSortCode)
                ) && 
                (
                    GwsDayPeriod == other.GwsDayPeriod ||
                    GwsDayPeriod != null &&
                    GwsDayPeriod.Equals(other.GwsDayPeriod)
                ) && 
                (
                    CustCollectionLetterCode == other.CustCollectionLetterCode ||
                    CustCollectionLetterCode != null &&
                    CustCollectionLetterCode.Equals(other.CustCollectionLetterCode)
                ) && 
                (
                    GwsInvoiceAdvancedSummarySetup == other.GwsInvoiceAdvancedSummarySetup ||
                    GwsInvoiceAdvancedSummarySetup != null &&
                    GwsInvoiceAdvancedSummarySetup.Equals(other.GwsInvoiceAdvancedSummarySetup)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nr != null)
                    hashCode = hashCode * 59 + Nr.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (VatNr != null)
                    hashCode = hashCode * 59 + VatNr.GetHashCode();
                    if (DefaultBranchId != null)
                    hashCode = hashCode * 59 + DefaultBranchId.GetHashCode();
                    if (Comments != null)
                    hashCode = hashCode * 59 + Comments.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (AddressSalutation != null)
                    hashCode = hashCode * 59 + AddressSalutation.GetHashCode();
                    if (BlockedStatus != null)
                    hashCode = hashCode * 59 + BlockedStatus.GetHashCode();
                    if (BlockedReason != null)
                    hashCode = hashCode * 59 + BlockedReason.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (SendMethod != null)
                    hashCode = hashCode * 59 + SendMethod.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (InvoiceType != null)
                    hashCode = hashCode * 59 + InvoiceType.GetHashCode();
                    if (InvoiceTypeDesc != null)
                    hashCode = hashCode * 59 + InvoiceTypeDesc.GetHashCode();
                    if (AlreadyUsedCredit != null)
                    hashCode = hashCode * 59 + AlreadyUsedCredit.GetHashCode();
                    if (AvailableCredit != null)
                    hashCode = hashCode * 59 + AvailableCredit.GetHashCode();
                    if (LetterCode != null)
                    hashCode = hashCode * 59 + LetterCode.GetHashCode();
                    if (SalesOrderPool != null)
                    hashCode = hashCode * 59 + SalesOrderPool.GetHashCode();
                    if (SalesGroup != null)
                    hashCode = hashCode * 59 + SalesGroup.GetHashCode();
                    if (CostCenter != null)
                    hashCode = hashCode * 59 + CostCenter.GetHashCode();
                    if (KuKa != null)
                    hashCode = hashCode * 59 + KuKa.GetHashCode();
                    if (SalesRepPersonalNumber != null)
                    hashCode = hashCode * 59 + SalesRepPersonalNumber.GetHashCode();
                    if (TermOfPayment != null)
                    hashCode = hashCode * 59 + TermOfPayment.GetHashCode();
                    if (CashDiscount != null)
                    hashCode = hashCode * 59 + CashDiscount.GetHashCode();
                    if (DisposalNumber != null)
                    hashCode = hashCode * 59 + DisposalNumber.GetHashCode();
                    if (CollaborationEDI != null)
                    hashCode = hashCode * 59 + CollaborationEDI.GetHashCode();
                    if (InvoiceAccount != null)
                    hashCode = hashCode * 59 + InvoiceAccount.GetHashCode();
                    if (GwsDupCustCompleteInvoicing != null)
                    hashCode = hashCode * 59 + GwsDupCustCompleteInvoicing.GetHashCode();
                    if (GwsInvoiceSumBy != null)
                    hashCode = hashCode * 59 + GwsInvoiceSumBy.GetHashCode();
                    if (SagGwsLimitedTimeDlvTermExpiryDate != null)
                    hashCode = hashCode * 59 + SagGwsLimitedTimeDlvTermExpiryDate.GetHashCode();
                    if (SagGwsPriceDiscDetailsForNetPricingPackingSlip != null)
                    hashCode = hashCode * 59 + SagGwsPriceDiscDetailsForNetPricingPackingSlip.GetHashCode();
                    if (SagGwsPrintPricesOnSalesPackingSlip != null)
                    hashCode = hashCode * 59 + SagGwsPrintPricesOnSalesPackingSlip.GetHashCode();
                    if (SagGwsExcludeFromShipmentConsolidation != null)
                    hashCode = hashCode * 59 + SagGwsExcludeFromShipmentConsolidation.GetHashCode();
                    if (SagGwsSuppressPrintOfRecommendedPrice != null)
                    hashCode = hashCode * 59 + SagGwsSuppressPrintOfRecommendedPrice.GetHashCode();
                    if (SagPriceTypeSelectionEnabled != null)
                    hashCode = hashCode * 59 + SagPriceTypeSelectionEnabled.GetHashCode();
                    if (SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation != null)
                    hashCode = hashCode * 59 + SagGwsPriceDiscDetailsForNetPricingCalcPricePresentation.GetHashCode();
                    if (GwsInvoiceSortCode != null)
                    hashCode = hashCode * 59 + GwsInvoiceSortCode.GetHashCode();
                    if (GwsDayPeriod != null)
                    hashCode = hashCode * 59 + GwsDayPeriod.GetHashCode();
                    if (CustCollectionLetterCode != null)
                    hashCode = hashCode * 59 + CustCollectionLetterCode.GetHashCode();
                    if (GwsInvoiceAdvancedSummarySetup != null)
                    hashCode = hashCode * 59 + GwsInvoiceAdvancedSummarySetup.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Customer left, Customer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Customer left, Customer right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators

        #endregion overrides
    }
}
