/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ElectronicDeliveryNote : IEquatable<ElectronicDeliveryNote>
    { 
        /// <summary>
        /// The packing slip identification number.
        /// </summary>
        /// <value>The packing slip identification number.</value>
        [Required]
        [DataMember(Name="packingSlipNr")]
        public string PackingSlipNr { get; set; }

        /// <summary>
        /// The article identifier.
        /// </summary>
        /// <value>The article identifier.</value>
        [Required]
        [DataMember(Name="articleId")]
        public long? ArticleId { get; set; }

        /// <summary>
        /// Position in order.
        /// </summary>
        /// <value>Position in order.</value>
        [DataMember(Name="positionId")]
        public int? PositionId { get; set; }

        /// <summary>
        /// The recomended sales price.
        /// </summary>
        /// <value>The recomended sales price.</value>
        [DataMember(Name="recomSalesPrice")]
        public double? RecomSalesPrice { get; set; }

        /// <summary>
        /// The real delivery date time.
        /// </summary>
        /// <value>The real delivery date time.</value>
        [DataMember(Name="realDeliveryDate")]
        public DateTime? RealDeliveryDate { get; set; }

        /// <summary>
        /// Article identifier.
        /// </summary>
        /// <value>Article identifier.</value>
        [DataMember(Name="articleIdentifier")]
        public string ArticleIdentifier { get; set; }

        /// <summary>
        /// The article description in the current language of the item id.
        /// </summary>
        /// <value>The article description in the current language of the item id.</value>
        [DataMember(Name="articleName")]
        public string ArticleName { get; set; }

        /// <summary>
        /// The warehouse identifier.
        /// </summary>
        /// <value>The warehouse identifier.</value>
        [DataMember(Name="branchId")]
        public string BranchId { get; set; }

        /// <summary>
        /// The delivery date time.
        /// </summary>
        /// <value>The delivery date time.</value>
        [Required]
        [DataMember(Name="deliveryDate")]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// European Article Number or EAN which is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type.
        /// </summary>
        /// <value>European Article Number or EAN which is a standard describing a barcode symbology and numbering system used in global trade to identify a specific retail product type.</value>
        [DataMember(Name="EAN")]
        public string EAN { get; set; }

        /// <summary>
        /// ISO code of currency for invoicing the customer.
        /// </summary>
        /// <value>ISO code of currency for invoicing the customer.</value>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// The article identifier of the customer.
        /// </summary>
        /// <value>The article identifier of the customer.</value>
        [DataMember(Name="customerArticleId")]
        public string CustomerArticleId { get; set; }

        /// <summary>
        /// The article identifier of the manufacturer.
        /// </summary>
        /// <value>The article identifier of the manufacturer.</value>
        [DataMember(Name="manufacturerArticleId")]
        public string ManufacturerArticleId { get; set; }

        /// <summary>
        /// The net price of a single unit of the article before applying any discount.
        /// </summary>
        /// <value>The net price of a single unit of the article before applying any discount.</value>
        [DataMember(Name="netPrice")]
        public double? NetPrice { get; set; }

        /// <summary>
        /// Line number.
        /// </summary>
        /// <value>Line number.</value>
        [DataMember(Name="lineNum")]
        public int? LineNum { get; set; }

        /// <summary>
        /// Ordered variant.
        /// </summary>
        /// <value>Ordered variant.</value>
        [DataMember(Name="orderedVariant")]
        public string OrderedVariant { get; set; }

        /// <summary>
        /// Ordered.
        /// </summary>
        /// <value>Ordered.</value>
        [DataMember(Name="ordered")]
        public int? Ordered { get; set; }

        /// <summary>
        /// Vendor code supplied.
        /// </summary>
        /// <value>Vendor code supplied.</value>
        [DataMember(Name="vendorCodeSupplied")]
        public string VendorCodeSupplied { get; set; }

        /// <summary>
        /// PositionIdSetArticle.
        /// </summary>
        /// <value>PositionIdSetArticle.</value>
        [DataMember(Name="positionIdSetArticle")]
        public int? PositionIdSetArticle { get; set; }

        /// <summary>
        /// Vendor code supplied.
        /// </summary>
        /// <value>Vendor code supplied.</value>
        [DataMember(Name="freeDelivery")]
        public string FreeDelivery { get; set; }

        /// <summary>
        /// The created date time of the electronic delivery note.
        /// </summary>
        /// <value>The created date time of the electronic delivery note.</value>
        [DataMember(Name="createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Delivery note text.
        /// </summary>
        /// <value>Delivery note text.</value>
        [DataMember(Name="deliveryNoteTxt")]
        public string DeliveryNoteTxt { get; set; }

        /// <summary>
        /// The sales price.
        /// </summary>
        /// <value>The sales price.</value>
        [DataMember(Name="salesPrice")]
        public double? SalesPrice { get; set; }

        /// <summary>
        /// The amount of articles of the invoice position.
        /// </summary>
        /// <value>The amount of articles of the invoice position.</value>
        [DataMember(Name="lineInvoiceAmount")]
        public double? LineInvoiceAmount { get; set; }

        /// <summary>
        /// Order account.
        /// </summary>
        /// <value>Order account.</value>
        [DataMember(Name="orderAccount")]
        public string OrderAccount { get; set; }

        /// <summary>
        /// The vendor.
        /// </summary>
        /// <value>The vendor.</value>
        [DataMember(Name="vendor")]
        public string Vendor { get; set; }

        /// <summary>
        /// The number of the order.
        /// </summary>
        /// <value>The number of the order.</value>
        [DataMember(Name="orderNr")]
        public string OrderNr { get; set; }

        /// <summary>
        /// Denotes if this packing slip is a return or a delivery.
        /// </summary>
        /// <value>Denotes if this packing slip is a return or a delivery.</value>
        [DataMember(Name="return")]
        public bool? Return { get; set; }

        /// <summary>
        /// Quantity of order position.
        /// </summary>
        /// <value>Quantity of order position.</value>
        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Vendor code ordered.
        /// </summary>
        /// <value>Vendor code ordered.</value>
        [DataMember(Name="vendorCodeOrdered")]
        public string VendorCodeOrdered { get; set; }

        /// <summary>
        /// Description of article.
        /// </summary>
        /// <value>Description of article.</value>
        [DataMember(Name="articleDescription")]
        public string ArticleDescription { get; set; }

        /// <summary>
        /// The total value of the invoice.
        /// </summary>
        /// <value>The total value of the invoice.</value>
        [DataMember(Name="referenceFactor")]
        public int? ReferenceFactor { get; set; }

        /// <summary>
        /// Kis group.
        /// </summary>
        /// <value>Kis group.</value>
        [DataMember(Name="KisGroup")]
        public string KisGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ElectronicDeliveryNote {\n");
            sb.Append("  PackingSlipNr: ").Append(PackingSlipNr).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  RecomSalesPrice: ").Append(RecomSalesPrice).Append("\n");
            sb.Append("  RealDeliveryDate: ").Append(RealDeliveryDate).Append("\n");
            sb.Append("  ArticleIdentifier: ").Append(ArticleIdentifier).Append("\n");
            sb.Append("  ArticleName: ").Append(ArticleName).Append("\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  EAN: ").Append(EAN).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerArticleId: ").Append(CustomerArticleId).Append("\n");
            sb.Append("  ManufacturerArticleId: ").Append(ManufacturerArticleId).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  LineNum: ").Append(LineNum).Append("\n");
            sb.Append("  OrderedVariant: ").Append(OrderedVariant).Append("\n");
            sb.Append("  Ordered: ").Append(Ordered).Append("\n");
            sb.Append("  VendorCodeSupplied: ").Append(VendorCodeSupplied).Append("\n");
            sb.Append("  PositionIdSetArticle: ").Append(PositionIdSetArticle).Append("\n");
            sb.Append("  FreeDelivery: ").Append(FreeDelivery).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DeliveryNoteTxt: ").Append(DeliveryNoteTxt).Append("\n");
            sb.Append("  SalesPrice: ").Append(SalesPrice).Append("\n");
            sb.Append("  LineInvoiceAmount: ").Append(LineInvoiceAmount).Append("\n");
            sb.Append("  OrderAccount: ").Append(OrderAccount).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  OrderNr: ").Append(OrderNr).Append("\n");
            sb.Append("  Return: ").Append(Return).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  VendorCodeOrdered: ").Append(VendorCodeOrdered).Append("\n");
            sb.Append("  ArticleDescription: ").Append(ArticleDescription).Append("\n");
            sb.Append("  ReferenceFactor: ").Append(ReferenceFactor).Append("\n");
            sb.Append("  KisGroup: ").Append(KisGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ElectronicDeliveryNote)obj);
        }

        /// <summary>
        /// Returns true if ElectronicDeliveryNote instances are equal
        /// </summary>
        /// <param name="other">Instance of ElectronicDeliveryNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectronicDeliveryNote other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PackingSlipNr == other.PackingSlipNr ||
                    PackingSlipNr != null &&
                    PackingSlipNr.Equals(other.PackingSlipNr)
                ) && 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    PositionId == other.PositionId ||
                    PositionId != null &&
                    PositionId.Equals(other.PositionId)
                ) && 
                (
                    RecomSalesPrice == other.RecomSalesPrice ||
                    RecomSalesPrice != null &&
                    RecomSalesPrice.Equals(other.RecomSalesPrice)
                ) && 
                (
                    RealDeliveryDate == other.RealDeliveryDate ||
                    RealDeliveryDate != null &&
                    RealDeliveryDate.Equals(other.RealDeliveryDate)
                ) && 
                (
                    ArticleIdentifier == other.ArticleIdentifier ||
                    ArticleIdentifier != null &&
                    ArticleIdentifier.Equals(other.ArticleIdentifier)
                ) && 
                (
                    ArticleName == other.ArticleName ||
                    ArticleName != null &&
                    ArticleName.Equals(other.ArticleName)
                ) && 
                (
                    BranchId == other.BranchId ||
                    BranchId != null &&
                    BranchId.Equals(other.BranchId)
                ) && 
                (
                    DeliveryDate == other.DeliveryDate ||
                    DeliveryDate != null &&
                    DeliveryDate.Equals(other.DeliveryDate)
                ) && 
                (
                    EAN == other.EAN ||
                    EAN != null &&
                    EAN.Equals(other.EAN)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    CustomerArticleId == other.CustomerArticleId ||
                    CustomerArticleId != null &&
                    CustomerArticleId.Equals(other.CustomerArticleId)
                ) && 
                (
                    ManufacturerArticleId == other.ManufacturerArticleId ||
                    ManufacturerArticleId != null &&
                    ManufacturerArticleId.Equals(other.ManufacturerArticleId)
                ) && 
                (
                    NetPrice == other.NetPrice ||
                    NetPrice != null &&
                    NetPrice.Equals(other.NetPrice)
                ) && 
                (
                    LineNum == other.LineNum ||
                    LineNum != null &&
                    LineNum.Equals(other.LineNum)
                ) && 
                (
                    OrderedVariant == other.OrderedVariant ||
                    OrderedVariant != null &&
                    OrderedVariant.Equals(other.OrderedVariant)
                ) && 
                (
                    Ordered == other.Ordered ||
                    Ordered != null &&
                    Ordered.Equals(other.Ordered)
                ) && 
                (
                    VendorCodeSupplied == other.VendorCodeSupplied ||
                    VendorCodeSupplied != null &&
                    VendorCodeSupplied.Equals(other.VendorCodeSupplied)
                ) && 
                (
                    PositionIdSetArticle == other.PositionIdSetArticle ||
                    PositionIdSetArticle != null &&
                    PositionIdSetArticle.Equals(other.PositionIdSetArticle)
                ) && 
                (
                    FreeDelivery == other.FreeDelivery ||
                    FreeDelivery != null &&
                    FreeDelivery.Equals(other.FreeDelivery)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    DeliveryNoteTxt == other.DeliveryNoteTxt ||
                    DeliveryNoteTxt != null &&
                    DeliveryNoteTxt.Equals(other.DeliveryNoteTxt)
                ) && 
                (
                    SalesPrice == other.SalesPrice ||
                    SalesPrice != null &&
                    SalesPrice.Equals(other.SalesPrice)
                ) && 
                (
                    LineInvoiceAmount == other.LineInvoiceAmount ||
                    LineInvoiceAmount != null &&
                    LineInvoiceAmount.Equals(other.LineInvoiceAmount)
                ) && 
                (
                    OrderAccount == other.OrderAccount ||
                    OrderAccount != null &&
                    OrderAccount.Equals(other.OrderAccount)
                ) && 
                (
                    Vendor == other.Vendor ||
                    Vendor != null &&
                    Vendor.Equals(other.Vendor)
                ) && 
                (
                    OrderNr == other.OrderNr ||
                    OrderNr != null &&
                    OrderNr.Equals(other.OrderNr)
                ) && 
                (
                    Return == other.Return ||
                    Return != null &&
                    Return.Equals(other.Return)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    VendorCodeOrdered == other.VendorCodeOrdered ||
                    VendorCodeOrdered != null &&
                    VendorCodeOrdered.Equals(other.VendorCodeOrdered)
                ) && 
                (
                    ArticleDescription == other.ArticleDescription ||
                    ArticleDescription != null &&
                    ArticleDescription.Equals(other.ArticleDescription)
                ) && 
                (
                    ReferenceFactor == other.ReferenceFactor ||
                    ReferenceFactor != null &&
                    ReferenceFactor.Equals(other.ReferenceFactor)
                ) && 
                (
                    KisGroup == other.KisGroup ||
                    KisGroup != null &&
                    KisGroup.Equals(other.KisGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PackingSlipNr != null)
                    hashCode = hashCode * 59 + PackingSlipNr.GetHashCode();
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    if (PositionId != null)
                    hashCode = hashCode * 59 + PositionId.GetHashCode();
                    if (RecomSalesPrice != null)
                    hashCode = hashCode * 59 + RecomSalesPrice.GetHashCode();
                    if (RealDeliveryDate != null)
                    hashCode = hashCode * 59 + RealDeliveryDate.GetHashCode();
                    if (ArticleIdentifier != null)
                    hashCode = hashCode * 59 + ArticleIdentifier.GetHashCode();
                    if (ArticleName != null)
                    hashCode = hashCode * 59 + ArticleName.GetHashCode();
                    if (BranchId != null)
                    hashCode = hashCode * 59 + BranchId.GetHashCode();
                    if (DeliveryDate != null)
                    hashCode = hashCode * 59 + DeliveryDate.GetHashCode();
                    if (EAN != null)
                    hashCode = hashCode * 59 + EAN.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (CustomerArticleId != null)
                    hashCode = hashCode * 59 + CustomerArticleId.GetHashCode();
                    if (ManufacturerArticleId != null)
                    hashCode = hashCode * 59 + ManufacturerArticleId.GetHashCode();
                    if (NetPrice != null)
                    hashCode = hashCode * 59 + NetPrice.GetHashCode();
                    if (LineNum != null)
                    hashCode = hashCode * 59 + LineNum.GetHashCode();
                    if (OrderedVariant != null)
                    hashCode = hashCode * 59 + OrderedVariant.GetHashCode();
                    if (Ordered != null)
                    hashCode = hashCode * 59 + Ordered.GetHashCode();
                    if (VendorCodeSupplied != null)
                    hashCode = hashCode * 59 + VendorCodeSupplied.GetHashCode();
                    if (PositionIdSetArticle != null)
                    hashCode = hashCode * 59 + PositionIdSetArticle.GetHashCode();
                    if (FreeDelivery != null)
                    hashCode = hashCode * 59 + FreeDelivery.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (DeliveryNoteTxt != null)
                    hashCode = hashCode * 59 + DeliveryNoteTxt.GetHashCode();
                    if (SalesPrice != null)
                    hashCode = hashCode * 59 + SalesPrice.GetHashCode();
                    if (LineInvoiceAmount != null)
                    hashCode = hashCode * 59 + LineInvoiceAmount.GetHashCode();
                    if (OrderAccount != null)
                    hashCode = hashCode * 59 + OrderAccount.GetHashCode();
                    if (Vendor != null)
                    hashCode = hashCode * 59 + Vendor.GetHashCode();
                    if (OrderNr != null)
                    hashCode = hashCode * 59 + OrderNr.GetHashCode();
                    if (Return != null)
                    hashCode = hashCode * 59 + Return.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (VendorCodeOrdered != null)
                    hashCode = hashCode * 59 + VendorCodeOrdered.GetHashCode();
                    if (ArticleDescription != null)
                    hashCode = hashCode * 59 + ArticleDescription.GetHashCode();
                    if (ReferenceFactor != null)
                    hashCode = hashCode * 59 + ReferenceFactor.GetHashCode();
                    if (KisGroup != null)
                    hashCode = hashCode * 59 + KisGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ElectronicDeliveryNote left, ElectronicDeliveryNote right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ElectronicDeliveryNote left, ElectronicDeliveryNote right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
