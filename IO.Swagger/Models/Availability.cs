/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Availability : IEquatable<Availability>
    { 
        /// <summary>
        /// The id of the article.
        /// </summary>
        /// <value>The id of the article.</value>
        [DataMember(Name="articleId")]
        public string ArticleId { get; set; }

        /// <summary>
        /// Requested quantity of the article.
        /// </summary>
        /// <value>Requested quantity of the article.</value>
        [DataMember(Name="quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Attribute indicating whether the requested quantity is not available and SAG needs to place a back order in order to fulfill.
        /// </summary>
        /// <value>Attribute indicating whether the requested quantity is not available and SAG needs to place a back order in order to fulfill.</value>
        [DataMember(Name="backOrder")]
        public bool? BackOrder { get; set; }

        /// <summary>
        /// CutOff Time
        /// </summary>
        /// <value>CutOff Time</value>
        [DataMember(Name="cutOffTime")]
        public DateTime? CutOffTime { get; set; }

        /// <summary>
        /// Delivery Time 
        /// </summary>
        /// <value>Delivery Time</value>
        [DataMember(Name= "arrivalTime")]
        public DateTime? DeliveryTime { get; set; }

        /// <summary>
        /// Available now!
        /// </summary>
        /// <value>Available now!</value>
        [DataMember(Name="immediateDelivery")]
        public bool? ImmediateDelivery { get; set; }

        /// <summary>
        /// Gets or Sets StockWarehouse
        /// </summary>
        [DataMember(Name="stockWarehouse")]
        public string StockWarehouse { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryWarehouse
        /// </summary>
        [DataMember(Name="deliveryWarehouse")]
        public string DeliveryWarehouse { get; set; }

        /// <summary>
        /// Send method denotes how goods are usually delivered to the customer.
        /// </summary>
        /// <value>Send method denotes how goods are usually delivered to the customer.</value>
        [DataMember(Name="sendMethod")]
        public string SendMethod { get; set; }

        /// <summary>
        /// Assignment priority of split line - - filled only in split lines
        /// </summary>
        /// <value>Assignment priority of split line - - filled only in split lines</value>
        [DataMember(Name="assignmentPriority")]
        public long? AssignmentPriority { get; set; }

        /// <summary>
        /// Message in case we have error response from ERP.
        /// </summary>
        /// <value>Message in case we have error response from ERP.</value>
        [DataMember(Name="errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// A string of format X_Y_Z where X is the starting point of the tour, Y is the Description (tour number), Z is the time(HH:mm) 
        /// </summary>
        /// <value>A string of format X_Y_Z where X is the starting point of the tour, Y is the Description (tour number), Z is the time(HH:mm) </value>
        [DataMember(Name="tourName")]
        public string TourName { get; set; }

        /// <summary>
        /// A list of Tours from the current querying date and time until the current querying time of the next working day
        /// </summary>
        /// <value>A list of Tours from the current querying date and time until the current querying time of the next working day</value>
        [DataMember(Name="tourTimeTable")]
        public List<Tour> TourTimeTable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Availability {\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  BackOrder: ").Append(BackOrder).Append("\n");
            sb.Append("  CutOffTime: ").Append(CutOffTime).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  ImmediateDelivery: ").Append(ImmediateDelivery).Append("\n");
            sb.Append("  StockWarehouse: ").Append(StockWarehouse).Append("\n");
            sb.Append("  DeliveryWarehouse: ").Append(DeliveryWarehouse).Append("\n");
            sb.Append("  SendMethod: ").Append(SendMethod).Append("\n");
            sb.Append("  AssignmentPriority: ").Append(AssignmentPriority).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  TourName: ").Append(TourName).Append("\n");
            sb.Append("  TourTimeTable: ").Append(TourTimeTable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Availability)obj);
        }

        /// <summary>
        /// Returns true if Availability instances are equal
        /// </summary>
        /// <param name="other">Instance of Availability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Availability other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    BackOrder == other.BackOrder ||
                    BackOrder != null &&
                    BackOrder.Equals(other.BackOrder)
                ) && 
                (
                    CutOffTime == other.CutOffTime ||
                    CutOffTime != null &&
                    CutOffTime.Equals(other.CutOffTime)
                ) && 
                (
                    DeliveryTime == other.DeliveryTime ||
                    DeliveryTime != null &&
                    DeliveryTime.Equals(other.DeliveryTime)
                ) && 
                (
                    ImmediateDelivery == other.ImmediateDelivery ||
                    ImmediateDelivery != null &&
                    ImmediateDelivery.Equals(other.ImmediateDelivery)
                ) && 
                (
                    StockWarehouse == other.StockWarehouse ||
                    StockWarehouse != null &&
                    StockWarehouse.Equals(other.StockWarehouse)
                ) && 
                (
                    DeliveryWarehouse == other.DeliveryWarehouse ||
                    DeliveryWarehouse != null &&
                    DeliveryWarehouse.Equals(other.DeliveryWarehouse)
                ) && 
                (
                    SendMethod == other.SendMethod ||
                    SendMethod != null &&
                    SendMethod.Equals(other.SendMethod)
                ) && 
                (
                    AssignmentPriority == other.AssignmentPriority ||
                    AssignmentPriority != null &&
                    AssignmentPriority.Equals(other.AssignmentPriority)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    TourName == other.TourName ||
                    TourName != null &&
                    TourName.Equals(other.TourName)
                ) && 
                (
                    TourTimeTable == other.TourTimeTable ||
                    TourTimeTable != null &&
                    TourTimeTable.SequenceEqual(other.TourTimeTable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (BackOrder != null)
                    hashCode = hashCode * 59 + BackOrder.GetHashCode();
                    if (CutOffTime != null)
                    hashCode = hashCode * 59 + CutOffTime.GetHashCode();
                    if (DeliveryTime != null)
                    hashCode = hashCode * 59 + DeliveryTime.GetHashCode();
                    if (ImmediateDelivery != null)
                    hashCode = hashCode * 59 + ImmediateDelivery.GetHashCode();
                    if (StockWarehouse != null)
                    hashCode = hashCode * 59 + StockWarehouse.GetHashCode();
                    if (DeliveryWarehouse != null)
                    hashCode = hashCode * 59 + DeliveryWarehouse.GetHashCode();
                    if (SendMethod != null)
                    hashCode = hashCode * 59 + SendMethod.GetHashCode();
                    if (AssignmentPriority != null)
                    hashCode = hashCode * 59 + AssignmentPriority.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (TourName != null)
                    hashCode = hashCode * 59 + TourName.GetHashCode();
                    if (TourTimeTable != null)
                    hashCode = hashCode * 59 + TourTimeTable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Availability left, Availability right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Availability left, Availability right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
