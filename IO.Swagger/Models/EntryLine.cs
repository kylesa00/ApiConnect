/*
 * Webshop Service API
 *
 * Webshop services connect Webshop applications to ERP system. The entry point of Webshop API is `/customers/{companyName}/{customerNr}`, which is called by Webshop application whenever a user logs in. If the customer requestedOrderPosition by its number could be found, the response contains a `_links` section, which contains all possible navigations and actions the customer can take.
 *
 * OpenAPI spec version: 2.0-draftAv
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using static IO.Swagger.Models.UsedCreditLimit;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EntryLine : IEquatable<EntryLine>
    {
        /// <summary>
        /// Sequence of entry line.
        /// </summary>
        /// <value>Sequence of entry line</value>
        [Required]
        [DataMember(Name= "sequence")]
        public int Sequence { get; set; }

        /// <summary>
        /// Type of entry line.
        /// </summary>
        /// <value>Type of entry line.</value>
        [Required]
        [DataMember(Name= "type")]
        public string Type { get; set; }

        /// <summary>
        /// Number nr
        /// </summary>
        /// <value>Number nr</value>
        ///   [Required]
        [DataMember(Name = "nr")]
        public string Nr { get; set; }

        /// <summary>
        /// Description of entry line.
        /// </summary>
        /// <value>Description of entry line.</value>
        [DataMember(Name= "description")]
        public string Description { get; set; }

        /// <summary>
        /// Unit of measure.
        /// </summary>
        /// <value>Unit of measure</value>
        [DataMember(Name = "uoM")]
        public string UoM { get; set; }

        /// <summary>
        /// Quantity.
        /// </summary>
        /// <value>Quantity</value>
        [Required]
        [DataMember(Name= "quantity")]
        public double Quantity { get; set; }

        /// <summary>
        /// UnitPrice.
        /// </summary>
        /// <value>UnitPrice.</value>
        [Required]
        [DataMember(Name = "unitPrice")]
        public double UnitPrice { get; set; }

        /// <summary>
        /// AmountInclVAT.
        /// </summary>
        /// <value>AmountInclVAT.</value>
        ///   [Required]
        [DataMember(Name = "amountInclVAT")]
        public double AmountInclVAT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntryLine other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                
                (
                   true
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                   
                    
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EntryLine left, EntryLine right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntryLine left, EntryLine right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
